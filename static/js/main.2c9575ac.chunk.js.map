{"version":3,"sources":["serviceWorker.js","reducers/versionsReducer.js","versions.js","logic/date.js","reducers/meetReducer.js","logic/coefficients/bodyweight-multiple.js","logic/coefficients/schwartzmalone.js","logic/coefficients/wilks.js","logic/coefficients/glossbrenner.js","logic/coefficients/ipf.js","logic/coefficients/nasa.js","logic/entry.js","reducers/registrationReducer.js","reducers/liftingReducer.js","reducers/rootReducer.js","reducers/languageReducer.js","store.js","translations/locales/index.js","components/translations/OpenLifterIntlProvider.js","components/home/NewMeetModal.js","containers/HomeContainer.js","actions/globalActions.js","actions/meetSetupActions.js","components/meet-setup/MeetName.js","components/meet-setup/MeetDate.js","components/meet-setup/MeetLength.js","components/meet-setup/MeetLocation.js","components/meet-setup/PlatformCount.js","components/meet-setup/PlatformCounts.js","components/meet-setup/FormulaSelect.js","components/meet-setup/FederationSelect.js","components/meet-setup/DivisionSelect.js","components/meet-setup/WeightClassesSelect.js","components/meet-setup/BarAndCollarsWeightKg.js","components/meet-setup/Plates.js","components/meet-setup/MeetSetup.js","containers/MeetSetupContainer.js","components/registration/LifterTable.js","components/ValidatedTextInput.js","validation/iso8601Date.js","actions/registrationActions.js","components/registration/LifterRow.js","components/registration/NewButton.js","components/registration/RegistrationView.js","containers/RegistrationContainer.js","components/weighins/LifterTable.js","actions/liftingActions.js","components/weighins/WeightInput.js","validation/positiveInteger.js","components/weighins/LifterRow.js","components/weighins/WeighinsView.js","containers/WeighinsContainer.js","components/lifting/TopBar.js","logic/barLoad.js","logic/units.js","components/lifting/BarLoad.js","components/lifting/LeftPanel.js","components/lifting/AttemptInput.js","logic/divisionPlace.js","components/lifting/LiftingTable.js","components/lifting/LiftingFooter.js","logic/liftingOrder.js","components/lifting/LiftingView.js","containers/LiftingContainer.js","components/flight-order/OneFlightOrder.js","components/flight-order/OneCategory.js","components/flight-order/FlightOrderView.js","containers/FlightOrderContainer.js","components/results/ByDivision.js","logic/pointsPlace.js","components/results/ByPoints.js","logic/export/csv.js","logic/export/oplcsv.js","logic/export/usapl.js","components/results/ResultsView.js","containers/ResultsContainer.js","components/debug/RandomizeHelpers.js","components/debug/RandomizeMeetSetup.js","components/debug/RandomizeRegistration.js","components/debug/RandomizeWeighins.js","components/debug/StateTools.js","containers/DebugContainer.js","components/Navigation.js","App.js","index.js","components/lifting/BarLoad.module.scss","components/lifting/LiftingTable.module.scss","components/lifting/LiftingFooter.module.scss","components/lifting/LeftPanel.module.scss","components/flight-order/OneFlightOrder.module.scss","components/lifting/LiftingView.module.scss","components/lifting/TopBar.module.scss","components/results/ResultsView.module.scss"],"names":["Boolean","window","location","hostname","match","initialState","stateVersion","releaseVersion","localDateToIso8601","d","year","getFullYear","month","getMonth","day","getDate","yearStr","String","monthStr","length","dayStr","defaultPlatePairCountsKg","weightKg","pairCount","defaultPlatePairCountsLbs","name","formula","federation","date","Date","lengthDays","platformsOnDays","divisions","weightClassesKgMen","weightClassesKgWomen","weightClassesKgMx","inKg","combineSleevesAndWraps","allow4thAttempts","country","state","city","barAndCollarsWeightKg","platePairCounts","getWeightClassStr","classes","bodyweightKg","i","bodyweight_multiple","totalKg","schwartz_coefficient","adjusted","Math","max","pow","malone_coefficient","schwartzmalone","sex","wilksPoly","a","b","c","e","f","x","x2","x3","x4","wilksMen","min","wilksWomen","wilks","glossbrenner","glossbrenner_coefficient_men","glossbrenner_coefficient_women","PARAMETERS","M","Sleeves","SBD","S","B","D","Single-ply","F","ipfpoints","equipment","event","normalizedEquipment","normalizedSex","params","bw_log","log","points","isNaN","nasapoints","getBest5SquatKg","entry","best3SquatKg","squatStatus","squatKg","getBest5BenchKg","best3BenchKg","benchStatus","benchKg","getBest5DeadliftKg","best3DeadliftKg","deadliftStatus","deadliftKg","getProjectedTotalKg","best3Squat","getProjectedEventTotalKg","getBest3SquatKg","getFinalTotalKg","getFinalEventTotalKg","getProjectedWilks","getFinalWilks","getProjectedIPFPoints","getFinalIPFPoints","getProjectedBodyweightMultiple","getFinalBodyweightMultiple","getProjectedGlossbrenner","getFinalGlossbrenner","getProjectedNASAPoints","getFinalNASAPoints","getProjectedSchwartzMalone","getFinalSchwartzMalone","getLiftersOnDay","entries","filter","liftToAttemptFieldName","lift","liftToStatusFieldName","entryHasLifted","liftingPresentOnPlatform","platform","getWhetherPlatformsHaveLifted","ret","platformsOnDay","acc","push","nextEntryId","lookup","flight","overrideAttempt","overrideEntryId","combineReducers","versions","arguments","undefined","language","action","type","store","meet","Object","objectSpread","numDays","Number","diff","newPlatformsOnDays","slice","count","defaultPlates","defaultBar","platesOnSide","classesKg","index","findIndex","p","newPlates","changes","newState","assign","obj","registration","overwriteDefaults","newEntry","id","birthDate","age","intendedWeightClassKg","events","lot","memberId","paid","squatRackInfo","benchRackInfo","previousEntry","entryId","item","attemptOneIndexed","field","newEntries","oldEntry","newarray","newfields","status","success","fieldStatus","platformEntries","lifting","attempt","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","locales","es","eo","OpenLifterIntlProvider","this","props","messages","translations","react","index_es","locale","children","React","connect","NewMeetModal","react_default","createElement","Modal","show","onHide","close","Header","closeButton","Title","Body","Footer","lib","to","Button","bsStyle","onClick","Component","defaultProps","centerConsole","maxWidth","margin","buttonConsole","HomeContainer","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleLoadClick","loadhelper","document","getElementById","click","handleNewClick","setState","showNewMeetModal","closeConfirmModal","handleLoadFileInput","loadHelper","HTMLInputElement","selectedFile","files","rememberThis","assertThisInitialized","reader","FileReader","onload","errored","JSON","parse","target","result","overwriteStore","err","alert","readAsText","handleSaveClick","meetname","redux","replace","stringify","blob","Blob","saveAs","renderContinueButton","style","marginBottom","bsSize","block","bind","className","home_NewMeetModal","textAlign","alt","src","height","marginTop","accept","display","onChange","dispatch","setMeetName","setFederation","setDivisions","setLengthDays","setPlatformsOnDays","setWeightClasses","updateMeet","MeetName","context","handleChange","handleBlur","value","includes","getValidationState","FormGroup","validationState","ControlLabel","FormControl","placeholder","onBlur","MeetDate","initialDate","s","_s$split","split","_s$split2","slicedToArray","parseInt","setFullYear","iso8601ToLocalDate","react_datepicker_es","dateFormat","selected","setMeetDate","MeetLength","asNumber","_this2","pattern","step","days","MeetLocation","PlatformCount","label","PlatformCounts","createPlatformInputs","inputs","meet_setup_PlatformCount","options","FormulaSelect","valueObject","find","option","react_select_esm","defaultValue","setFormula","defaultOptions","FederationSelect","concat","Creatable_default","components","DropdownIndicator","DivisionSelect","objarray","division","inputValue","maybeUpdateRedux","handleInputChange","handleKeyDown","actionMeta","_this$state","preventDefault","newValue","toConsumableArray","_this$state2","isMulti","menuIsOpen","onInputChange","onKeyDown","createOption","WeightClassesSelect","sort","selectClassesBySex","ownProps","BarAndCollarsWeightKg","asNum","weight","setBarAndCollarsWeightKg","Plates","validateAmountInput","widget","floor","updateAmountHandler","setPlatePairCount","renderWeightRow","amount","plateRows","units","Table","striped","condensed","hover","yesNoBooleanOptions","yesNoToBoolean","yesno","yesNoFromBoolean","bool","MeetSetup","Grid","Row","Col","md","Panel","Heading","meet_setup_MeetName","meet_setup_MeetLocation","meet_setup_FederationSelect","meet_setup_MeetDate","meet_setup_MeetLength","meet_setup_PlatformCounts","meet_setup_DivisionSelect","meet_setup_WeightClassesSelect","meet_setup_FormulaSelect","componentClass","setCombineSleevesAndWraps","setAllow4thAttempts","setInKg","meet_setup_BarAndCollarsWeightKg","meet_setup_Plates","MeetSetupContainer","meet_setup_MeetSetup","LifterTable","renderRows","renderHeader","LifterRow","rowRenderer","map","shortStyle","width","BirthDateInput","blur","initialValue","onSuccess","disabled","validateIso8601Date","pieces","_pieces","onlyNumbers","newRegistration","deleteRegistration","updateRegistration","updateRegistrationLot","updateRegistrationMemberId","updateRegistrationBirthDate","updateRegistrationCountry","updateRegistrationState","selectedDay","deleteRegistrationClick","updateRegistrationDay","updateRegistrationPlatform","updateRegistrationFlight","updateRegistrationName","updateRegistrationSex","updateRegistrationDivisions","updateRegistrationEvents","updateRegistrationEquipment","dayOptions","platformOptions","divisionOptions","selectedDivisions","selectedEvents","ValidatedTextInput","menuPlacement","isClearable","NewButton","handleClick","marginStyle","RegistrationView","registration_LifterTable","registration_NewButton","RegistrationContainer","registration_RegistrationView","enterAttempt","WeightInput","weightNum","weightStr","multipleOf","validatePositiveInteger","inclusiveMax","startsWith","n","isInteger","updateRegistrationSquatRackInfo","updateRegistrationBenchRackInfo","updateRegistrationAge","validateAge","pos","validateRack","hasSquat","hasBench","hasDeadlift","disableSquatWeight","weighins_WeightInput","WeighinsView","getNumDaysFromEntries","max_day","dayPanels","lifters","weighins_LifterTable","WeighinsContainer","weighins_WeighinsView","LiftingHeader","lifterName","divisionsStr","currentEntryId","idx","join","styles","topBar","selectPlatesKg","loadingKg","plates","sortedPlates","sideWeightKg","loading","_sortedPlates$i","weightAny","isAlreadyLoaded","findWeightFrom","startFrom","kg2lbs","kg","displayWeight","toFixed","BarLoad","weightKgToStyle","kg50","kg25","kg20","kg15","kg10","kg5","kg2p5","kg1p25","kg1","kg0p75","kg0p5","kg0p25","error","weightKgToText","renderKgPlates","divs","plateCount","j","showCounter","plate","counter","opacity","rackInfo","container","bar","collar","LeftPanel","getBarLoadProps","fieldKg","weightLbs","current","next","nextAttemptOneIndexed","weightKgText","weightLbsText","currentLoading","nextLoading","relativeTo","finger","loadedPlate","makeLoadingRelative","nextBarLoad","loadingBar","nextCard","nextText","barArea","lifting_BarLoad","activeCard","attemptText","AttemptInput","fixups","isFinite","prevAttemptOneIndexed","prevKg","prevStatus","attemptInput","categoryToKey","category","keyToCategory","sortByPlaceInCategory","clonedEntries","aTotal","bTotal","getEventSortOrder","ev","indexOf","getEquipmentSortOrder","eq","getSexSortOrder","mapSexToClasses","men","women","mx","getAllResults","categoryMap","Map","classesForSex","weightClassStr","dividx","evidx","catEntries","get","set","results","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_ref3","_ref2","orderedEntries","return","catA","catB","aSex","bSex","aEvent","bEvent","aEquipment","bEquipment","aWeightClass","bWeightClass","sortCategoryResults","getProjectedResults","getFinalResults","LiftingTable","meetState","renderCell","columnType","categoryResults","textCell","bw","weightClass","firstDiv","renderAttemptField","renderBest3AttemptField","spacerCell","columns","rows","cells","col","rowClassName","getColumnHeaderString","best3","lightestFailed","goodlift","nolift","attemptInputCell","lifting_AttemptInput","maybeNegative","kgStr","anyPreviousAttemptTaken","currentAndHasPrevious","nextAndTookLast","headers","column","smallCell","nameCell","divisionCell","liftingtable","LiftingFooter","handleDayChange","setLiftingGroup","handlePlatformChange","handleFlightChange","handleLiftChange","handleAttemptChange","handleLifterChange","handleGoodLift","markLift","handleNoLift","handleFullscreen","fullscreenElement","exitFullscreen","liftingView","requestFullscreen","makeLifterOptions","lifterOptions","numPlatforms","flightOptions","flightsOnPlatform","attemptOptions","footer","leftControls","selector","rightControls","toggleReplaceTableWithWeighins","fullscreen","onMouseDown","noLift","goodLift","getNextAttemptNumberForEntry","weightsKg","statuses","MAX_ATTEMPTS","orderEntriesByAttempt","compareEntriesByAttempt","aKg","bKg","getLiftingOrder","entriesInFlight","earliestAttemptOneIndexed","getActiveAttemptNumber","attemptZeroIndexed","existsNextAttempt","existsPrevAttempt","byNextAttempt","byThisAttempt","byPrevAttempt","notLifting","Array","prototype","orderEntriesForAttempt","getCurrentEntryId","nextEntryInfo","currentEntryIndex","hasAttempt","notTaken","getNextEntryInfo","LiftingView","replaceTableWithWeighins","now","rightElement","lifting_LiftingTable","backgroundImage","TopBar","middleParentContainer","leftPanelContainer","lifting_LeftPanel","rightPanelContainer","lifting_LiftingFooter","entriesOnPlatform","flights","LiftingContainer","lifting_LiftingView","OneFlightOrder","getOrderBy","entriesForLift","bySquat","byBench","byDeadlift","maxRows","builder","lbs","leftDivider","header","OneCategory","sexToLabel","namelist","FlightOrderView","updateDay","updatePlatform","handlePrint","print","selectorStyle","shownEntries","knownFlights","flightOrders","_loop","flight_order_OneFlightOrder","categories","flight_order_OneCategory","FlightOrderContainer","flight_order_FlightOrderView","ByDivision","renderEntryRow","place","pointsStr","mapSexToLabel","renderCategoryResults","row","eqpstr","categoryPanels","panel","meetName","sortByFormulaPlaceInCategory","indexMap","memoizedPoints","aIndex","bIndex","aPoints","bPoints","getAllRankings","sortPointsCategoryResults","ByPoints","rank","csvString","trim","Csv","fieldnames","createClass","splice","removeColumnByIndex","empty","removeEmptyColumns","strRows","addEntriesRow","csv","finalEventTotalKg","fill","standardizeEquipment","best3Bench","getBest3BenchKg","best3Dead","getBest3DeadliftKg","exportAsOplCsv","meetCsv","makeMeetCsv","entriesCsv","squatFieldnames","benchFieldnames","deadliftFieldnames","_results$_i","makeEntriesCsv","versionStr","toString","addDataRow","hasDL","_entry$birthDate$spli","_entry$birthDate$spli2","makeBirthDate","translateEvent","exportAsUSAPLCsv","_results$i","globalMergeDay","globalMergePlatform","ResultsView","makeDayOptions","global","handleByChange","by","handleExportAsOplCsvClick","handleExportAsUSAPLCsvClick","handleExportPlatformClick","exportname","handleMergePlatformClick","mergePlatform","makePlatformMergeButtons","platformsHaveLifted","forms","liftedOnDay","buttons","_loop2","lifted","actionText","marginLeft","results_ByDivision","results_ByPoints","fontWeight","controlPanel","dropdown","ResultsContainer","results_ResultsView","randomString","random","substr","randomInt","randomFixedPoint","fixedPoints","power","NonsenseFederations","NonsenseDivisions","RandomizeMeetSetupButton","randomizeMeetSetup","fed","numClassesMen","numClassesWomen","classesMen","classesWomen","classesMx","numDivisions","div","age_lower","age_upper","NonsenseFirstNames","NonsenseLastNames","RandomizeRegistrationButton","deleteExistingRegistrations","generateEntries","randomizeRegistration","entryIds","numLifters","equipmentSelect","divisionsUpperBound","divchooser","choice","numFlights","RandomizeWeighinsButton","randomizeWeighins","randomAttempt","safety","StateTools","reInitializeRedux","localStorage","clear","reload","marginRight","ButtonGroup","RandomizeMeetSetup","RandomizeRegistration","RandomizeWeighins","DebugContainer","debug_StateTools","Navigation","Navbar","Brand","Toggle","Collapse","Nav","exact","NavItem","eventKey","addLocaleData","App","_configureStore","createStore","applyMiddleware","thunk","persistor","persistStore","configureStore","integration_react","translations_OpenLifterIntlProvider","BrowserRouter","basename","components_Navigation","Switch","Route","path","component","rootElement","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","unregister","module","exports"],"mappings":"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","file":"static/js/main.2c9575ac.chunk.js","sourcesContent":["// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// See comments in src/versions.js.\n\nimport { stateVersion, releaseVersion } from \"../versions\";\nimport type { VersionsState } from \"../types/stateTypes\";\n\nconst initialState: VersionsState = {\n  stateVersion,\n  releaseVersion\n};\n\ntype Action = {};\n\nexport default (state: VersionsState = initialState, action: Action): VersionsState => {\n  return state;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Versioning for the global State object.\n//\n// Incrementing the version string breaks compatibility between implementations,\n// with the expectation that a converter will be automatically applied if possible,\n// such that a version of OpenLifter that internally uses version \"B\" can still\n// load files written in version \"A\", by means of auto-upgrading.\n//\n// This string is stored on the GlobalState as the property \"versions.stateVersion\".\n// Each save file thereby reports its own version.\nexport const stateVersion: string = \"0\";\n\n// Versioning for the OpenLifter project as a whole.\n//\n// This is safely incrementable on *releases*. Its function is exclusively to alert\n// users to \"automatic\" upgrades of the software, and it is reported explicitly\n// on the Home page.\n//\n// Changing this version does *not* represent data incompatibilities; for that,\n// please use the \"stateVersion\".\n//\n// This string is stored on the GlobalState as the property \"versions.releaseVersion\".\nexport const releaseVersion: string = \"0.1-beta\";\n\n// Strictly-presentational representation of when the releaseVersion was changed.\n// Update this concurrently with modifying the releaseVersion.\n// This value is not stored in the state: it's purely informational.\nexport const releaseDate: string = \"(ﾉ◕ヮ◕)ﾉ*:・ﾟ✧\";\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines logic for working with Dates, which is trickier than you might expect:\n// the global state wants strings in YYYY-MM-DD, date objects get created from\n// strings in UTC time, and React widgets create Dates in local time.\n\nexport const iso8601ToLocalDate = (s: string): Date => {\n  const [yearStr, monthStr, dayStr] = s.split(\"-\");\n\n  const year = parseInt(yearStr, 10);\n  const month = parseInt(monthStr, 10);\n  const day = parseInt(dayStr, 10);\n\n  let d = new Date();\n  d.setFullYear(year, month - 1, day);\n  return d;\n};\n\nexport const localDateToIso8601 = (d: Date): string => {\n  const year: number = d.getFullYear();\n  const month: number = d.getMonth() + 1;\n  const day: number = d.getDate();\n\n  const yearStr = String(year);\n  let monthStr = String(month);\n  if (monthStr.length === 1) {\n    monthStr = \"0\" + monthStr;\n  }\n  let dayStr = String(day);\n  if (dayStr.length === 1) {\n    dayStr = \"0\" + dayStr;\n  }\n\n  return yearStr + \"-\" + monthStr + \"-\" + dayStr;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { localDateToIso8601 } from \"../logic/date\";\n\nimport type { MeetSetupAction, OverwriteStoreAction } from \"../types/actionTypes\";\nimport type { PlatePairCount } from \"../types/dataTypes\";\nimport type { MeetState } from \"../types/stateTypes\";\n\nconst defaultPlatformsOnDay = 1;\n\nconst defaultBarAndCollarsWeightKg = 25; // Assuming metal 2.5kg collars.\nconst defaultBarAndCollarsWeightLbs = 45; // Assuming plastic collars.\n\n// Default kg plates, allowing for increments of 0.5kg.\nconst defaultPlatePairCountsKg: Array<PlatePairCount> = [\n  { weightKg: 50, pairCount: 0 },\n  { weightKg: 25, pairCount: 8 },\n  { weightKg: 20, pairCount: 1 },\n  { weightKg: 15, pairCount: 1 },\n  { weightKg: 10, pairCount: 1 },\n  { weightKg: 5, pairCount: 1 },\n  { weightKg: 2.5, pairCount: 1 },\n  { weightKg: 1.25, pairCount: 1 },\n  { weightKg: 1, pairCount: 1 },\n  { weightKg: 0.75, pairCount: 1 },\n  { weightKg: 0.5, pairCount: 1 },\n  { weightKg: 0.25, pairCount: 1 }\n];\n\nconst kg = 2.20462262;\n\n// Default lbs plates, allowing for increments of 1lb.\nconst defaultPlatePairCountsLbs: Array<PlatePairCount> = [\n  { weightKg: 45 / kg, pairCount: 8 },\n  { weightKg: 35 / kg, pairCount: 0 },\n  { weightKg: 25 / kg, pairCount: 1 },\n  { weightKg: 10 / kg, pairCount: 2 },\n  { weightKg: 5 / kg, pairCount: 1 },\n  { weightKg: 2.5 / kg, pairCount: 1 },\n  { weightKg: 1.25 / kg, pairCount: 1 },\n  { weightKg: 0.5 / kg, pairCount: 2 }\n];\n\nconst initialState: MeetState = {\n  name: \"\",\n  formula: \"Wilks\",\n  federation: \"\",\n  date: localDateToIso8601(new Date()),\n  lengthDays: 1,\n  platformsOnDays: [defaultPlatformsOnDay],\n  divisions: [],\n  weightClassesKgMen: [],\n  weightClassesKgWomen: [],\n  weightClassesKgMx: [],\n  inKg: true,\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true,\n  country: \"\",\n  state: \"\",\n  city: \"\",\n  barAndCollarsWeightKg: defaultBarAndCollarsWeightKg,\n  platePairCounts: defaultPlatePairCountsKg\n};\n\n// Given a sorted list of weight classes (in kg) and a bodyweight (in kg),\n// return a string describing the weight class.\nexport const getWeightClassStr = (classes: Array<number>, bodyweightKg: number): string => {\n  if (bodyweightKg === 0) return \"\";\n  if (classes.length === 0) return \"\";\n\n  for (let i = 0; i < classes.length; i++) {\n    if (bodyweightKg <= classes[i]) {\n      return String(classes[i]);\n    }\n  }\n  return String(classes[classes.length - 1]) + \"+\";\n};\n\ntype Action = MeetSetupAction | OverwriteStoreAction;\n\nexport default (state: MeetState = initialState, action: Action): MeetState => {\n  switch (action.type) {\n    case \"SET_MEET_NAME\":\n      return { ...state, name: action.name };\n\n    case \"SET_FORMULA\":\n      return { ...state, formula: action.formula };\n\n    case \"SET_FEDERATION\":\n      return { ...state, federation: action.federation };\n\n    case \"SET_DIVISIONS\":\n      return { ...state, divisions: action.divisions };\n\n    case \"SET_MEET_DATE\":\n      return { ...state, date: action.date };\n\n    case \"SET_LENGTH_DAYS\": {\n      const numDays = Number(action.length);\n\n      if (numDays >= state.platformsOnDays.length) {\n        const diff = numDays - state.platformsOnDays.length;\n\n        let newPlatformsOnDays: Array<number> = state.platformsOnDays.slice();\n        for (let i = 0; i < diff; i++) {\n          newPlatformsOnDays.push(defaultPlatformsOnDay);\n        }\n\n        return { ...state, lengthDays: numDays, platformsOnDays: newPlatformsOnDays };\n      }\n      return { ...state, lengthDays: numDays };\n    }\n\n    case \"SET_PLATFORM_COUNT\": {\n      const day = Number(action.day);\n      const count = Number(action.count);\n\n      let newPlatformsOnDays: Array<number> = state.platformsOnDays.slice();\n      newPlatformsOnDays[day - 1] = count;\n      return { ...state, platformsOnDays: newPlatformsOnDays };\n    }\n\n    case \"SET_IN_KG\": {\n      // Changing the units also changes the loading, so re-initialize from defaults.\n      const defaultPlates = action.inKg ? defaultPlatePairCountsKg : defaultPlatePairCountsLbs;\n      const defaultBar = action.inKg ? defaultBarAndCollarsWeightKg : defaultBarAndCollarsWeightLbs / kg;\n      return { ...state, inKg: action.inKg, platesOnSide: defaultPlates, barAndCollarsWeightKg: defaultBar };\n    }\n\n    case \"SET_WEIGHTCLASSES\": {\n      const sex = action.sex;\n      const classesKg = action.classesKg;\n      switch (sex) {\n        case \"M\":\n          return { ...state, weightClassesKgMen: classesKg };\n        case \"F\":\n          return { ...state, weightClassesKgWomen: classesKg };\n        case \"Mx\":\n          return { ...state, weightClassesKgMx: classesKg };\n        default:\n          (sex: empty) // eslint-disable-line\n          return state;\n      }\n    }\n\n    case \"SET_BAR_AND_COLLARS_WEIGHT_KG\": {\n      return { ...state, barAndCollarsWeightKg: action.weightKg };\n    }\n\n    case \"SET_PLATE_PAIR_COUNT\": {\n      const { weightKg, pairCount } = action;\n\n      // Find the index of the object in the platesOnSide array by comparing weights.\n      const index = state.platePairCounts.findIndex(p => p.weightKg === weightKg);\n\n      // Clone the array.\n      let newPlates: Array<PlatePairCount> = state.platePairCounts.slice();\n\n      // Replace with a new object in the new array.\n      newPlates[index] = { weightKg, pairCount };\n\n      return { ...state, platePairCounts: newPlates };\n    }\n\n    case \"UPDATE_MEET\": {\n      const changes = action.changes;\n\n      // Make a new MeetState with just the changes overwritten.\n      let newState = Object.assign({}, state);\n      return Object.assign(newState, changes);\n    }\n\n    case \"OVERWRITE_STORE\": {\n      // Copy all the state objects into an empty object.\n      let obj = Object.assign({}, state);\n\n      // Copy in the action's objects, overwriting the state's objects.\n      return Object.assign(obj, action.store.meet);\n    }\n\n    default:\n      (action.type: empty); // eslint-disable-line\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of points as a multiple of bodyweight.\n//\n// Although this logic is very simple, there is some finesse to avoid\n// division by zero that is easier to write once and import than repeat.\n\nexport const bodyweight_multiple = (bodyweightKg: number, totalKg: number): number => {\n  if (bodyweightKg <= 0 || totalKg <= 0) {\n    return 0;\n  }\n  return totalKg / bodyweightKg;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Schwartz-Malone points.\n// Taken from https://gitlab.com/openpowerlifting/opl-data.\n\nimport type { Sex } from \"../../types/dataTypes\";\n\n// Calculated the Schwartz coefficient, used for men.\nexport const schwartz_coefficient = (bodyweightKg: number): number => {\n  // Values calculated by fitting to coefficient tables.\n  const A = 3565.902903983125;\n  const B = -2.244917050872728;\n  const C = 0.445775838479913;\n\n  // Arbitrary choice of lower bound.\n  let adjusted = Math.max(bodyweightKg, 40.0);\n\n  return A * Math.pow(adjusted, B) + C;\n};\n\n// Calculates the Malone coefficient, used for women.\nexport const malone_coefficient = (bodyweightKg: number): number => {\n  // Values calculated by fitting to coefficient tables.\n  const A = 106.011586323613;\n  const B = -1.293027130579051;\n  const C = 0.322935585328304;\n\n  // Lower bound chosen at point where Malone = max(Wilks).\n  let adjusted = Math.max(bodyweightKg, 29.24);\n\n  return A * Math.pow(adjusted, B) + C;\n};\n\n// Calculates Schwartz-Malone points.\n//\n// Schwartz-Malone is an older system that was superseded by Wilks.\nexport const schwartzmalone = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  switch (sex) {\n    case \"M\":\n      return schwartz_coefficient(bodyweightKg) * totalKg;\n    case \"F\":\n      return malone_coefficient(bodyweightKg) * totalKg;\n    default:\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Wilks points.\n// Taken from https://gitlab.com/openpowerlifting/ipf-points-calculator.\n\nimport type { Sex } from \"../../types/dataTypes\";\n\nfunction wilksPoly(a: number, b: number, c: number, d: number, e: number, f: number, x: number): number {\n  var x2 = x * x,\n    x3 = x2 * x,\n    x4 = x3 * x,\n    x5 = x4 * x;\n  return 500.0 / (a + b * x + c * x2 + d * x3 + e * x4 + f * x5);\n}\n\nexport function wilksMen(bodyweightKg: number): number {\n  const normalized = Math.min(Math.max(bodyweightKg, 40.0), 201.9);\n  return wilksPoly(-216.0475144, 16.2606339, -0.002388645, -0.00113732, 7.01863e-6, -1.291e-8, normalized);\n}\n\nexport function wilksWomen(bodyweightKg: number): number {\n  const normalized = Math.min(Math.max(bodyweightKg, 26.51), 154.53);\n  return wilksPoly(\n    594.31747775582,\n    -27.23842536447,\n    0.82112226871,\n    -0.00930733913,\n    0.00004731582,\n    -0.00000009054,\n    normalized\n  );\n}\n\nexport const wilks = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  switch (sex) {\n    case \"M\":\n    case \"Mx\":\n      return wilksMen(bodyweightKg) * totalKg;\n    case \"F\":\n      return wilksWomen(bodyweightKg) * totalKg;\n    default:\n      (sex: empty) // eslint-disable-line\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Glossbrenner points.\n// Taken from https://gitlab.com/openpowerlifting/opl-data.\n\nimport { schwartz_coefficient, malone_coefficient } from \"./schwartzmalone\";\nimport { wilksMen, wilksWomen } from \"./wilks\";\n\nimport type { Sex } from \"../../types/dataTypes\";\n\nconst glossbrenner_coefficient_men = (bodyweightKg: number): number => {\n  // Glossbrenner is defined piecewise.\n  if (bodyweightKg < 153.05) {\n    return (schwartz_coefficient(bodyweightKg) + wilksMen(bodyweightKg)) / 2.0;\n  } else {\n    // Linear coefficients found by fitting to a table.\n    const A = -0.000821668402557;\n    const B = 0.676940740094416;\n    return (schwartz_coefficient(bodyweightKg) + A * bodyweightKg + B) / 2.0;\n  }\n};\n\nconst glossbrenner_coefficient_women = (bodyweightKg: number): number => {\n  // Glossbrenner is defined piecewise.\n  if (bodyweightKg < 106.3) {\n    return (malone_coefficient(bodyweightKg) + wilksWomen(bodyweightKg)) / 2.0;\n  } else {\n    // Linear coefficients found by fitting to a table.\n    const A = -0.000313738002024;\n    const B = 0.852664892884785;\n    return (malone_coefficient(bodyweightKg) + A * bodyweightKg + B) / 2.0;\n  }\n};\n\n// Calculates Glossbrenner points.\n//\n// Glossbrenner is the average of two older systems, Schwartz-Malone and Wilks,\n// with a piecewise linear section.\n//\n// This points system is most often used by GPC affiliates.\nexport const glossbrenner = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  switch (sex) {\n    case \"M\":\n    case \"Mx\":\n      return glossbrenner_coefficient_men(bodyweightKg) * totalKg;\n    case \"F\":\n      return glossbrenner_coefficient_women(bodyweightKg) * totalKg;\n    default:\n      (sex: empty) // eslint-disable-line\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of IPF Points.\n// Taken from https://gitlab.com/openpowerlifting/ipf-points-calculator.\n\nimport type { Sex, Event, Equipment } from \"../../types/dataTypes\";\n\ntype Coefficients = Array<number>;\ntype ByEvent = {\n  SBD: Coefficients,\n  S: Coefficients,\n  B: Coefficients,\n  D: Coefficients\n};\ntype ByEquipment = {\n  Sleeves: ByEvent,\n  \"Single-ply\": ByEvent\n};\ntype BySex = {\n  M: ByEquipment,\n  F: ByEquipment\n};\n\nconst PARAMETERS: BySex = {\n  M: {\n    Sleeves: {\n      SBD: [310.67, 857.785, 53.216, 147.0835],\n      S: [123.1, 363.085, 25.1667, 75.4311],\n      B: [86.4745, 259.155, 17.57845, 53.122],\n      D: [103.5355, 244.765, 15.3714, 31.5022]\n    },\n    \"Single-ply\": {\n      SBD: [387.265, 1121.28, 80.6324, 222.4896],\n      S: [150.485, 446.445, 36.5155, 103.7061],\n      B: [133.94, 441.465, 35.3938, 113.0057],\n      D: [110.135, 263.66, 14.996, 23.011]\n    }\n  },\n  F: {\n    Sleeves: {\n      SBD: [125.1435, 228.03, 34.5246, 86.8301],\n      S: [50.479, 105.632, 19.1846, 56.2215],\n      B: [25.0485, 43.848, 6.7172, 13.952],\n      D: [47.136, 67.349, 9.1555, 13.67]\n    },\n    \"Single-ply\": {\n      SBD: [176.58, 373.315, 48.4534, 110.0103],\n      S: [74.6855, 171.585, 21.9475, 52.2948],\n      B: [49.106, 124.209, 23.199, 67.4926],\n      D: [51.002, 69.8265, 8.5802, 5.7258]\n    }\n  }\n};\n\nexport const ipfpoints = (\n  totalKg: number,\n  bodyweightKg: number,\n  sex: Sex,\n  equipment: Equipment,\n  event: Event\n): number => {\n  if (totalKg === 0) return 0;\n  if (bodyweightKg < 40) return 0;\n\n  // Restrict inputs to only the defined subset.\n  let normalizedEquipment = equipment;\n  if (equipment === \"Bare\" || equipment === \"Wraps\") {\n    normalizedEquipment = \"Sleeves\";\n  } else if (equipment === \"Multi-ply\") {\n    normalizedEquipment = \"Single-ply\";\n  }\n  if (normalizedEquipment !== \"Sleeves\" && normalizedEquipment !== \"Single-ply\") {\n    return 0;\n  }\n\n  // Consider Mx athletes as M, since that's the harsher formula.\n  let normalizedSex = sex;\n  if (sex === \"Mx\") normalizedSex = \"M\";\n\n  if (event !== \"SBD\" && event !== \"S\" && event !== \"B\" && event !== \"D\") return 0;\n  if (normalizedSex !== \"M\" && normalizedSex !== \"F\") return 0;\n\n  const params = PARAMETERS[normalizedSex][normalizedEquipment][event];\n  const bw_log = Math.log(bodyweightKg);\n\n  const mean = params[0] * bw_log - params[1];\n  const dev = params[2] * bw_log - params[3];\n\n  const points = 500 + (100 * (totalKg - mean)) / dev;\n  if (isNaN(points) || points < 0) {\n    return 0;\n  }\n  return points;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of NASA Points.\n// They are defined in a coefficient table: http://nasa-sports.com/coefficient-system/\n// It turns out that they are a simple line.\n\nexport const nasapoints = (bodyweightKg: number, totalKg: number): number => {\n  // The function was determined using fitting in GNUPlot:\n  //\n  // Final set of parameters            Asymptotic Standard Error\n  // =======================            ==========================\n  // m               = 0.00620912       +/- 1.265e-06    (0.02037%)\n  // b               = 0.565697         +/- 0.0001322    (0.02337%)\n  const m = 0.00620912;\n  const b = 0.565697;\n\n  if (bodyweightKg < 30) return 0; // Arbitrary lower bound.\n  return (totalKg / bodyweightKg) * (m * bodyweightKg + b);\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines logic for creating and working with Entry objects.\n\nimport { bodyweight_multiple } from \"./coefficients/bodyweight-multiple\";\nimport { glossbrenner } from \"./coefficients/glossbrenner\";\nimport { ipfpoints } from \"./coefficients/ipf\";\nimport { nasapoints } from \"./coefficients/nasa\";\nimport { schwartzmalone } from \"./coefficients/schwartzmalone\";\nimport { wilks } from \"./coefficients/wilks\";\n\nimport type { Entry, Lift, Event, FieldKg, FieldStatus } from \"../types/dataTypes\";\n\n// Length of {squat,bench,deadlift}{Kg,Status} in each Entry.\nexport const MAX_ATTEMPTS = 5;\n\nexport const newDefaultEntry = (id: number): Entry => {\n  return {\n    // Bookkeeping internal information for OpenLifter.\n    id: id, // The global unique ID of this registration.\n\n    // Information about when the lifter is scheduled to lift.\n    day: 1, // The day on which the lifter is lifting.\n    platform: 1, // The platform on which the lifter is lifting.\n    flight: \"A\", // The flight in which the lifter is lifting.\n\n    // Information about the lifter themselves.\n    name: \"\", // The lifter's name.\n    sex: \"M\", // The lifter's sex.\n    birthDate: \"\", // The lifter's birthdate (YYYY-MM-DD).\n    age: 0, // The lifter's age in years\n    country: \"\", // Lifter's home country, or blank.\n    state: \"\", // Lifter's home state, or blank.\n    intendedWeightClassKg: \"\", // The weightclass for which the lifter registered.\n    equipment: \"Sleeves\", // The equipment category for which the lifter registered.\n    divisions: [], // A list of divisions the lifter entered.\n    events: [\"S\"], // A list of events the lifter entered.\n\n    // Metadata about the lifter, assigned by the meet director.\n    lot: 0, // The lifter's lot number, for breaking ties in lifting order.\n    memberId: \"\", // Optional federation MemberID, for reporting in results.\n    paid: false, // Used by the meet director for tracking whether the lifter paid.\n\n    // Information added on the \"Weigh-ins\" page.\n    // But we might as well track it in this object.\n    bodyweightKg: 0.0,\n    squatRackInfo: \"\", // A freeform string for the benefit of the loaders.\n    benchRackInfo: \"\", // A freeform string for the benefit of the loaders.\n\n    // Lifting information. Weights always stored internally in kg.\n    squatKg: [0.0, 0.0, 0.0, 0.0, 0.0],\n    benchKg: [0.0, 0.0, 0.0, 0.0, 0.0],\n    deadliftKg: [0.0, 0.0, 0.0, 0.0, 0.0],\n\n    // Lifting information, success state:\n    //  -1 => No Lift.\n    //   0 => Not Yet Done.\n    //   1 => Good Lift.\n    //\n    // Note that this system has the property where corresponding (kg*status)\n    // produces the SquatXKg as expected by the main OpenPowerlifting CSV format.\n    squatStatus: [0, 0, 0, 0, 0],\n    benchStatus: [0, 0, 0, 0, 0],\n    deadliftStatus: [0, 0, 0, 0, 0]\n  };\n};\n\n// Gets the best squat, including extra attempts that don't count for the total.\nexport const getBest5SquatKg = (entry: Entry): number => {\n  let best3SquatKg = 0.0;\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    if (entry.squatStatus[i] === 1) {\n      best3SquatKg = Math.max(best3SquatKg, entry.squatKg[i]);\n    }\n  }\n  return best3SquatKg;\n};\n\n// Gets the best bench, including extra attempts that don't count for the total.\nexport const getBest5BenchKg = (entry: Entry): number => {\n  let best3BenchKg = 0.0;\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    if (entry.benchStatus[i] === 1) {\n      best3BenchKg = Math.max(best3BenchKg, entry.benchKg[i]);\n    }\n  }\n  return best3BenchKg;\n};\n\n// Gets the best deadlift, including extra attempts that don't count for the total.\nexport const getBest5DeadliftKg = (entry: Entry): number => {\n  let best3DeadliftKg = 0.0;\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    if (entry.deadliftStatus[i] === 1) {\n      best3DeadliftKg = Math.max(best3DeadliftKg, entry.deadliftKg[i]);\n    }\n  }\n  return best3DeadliftKg;\n};\n\n// The ProjectedTotal optimistically assumes that lifters will get *first* attempts\n// that have not yet been taken. It is used for calculating a total while lifters\n// are still squatting and benching.\n//\n// 2nd and 3rd attempts are treated normally, where they only count toward the\n// total if they have been successful.\nexport const getProjectedTotalKg = (entry: Entry): number => {\n  let best3Squat = 0.0;\n  if (entry.squatStatus[0] >= 0) best3Squat = Math.max(best3Squat, entry.squatKg[0]);\n  if (entry.squatStatus[1] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[1]);\n  if (entry.squatStatus[2] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[2]);\n\n  // If there was no attempted success for a single lift, return zero.\n  if (best3Squat === 0 && entry.squatStatus[0] === -1) return 0.0;\n\n  return best3Squat;\n};\n\nexport const getProjectedEventTotalKg = (entry: Entry, event: Event): number => {\n  let best3Squat = 0.0;\n  if (entry.squatStatus[0] >= 0) best3Squat = Math.max(best3Squat, entry.squatKg[0]);\n  if (entry.squatStatus[1] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[1]);\n  if (entry.squatStatus[2] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[2]);\n\n  // If there was no attempted success for a single lift, return zero.\n  if (best3Squat === 0 && entry.squatStatus[0] === -1) return 0.0;\n  return best3Squat;\n};\n\nexport const getBest3SquatKg = (entry: Entry): number => {\n  let best3Squat = 0.0;\n  if (entry.squatStatus[0] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[0]);\n  if (entry.squatStatus[1] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[1]);\n  if (entry.squatStatus[2] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[2]);\n  return best3Squat;\n};\n\nexport const getBest3BenchKg = (entry: Entry): number => {\n  let best3Bench = 0.0;\n  if (entry.benchStatus[0] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[0]);\n  if (entry.benchStatus[1] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[1]);\n  if (entry.benchStatus[2] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[2]);\n  return best3Bench;\n};\n\nexport const getBest3DeadliftKg = (entry: Entry): number => {\n  let best3Dead = 0.0;\n  if (entry.deadliftStatus[0] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[0]);\n  if (entry.deadliftStatus[1] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[1]);\n  if (entry.deadliftStatus[2] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[2]);\n  return best3Dead;\n};\n\n// The Total is the sum of best of the first 3 attempts of each lift.\nexport const getFinalTotalKg = (entry: Entry): number => {\n  const best3Squat = getBest3SquatKg(entry);\n\n  // If there was no attempted success for a single lift, return zero.\n  if (best3Squat === 0 && entry.squatStatus[0] === -1) return 0.0;\n\n  return best3Squat;\n};\n\n// Restricts the total calculation to just for the specified Event.\nexport const getFinalEventTotalKg = (entry: Entry, event: Event): number => {\n  let best3Squat = 0.0;\n  best3Squat = getBest3SquatKg(entry);\n  if (best3Squat === 0) return 0.0;\n\n  return best3Squat;\n};\n\n// Gets the Wilks score using the projected total.\nexport const getProjectedWilks = (entry: Entry): number => {\n  return wilks(entry.sex, entry.bodyweightKg, getProjectedTotalKg(entry));\n};\n\n// Gets the Wilks score using the final total.\nexport const getFinalWilks = (entry: Entry): number => {\n  return wilks(entry.sex, entry.bodyweightKg, getFinalTotalKg(entry));\n};\n\nexport const getProjectedIPFPoints = (entry: Entry, event: Event): number => {\n  const totalKg = getProjectedTotalKg(entry);\n  return ipfpoints(totalKg, entry.bodyweightKg, entry.sex, entry.equipment, event);\n};\nexport const getFinalIPFPoints = (entry: Entry, event: Event): number => {\n  const totalKg = getFinalTotalKg(entry);\n  return ipfpoints(totalKg, entry.bodyweightKg, entry.sex, entry.equipment, event);\n};\n\nexport const getProjectedBodyweightMultiple = (entry: Entry): number => {\n  const totalKg = getProjectedTotalKg(entry);\n  return bodyweight_multiple(entry.bodyweightKg, totalKg);\n};\nexport const getFinalBodyweightMultiple = (entry: Entry): number => {\n  const totalKg = getFinalTotalKg(entry);\n  return bodyweight_multiple(entry.bodyweightKg, totalKg);\n};\n\nexport const getProjectedGlossbrenner = (entry: Entry): number => {\n  const totalKg = getProjectedTotalKg(entry);\n  return glossbrenner(entry.sex, entry.bodyweightKg, totalKg);\n};\nexport const getFinalGlossbrenner = (entry: Entry): number => {\n  const totalKg = getFinalTotalKg(entry);\n  return glossbrenner(entry.sex, entry.bodyweightKg, totalKg);\n};\n\nexport const getProjectedNASAPoints = (entry: Entry): number => {\n  const totalKg = getProjectedTotalKg(entry);\n  return nasapoints(entry.bodyweightKg, totalKg);\n};\nexport const getFinalNASAPoints = (entry: Entry): number => {\n  const totalKg = getFinalTotalKg(entry);\n  return nasapoints(entry.bodyweightKg, totalKg);\n};\n\nexport const getProjectedSchwartzMalone = (entry: Entry): number => {\n  const totalKg = getProjectedTotalKg(entry);\n  return schwartzmalone(entry.sex, entry.bodyweightKg, totalKg);\n};\nexport const getFinalSchwartzMalone = (entry: Entry): number => {\n  const totalKg = getFinalTotalKg(entry);\n  return schwartzmalone(entry.sex, entry.bodyweightKg, totalKg);\n};\n\n// Filter entries to only get lifters that are lifting on a given day\nexport const getLiftersOnDay = (entries: Array<Entry>, day: number): Array<Entry> => {\n  if (!entries) {\n    return [];\n  }\n  return entries.filter(entry => {\n    return entry.day === day;\n  });\n};\n\n// Convert a lift like \"S\" to the kg array field name, like \"squatKg\".\nexport const liftToAttemptFieldName = (lift: Lift): FieldKg => {\n  switch (lift) {\n    case \"S\":\n      return \"squatKg\";\n    case \"B\":\n      return \"benchKg\";\n    case \"D\":\n      return \"deadliftKg\";\n    default:\n      (lift: empty); // eslint-disable-line\n      return \"squatKg\";\n  }\n};\n\n// Convert a lift like \"S\" to the status array field name, like \"squatStatus\".\nexport const liftToStatusFieldName = (lift: Lift): FieldStatus => {\n  switch (lift) {\n    case \"S\":\n      return \"squatStatus\";\n    case \"B\":\n      return \"benchStatus\";\n    case \"D\":\n      return \"deadliftStatus\";\n    default:\n      (lift: empty); // eslint-disable-line\n      return \"squatStatus\";\n  }\n};\n\n// Whether the Entry has taken any attempts.\nexport const entryHasLifted = (entry: Entry): boolean => {\n  if (entry.squatStatus[0] !== 0) return true;\n  if (entry.benchStatus[0] !== 0) return true;\n  if (entry.deadliftStatus[0] !== 0) return true;\n  return false;\n};\n\n// Whether any Entry has taken any attempts on the given (day, platform). O(n).\nexport const liftingPresentOnPlatform = (entries: Array<Entry>, day: number, platform: number): boolean => {\n  for (let i = 0; i < entries.length; i++) {\n    const entry = entries[i];\n    if (entry.day !== day || entry.platform !== platform) continue;\n    if (entryHasLifted(entry)) return true;\n  }\n  return false;\n};\n\n// Given an array of how many platforms are on each day and the Entries,\n// returns an array of arrays of booleans, such that array[day-1][platform-1] is\n// true iff at least one Entry corresponding to that (day, platform) has\n// taken an attempt.\nexport const getWhetherPlatformsHaveLifted = (\n  platformsOnDays: Array<number>,\n  entries: Array<Entry>\n): Array<Array<boolean>> => {\n  let ret = [];\n  for (let day = 1; day <= platformsOnDays.length; day++) {\n    const platformsOnDay = platformsOnDays[day - 1];\n    let acc = [];\n    for (let platform = 1; platform <= platformsOnDay; platform++) {\n      acc.push(liftingPresentOnPlatform(entries, day, platform));\n    }\n    ret.push(acc);\n  }\n  return ret;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { newDefaultEntry, liftToAttemptFieldName, liftToStatusFieldName } from \"../logic/entry\";\n\nimport type {\n  RegistrationAction,\n  OverwriteStoreAction,\n  EnterAttemptAction,\n  MarkLiftAction\n} from \"../types/actionTypes\";\nimport type { Entry, Lift, FieldKg } from \"../types/dataTypes\";\nimport type { RegistrationState } from \"../types/stateTypes\";\n\nconst initialState: RegistrationState = {\n  // The next unique ID to assign.\n  //\n  // This is stored in global state to handle the case of deleting registration\n  // rows during the course of lifting.\n  //\n  // A large number is used as the initial value to make it clear that this is\n  // specifically not an index into the `entries` array.\n  nextEntryId: 5000,\n\n  // Entry objects in the order they appear on the Registration page.\n  // This array owns all registration information.\n  entries: [],\n\n  // Hash from unique ID to `entries` array index.\n  //\n  // This is for the benefit of pages other than the Registration page.\n  // Because the sort order of the `entries` array can change arbitrarily,\n  // the other pages remember globally-unique identifiers for each registration,\n  // instead of a simple array index.\n  //\n  // This lookup table allows mapping those identifiers to whatever\n  // the current location of that data is in the canonical `entries` store.\n  lookup: {}\n};\n\ntype Action = RegistrationAction | EnterAttemptAction | MarkLiftAction | OverwriteStoreAction;\n\nexport default (state: RegistrationState = initialState, action: Action): RegistrationState => {\n  switch (action.type) {\n    case \"NEW_REGISTRATION\": {\n      // The object provides optional properties that can overwrite the default.\n      // Although the UI doesn't pass properties this way, debugging code does.\n      const obj = action.overwriteDefaults;\n\n      // Generate an entries array with one more item (without modifying the orginal).\n      // Object.assign() allows `obj` to overwrite defaults if present.\n      let entries: Array<Entry> = state.entries.slice();\n      let newEntry = newDefaultEntry(state.nextEntryId);\n\n      // If a previous entry exists, pre-populate some information from it.\n      if (entries.length > 0) {\n        const previousEntry = entries[entries.length - 1];\n        newEntry.day = previousEntry.day;\n        newEntry.platform = previousEntry.platform;\n        newEntry.flight = previousEntry.flight;\n      }\n\n      // Overwrite any newEntry properties with those given in obj.\n      entries.push(Object.assign(newEntry, obj));\n\n      // Since a new entry was added, generate a new 'lookup' object,\n      // mapping from the globally-unique EntryId to the array index.\n      let lookup = Object.assign({}, state.lookup);\n      lookup[state.nextEntryId] = entries.length - 1;\n\n      return {\n        ...state,\n        nextEntryId: state.nextEntryId + 1,\n        entries: entries,\n        lookup: lookup\n      };\n    }\n\n    case \"DELETE_REGISTRATION\": {\n      const entryId = action.entryId;\n\n      // Generate an entries array without the given item.\n      let entries: Array<Entry> = state.entries.filter((item, index) => item.id !== entryId);\n\n      // Since the entry was deleted from anywhere in the array,\n      // construct a new lookup table from scratch.\n      let lookup = {};\n      for (let i = 0; i < entries.length; i++) {\n        let entry = entries[i];\n        lookup[entry.id] = i;\n      }\n\n      return {\n        ...state,\n        entries: entries,\n        lookup: lookup\n      };\n    }\n\n    case \"UPDATE_REGISTRATION\": {\n      const entryId = action.entryId;\n      const changes = action.changes;\n\n      // Clone the entries array, since one entry will reference a new object.\n      let entries: Array<Entry> = state.entries.slice();\n\n      // Make a new object with just the changes overwritten,\n      // and reference that object from the new array.\n      const index = entries.findIndex(obj => obj.id === entryId);\n      let newEntry = Object.assign({}, entries[index]);\n      entries[index] = Object.assign(newEntry, changes);\n\n      return {\n        ...state,\n        entries: entries\n      };\n    }\n\n    case \"ENTER_ATTEMPT\": {\n      // Action parameters, with expected types.\n      const entryId = Number(action.entryId);\n      const lift: Lift = action.lift;\n      const attemptOneIndexed = Number(action.attemptOneIndexed);\n      const weightKg = Number(action.weightKg);\n\n      const field: FieldKg = liftToAttemptFieldName(lift);\n\n      // Clone the entries array, since one slot will reference a new object.\n      let newEntries: Array<Entry> = state.entries.slice();\n      const index = newEntries.findIndex(obj => obj.id === entryId);\n      const oldEntry = newEntries[index];\n\n      // Make a copy of the attempts array containing the new attempt.\n      let newarray = oldEntry[field].slice();\n      newarray[attemptOneIndexed - 1] = weightKg;\n\n      // Put that new attempts array into an object so we can use Object.assign().\n      let newfields = {};\n      newfields[field] = newarray;\n\n      // Make a new entry from the old entry, with the attempts field overwritten.\n      newEntries[index] = Object.assign(oldEntry, newfields);\n\n      return {\n        ...state,\n        entries: newEntries\n      };\n    }\n\n    case \"MARK_LIFT\": {\n      const entryId = Number(action.entryId);\n      const lift: Lift = action.lift;\n      const attemptOneIndexed = Number(action.attemptOneIndexed);\n      const success = Boolean(action.success);\n\n      // Map true to '1' and false to '-1'.\n      const status = success === true ? 1 : -1;\n\n      const fieldStatus = liftToStatusFieldName(lift);\n\n      // Clone the entries array, since one slot will reference a new object.\n      let newEntries: Array<Entry> = state.entries.slice();\n      const index = newEntries.findIndex(obj => obj.id === entryId);\n      const oldEntry = newEntries[index];\n\n      // Make a copy of the status array containing the new status.\n      let newarray = oldEntry[fieldStatus].slice();\n      newarray[attemptOneIndexed - 1] = status;\n\n      // Put that new array into an object so we can use Object.assign().\n      let newfields = {};\n      newfields[fieldStatus] = newarray;\n\n      // Make a new entry from the old entry, with the status field overwritten.\n      let newEntry = Object.assign({}, oldEntry);\n      newEntries[index] = Object.assign(newEntry, newfields);\n\n      return {\n        ...state,\n        entries: newEntries\n      };\n    }\n\n    // Caused by clicking a \"Merge\" button on the Results page.\n    case \"MERGE_PLATFORM\": {\n      const day: number = action.day;\n      const platform: number = action.platform;\n      const platformEntries: Array<Entry> = action.platformEntries;\n\n      // Filter out state entries assigned to the merged (day, platform).\n      let newEntries = state.entries.filter(e => {\n        return !(e.day === day && e.platform === platform);\n      });\n\n      // Get the nextEntryId: the merged entries will be reassigned IDs.\n      let nextEntryId: number = state.nextEntryId;\n\n      // For each incoming Entry, copy the object, assign a new ID,\n      // and place it in the newEntries array.\n      for (let i = 0; i < platformEntries.length; i++) {\n        let entry: Entry = Object.assign({}, platformEntries[i]);\n        entry.id = nextEntryId++;\n        newEntries.push(entry);\n      }\n\n      // Generate an entirely new lookup table.\n      let lookup = {};\n      for (let i = 0; i < newEntries.length; i++) {\n        lookup[newEntries[i].id] = i;\n      }\n\n      // Return a new object with the new components replaced.\n      return {\n        ...state,\n        nextEntryId: nextEntryId,\n        entries: newEntries,\n        lookup: lookup\n      };\n    }\n\n    case \"OVERWRITE_STORE\": {\n      // Copy all the state objects into an empty object.\n      const obj = Object.assign({}, state);\n\n      // Copy in the action's objects, overwriting the state's objects.\n      return Object.assign(obj, action.store.registration);\n    }\n\n    default:\n      (action.type: empty); // eslint-disable-line\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Lifting state only tracks manual overrides.\n//\n// Outside of overrides, the state of the meet is fully-calculated by the LiftingView.\n//\n// For safety, correctness, and ease of understanding, the state of the meet is\n// intentionally *not* stored in the global state. It is continuously recalculated.\n//\n// Please do not attempt to store meet state in the Redux store!\n\nimport type {\n  MarkLiftAction,\n  SetLiftingGroupAction,\n  OverrideAttemptAction,\n  OverrideEntryIdAction,\n  OverwriteStoreAction\n} from \"../types/actionTypes\";\nimport type { LiftingState } from \"../types/stateTypes\";\n\nconst initialState: LiftingState = {\n  // Specifies the initial settings for the control widgets on the lifting page.\n  // The intention is that the score table sets these manually.\n  day: 1,\n  platform: 1,\n  flight: \"A\",\n  lift: \"S\",\n\n  // These properties are normally calculated, but exist here as a mechanism\n  // for a one-shot override of the normal logic. After being handled,\n  // they are unset.\n  overrideAttempt: null, // Allows selecting an attempt, even if it's completed.\n  overrideEntryId: null // Allows selecting a lifter, even if they've already gone.\n};\n\ntype Action =\n  | MarkLiftAction\n  | SetLiftingGroupAction\n  | OverrideAttemptAction\n  | OverrideEntryIdAction\n  | OverwriteStoreAction;\n\nexport default (state: LiftingState = initialState, action: Action): LiftingState => {\n  switch (action.type) {\n    case \"MARK_LIFT\": {\n      // Unset any overrides, returning to normal lifting flow.\n      return { ...state, overrideAttempt: null, overrideEntryId: null };\n    }\n\n    case \"SET_LIFTING_GROUP\":\n      return {\n        day: action.day,\n        platform: action.platform,\n        flight: action.flight,\n        lift: action.lift,\n\n        // If the group changes, unset any overrides.\n        overrideAttempt: null,\n        overrideEntryId: null\n      };\n\n    case \"OVERRIDE_ATTEMPT\":\n      return { ...state, overrideAttempt: action.attempt };\n\n    case \"OVERRIDE_ENTRY_ID\":\n      return { ...state, overrideEntryId: action.entryId };\n\n    case \"OVERWRITE_STORE\":\n      return action.store.lifting;\n\n    default:\n      (action.type: empty); // eslint-disable-line\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { combineReducers } from \"redux\";\n\nimport versionsReducer from \"./versionsReducer\";\nimport languageReducer from \"./languageReducer\";\nimport meetReducer from \"./meetReducer\";\nimport registrationReducer from \"./registrationReducer\";\nimport liftingReducer from \"./liftingReducer\";\n\n// Using combineReducers() guarantees that each part of the state object\n// fully bears the responsibility of managing itself by only sending a\n// subset of the state to the reducer.\n//\n// For example, the meetReducer() receives a new 'state' object\n// equal to 'state.meet' from the root. Because there is no way to access\n// the root state object from a child state object, the meetReducer() is\n// fully-encapsulated, allowing for sane reasoning about effects on global state.\nexport default combineReducers({\n  versions: versionsReducer,\n  language: languageReducer,\n  meet: meetReducer,\n  registration: registrationReducer,\n  lifting: liftingReducer\n});\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type { ChangeLanguageAction, OverwriteStoreAction } from \"../types/actionTypes\";\nimport type { LanguageState } from \"../types/stateTypes\";\n\ntype Action = ChangeLanguageAction | OverwriteStoreAction;\n\nexport default (state: LanguageState = \"en\", action: Action): LanguageState => {\n  switch (action.type) {\n    case \"CHANGE_LANGUAGE\":\n      return action.language;\n\n    case \"OVERWRITE_STORE\":\n      return action.store.language;\n\n    default:\n      (action.type: empty); // eslint-disable-line\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nimport type { GlobalState } from \"./types/stateTypes\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default function configureStore(initialState: GlobalState = {}) {\n  let store: GlobalState = createStore(persistedReducer, applyMiddleware(thunk));\n  let persistor = persistStore(store);\n  return { store, persistor };\n}\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport es from \"./es.json\";\nimport eo from \"./eo.json\";\n\nexport default { es, eo };\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IntlProvider } from \"react-intl\";\nimport translations from \"../../translations/locales\";\n\nimport type { GlobalState, LanguageState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  language: LanguageState;\n}\n\n// TODO: Can get rid of this if we can get Flow typedefs for React.Component.\ninterface ImplicitProps {\n  children: Array<Object>;\n}\n\ntype Props = StateProps & ImplicitProps;\n\nclass OpenLifterIntlProvider extends React.Component<Props> {\n  render() {\n    const language = this.props.language;\n\n    // Load our translations from the json files\n    const messages = translations[language];\n\n    return (\n      // This is going to wrap any children passed to this component with an IntlProvider\n      // This will put translations of all of our child components in our app\n      <IntlProvider locale={language} key={language} messages={messages}>\n        {this.props.children}\n      </IntlProvider>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  language: state.language\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(OpenLifterIntlProvider);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The confirmation modal that will popup when the user goes to click New Meet on the home page\n// TODO: The Continue button should actually wipe out the current meet information\n\nimport React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nclass NewMeetModal extends React.Component {\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.close}>\n        <Modal.Header closeButton>\n          <Modal.Title>Are you sure?</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>Are you sure you want to create a New Meet? This will delete any existing progress!</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <LinkContainer to=\"/meet-setup\">\n            <Button bsStyle=\"primary\">Continue</Button>\n          </LinkContainer>\n          <Button onClick={this.props.close}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nNewMeetModal.defaultProps = {\n  show: false\n};\n\nNewMeetModal.propTypes = {\n  show: PropTypes.bool,\n  close: PropTypes.func.isRequired\n};\n\nexport default NewMeetModal;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport saveAs from \"file-saver\";\n\n// import LanguageSelector from \"../components/translations/LanguageSelector\";\nimport { overwriteStore } from \"../actions/globalActions\";\n\nimport NewMeetModal from \"../components/home/NewMeetModal\";\n\nimport { releaseVersion, releaseDate } from \"../versions\";\n\nimport type { GlobalState } from \"../types/stateTypes\";\n\n// Temporary CSS, just for prototyping.\nconst centerConsole = { maxWidth: 700, margin: \"0 auto 10px\" };\nconst buttonConsole = { maxWidth: 400, margin: \"20px auto 0 auto\" };\n\ninterface StateProps {\n  redux: GlobalState;\n}\n\ninterface DispatchProps {\n  overwriteStore: (store: GlobalState) => void;\n}\n\ninterface InternalState {\n  showNewMeetModal: boolean;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass HomeContainer extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n    this.handleLoadClick = this.handleLoadClick.bind(this);\n    this.handleNewClick = this.handleNewClick.bind(this);\n    this.closeConfirmModal = this.closeConfirmModal.bind(this);\n    this.handleLoadFileInput = this.handleLoadFileInput.bind(this);\n    this.handleSaveClick = this.handleSaveClick.bind(this);\n    this.renderContinueButton = this.renderContinueButton.bind(this);\n\n    this.state = { showNewMeetModal: false };\n  }\n\n  // The file input is hidden, and we want to use a button to activate it.\n  // This event handler is just a proxy to call the *real* event handler.\n  handleLoadClick = () => {\n    const loadhelper = document.getElementById(\"loadhelper\");\n    if (loadhelper !== null) {\n      loadhelper.click();\n    }\n  };\n\n  // When we click the new meet button\n  // Open the popover modal to confirm the user is willing to delete any current progress\n  handleNewClick = () => {\n    this.setState({ showNewMeetModal: true });\n  };\n\n  // Close the new meet confirmation modal\n  closeConfirmModal = () => {\n    this.setState({ showNewMeetModal: false });\n  };\n\n  // Called when a file is selected.\n  handleLoadFileInput = () => {\n    // Load the element and make sure it's an HTMLInputElement.\n    const loadHelper = document.getElementById(\"loadhelper\");\n    if (loadHelper === null || !(loadHelper instanceof HTMLInputElement)) {\n      return;\n    }\n\n    const selectedFile = loadHelper.files[0];\n    let rememberThis = this;\n\n    let reader = new FileReader();\n    reader.onload = function(event) {\n      let errored = false;\n      try {\n        let obj = JSON.parse(event.target.result);\n\n        // Basic error checking, make sure it's the right format.\n        if (\n          obj.language === undefined ||\n          obj.meet === undefined ||\n          obj.registration === undefined ||\n          obj.lifting === undefined\n        ) {\n          errored = true;\n        } else {\n          rememberThis.props.overwriteStore(obj);\n        }\n      } catch (err) {\n        errored = true;\n      }\n\n      if (errored) {\n        // TODO: Be a little more helpful.\n        window.alert(\"That didn't look like an OpenLifter file!\");\n      }\n    };\n    reader.readAsText(selectedFile);\n  };\n\n  handleSaveClick = () => {\n    // TODO: Share this logic with ResultsView.\n    let meetname = this.props.redux.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n\n    const state = JSON.stringify(this.props.redux);\n    const blob = new Blob([state], { type: \"application/json;charset=utf-8\" });\n    saveAs(blob, meetname + \".openlifter\");\n  };\n\n  renderContinueButton = () => {\n    let meetname = this.props.redux.meet.name;\n    if (meetname === \"\") {\n      // Unnamed or unstarted meet, so don't render a continue button\n      return;\n    }\n    return (\n      <div style={{ marginBottom: \"2rem\" }}>\n        <h3>In Progress: {meetname}</h3>\n        <LinkContainer to=\"/meet-setup\">\n          <Button bsStyle=\"success\" bsSize=\"large\" block>\n            Continue Current Meet\n          </Button>\n        </LinkContainer>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"container\" style={centerConsole}>\n        <NewMeetModal show={this.state.showNewMeetModal} close={this.closeConfirmModal} />\n\n        <div className=\"row\">\n          <div className=\"col-md-12\" style={{textAlign: \"center\"}}>\n            <img alt=\"OpenLifter\" src=\"/nightmare-muscle/openlifter.svg\" style={{height: \"80px\"}} />\n            <img alt=\"NightmareMuscle\" src=\"/nightmare-muscle/nightmare-muscle.webp\" style={{height: \"200px\"}} />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <div style={buttonConsole}>\n              {this.renderContinueButton()}\n              <Button bsStyle=\"primary\" bsSize=\"large\" block onClick={this.handleNewClick}>\n                New Meet\n              </Button>\n              <Button bsStyle=\"warning\" bsSize=\"large\" block onClick={this.handleLoadClick}>\n                Load from File\n              </Button>\n              <Button bsStyle=\"success\" bsSize=\"large\" block onClick={this.handleSaveClick}>\n                Save to File\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-12\" style={{ textAlign: \"center\", marginTop: \"2em\" }}>\n            <h3>\n              Version {releaseVersion}, {releaseDate}.\n            </h3>\n          </div>\n        </div>\n\n        <input\n          id=\"loadhelper\"\n          type=\"file\"\n          accept=\".openlifter\"\n          style={{ display: \"none\" }}\n          onChange={this.handleLoadFileInput}\n        />\n      </div>\n    );\n  }\n}\n\n// Because we want to save the state, separate it out specifically\n// into a \"redux\" prop. Otherwise it gets contaminated by other props.\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  redux: {\n    ...state\n  }\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    overwriteStore: store => dispatch(overwriteStore(store))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HomeContainer);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type { OverwriteStoreAction } from \"../types/actionTypes\";\nimport type { GlobalState } from \"../types/stateTypes\";\n\n// Overwrites the entire Redux store, handled separately by each reducer.\n// This is used to implement \"Load from File\" functionality.\nexport const overwriteStore = (store: GlobalState): OverwriteStoreAction => {\n  return {\n    type: \"OVERWRITE_STORE\",\n    store: store\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type {\n  SetMeetNameAction,\n  SetFormulaAction,\n  SetFederationAction,\n  SetDivisionsAction,\n  SetMeetDateAction,\n  SetLengthDaysAction,\n  SetPlatformsOnDaysAction,\n  SetInKgAction,\n  SetWeightClassesAction,\n  SetBarAndCollarsWeightKgAction,\n  SetPlatePairCountAction,\n  UpdateMeetAction\n} from \"../types/actionTypes\";\nimport type { Formula, Sex } from \"../types/dataTypes\";\nimport type { MeetState } from \"../types/stateTypes\";\n\nexport const setMeetName = (name: string): SetMeetNameAction => {\n  return {\n    type: \"SET_MEET_NAME\",\n    name\n  };\n};\n\nexport const setFormula = (formula: Formula): SetFormulaAction => {\n  return {\n    type: \"SET_FORMULA\",\n    formula\n  };\n};\n\nexport const setFederation = (federation: string): SetFederationAction => {\n  return {\n    type: \"SET_FEDERATION\",\n    federation\n  };\n};\n\nexport const setDivisions = (divisions: Array<string>): SetDivisionsAction => {\n  return {\n    type: \"SET_DIVISIONS\",\n    divisions\n  };\n};\n\nexport const setMeetDate = (date: string): SetMeetDateAction => {\n  return {\n    type: \"SET_MEET_DATE\",\n    date\n  };\n};\n\nexport const setLengthDays = (length: number): SetLengthDaysAction => {\n  return {\n    type: \"SET_LENGTH_DAYS\",\n    length\n  };\n};\n\nexport const setPlatformsOnDays = (day: number, count: number): SetPlatformsOnDaysAction => {\n  return {\n    type: \"SET_PLATFORM_COUNT\",\n    day: day,\n    count: count\n  };\n};\n\nexport const setInKg = (inKg: boolean): SetInKgAction => {\n  return {\n    type: \"SET_IN_KG\",\n    inKg\n  };\n};\n\nexport const setWeightClasses = (sex: Sex, classesKg: Array<number>): SetWeightClassesAction => {\n  return {\n    type: \"SET_WEIGHTCLASSES\",\n    sex: sex,\n    classesKg: classesKg\n  };\n};\n\nexport const setBarAndCollarsWeightKg = (weightKg: number): SetBarAndCollarsWeightKgAction => {\n  return {\n    type: \"SET_BAR_AND_COLLARS_WEIGHT_KG\",\n    weightKg: weightKg\n  };\n};\n\nexport const setPlatePairCount = (weightKg: number, pairCount: number): SetPlatePairCountAction => {\n  return {\n    type: \"SET_PLATE_PAIR_COUNT\",\n    weightKg,\n    pairCount\n  };\n};\n\nexport const updateMeet = (obj: $Shape<MeetState>): UpdateMeetAction => {\n  return {\n    type: \"UPDATE_MEET\",\n    changes: obj\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the MeetName text input box with validation.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { ControlLabel, FormControl, FormGroup } from \"react-bootstrap\";\n\nimport { setMeetName } from \"../../actions/meetSetupActions\";\n\nclass MeetName extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    this.state = {\n      value: this.props.name\n    };\n  }\n\n  getValidationState() {\n    const { value } = this.state;\n    if (!value) return \"warning\";\n    if (value.includes('\"')) return \"error\";\n    return \"success\";\n  }\n\n  handleChange(event) {\n    const value = event.target.value;\n    this.setState({ value: value });\n  }\n\n  // When the control loses focus, possibly update the Redux store.\n  handleBlur(event) {\n    if (this.getValidationState() !== \"success\") {\n      return;\n    }\n    this.props.setMeetName(event.target.value);\n  }\n\n  render() {\n    return (\n      <FormGroup validationState={this.getValidationState()}>\n        <ControlLabel>Meet Name</ControlLabel>\n        <FormControl\n          type=\"text\"\n          placeholder=\"Meet Name\"\n          value={this.state.value}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  name: state.meet.name\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setMeetName: name => dispatch(setMeetName(name))\n  };\n};\n\nMeetName.propTypes = {\n  name: PropTypes.string.isRequired,\n  setMeetName: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetName);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the MeetDate date picker.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport DatePicker from \"react-datepicker\";\n\nimport { ControlLabel, FormGroup } from \"react-bootstrap\";\n\nimport { setMeetDate } from \"../../actions/meetSetupActions\";\nimport { iso8601ToLocalDate, localDateToIso8601 } from \"../../logic/date\";\n\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  date: string;\n}\n\ninterface DispatchProps {\n  setMeetDate: (date: Date) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass MeetDate extends React.Component<Props> {\n  render() {\n    // The DatePicker manipulates a Date object in local time.\n    const initialDate: Date = iso8601ToLocalDate(this.props.date);\n\n    return (\n      <FormGroup>\n        <ControlLabel>Start Date</ControlLabel>\n        <div>\n          <DatePicker dateFormat=\"yyyy-MM-dd\" selected={initialDate} onChange={this.props.setMeetDate} />\n        </div>\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  date: state.meet.date\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    setMeetDate: date => {\n      dispatch(setMeetDate(localDateToIso8601(date)));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetDate);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { ControlLabel, FormGroup, FormControl } from \"react-bootstrap\";\n\nimport { setLengthDays } from \"../../actions/meetSetupActions\";\n\nclass MeetLength extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getValidationState = this.getValidationState.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: this.props.lengthDays\n    };\n  }\n\n  getValidationState() {\n    const { value } = this.state;\n    const asNumber = Number(value);\n\n    if (isNaN(asNumber) || asNumber <= 0 || asNumber > 14) {\n      return \"error\";\n    }\n    return \"success\";\n  }\n\n  handleChange(event) {\n    const value = event.target.value;\n\n    this.setState({ value: value }, () => {\n      // As callback, save successful value into Redux store.\n      if (this.getValidationState() !== \"error\") {\n        this.props.setLengthDays(value);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <FormGroup validationState={this.getValidationState()}>\n        <ControlLabel>Days of Lifting</ControlLabel>\n        <FormControl\n          type=\"text\"\n          pattern=\"[0-9]+\"\n          min=\"0\"\n          step=\"1\"\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  lengthDays: state.meet.lengthDays\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setLengthDays: days => dispatch(setLengthDays(days))\n  };\n};\n\nMeetLength.propTypes = {\n  lengthDays: PropTypes.number.isRequired,\n  setLengthDays: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetLength);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the Meet Location.\n// Country, State/Province, City/Town\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { ControlLabel, FormControl, FormGroup } from \"react-bootstrap\";\n\nimport { updateMeet } from \"../../actions/meetSetupActions\";\n\nimport type { GlobalState, MeetState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  country: string;\n  state: string;\n  city: string;\n}\n\ninterface DispatchProps {\n  updateMeet: (changes: $Shape<MeetState>) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\ninterface InternalState {\n  country: string;\n  state: string;\n  city: string;\n}\n\nclass MeetLocation extends React.Component<Props, InternalState> {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    this.state = {\n      country: this.props.country,\n      state: this.props.state,\n      city: this.props.city\n    };\n  }\n\n  getValidationState = (value: string): string | null => {\n    if (!value) return \"warning\";\n    if (value.includes('\"')) return \"error\";\n    return \"success\";\n  };\n\n  handleChange = (key, event) => {\n    const value = event.target.value;\n    let obj = {};\n    obj[key] = value;\n    this.setState(obj);\n  };\n\n  // When the control loses focus, possibly update the Redux store.\n  handleBlur = (key, event) => {\n    if (this.getValidationState(event.target.value) !== \"success\") {\n      return;\n    }\n\n    switch (key) {\n      case \"country\":\n        this.props.updateMeet({ country: event.target.value });\n        break;\n      case \"state\":\n        this.props.updateMeet({ state: event.target.value });\n        break;\n      case \"city\":\n        this.props.updateMeet({ city: event.target.value });\n        break;\n      default:\n        return;\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <FormGroup validationState={this.getValidationState(this.state.country)}>\n          <ControlLabel>Country</ControlLabel>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Country\"\n            value={this.state.country}\n            onChange={event => this.handleChange(\"country\", event)}\n            onBlur={event => this.handleBlur(\"country\", event)}\n          />\n        </FormGroup>\n        <FormGroup validationState={this.getValidationState(this.state.state)}>\n          <ControlLabel>State/Province</ControlLabel>\n          <FormControl\n            type=\"text\"\n            placeholder=\"State/Province\"\n            value={this.state.state}\n            onChange={event => this.handleChange(\"state\", event)}\n            onBlur={event => this.handleBlur(\"state\", event)}\n          />\n        </FormGroup>\n        <FormGroup validationState={this.getValidationState(this.state.city)}>\n          <ControlLabel>City/Town</ControlLabel>\n          <FormControl\n            type=\"text\"\n            placeholder=\"City/Town\"\n            value={this.state.city}\n            onChange={event => this.handleChange(\"city\", event)}\n            onBlur={event => this.handleBlur(\"city\", event)}\n          />\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  country: state.meet.country,\n  state: state.meet.state,\n  city: state.meet.city\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    updateMeet: changes => dispatch(updateMeet(changes))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetLocation);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { ControlLabel, FormGroup, FormControl } from \"react-bootstrap\";\n\nimport { setPlatformsOnDays } from \"../../actions/meetSetupActions\";\n\nclass PlatformCount extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getValidationState = this.getValidationState.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: this.props.platformsOnDays[this.props.day - 1]\n    };\n  }\n\n  getValidationState() {\n    const { value } = this.state;\n    const asNumber = Number(value);\n\n    if (isNaN(asNumber) || asNumber <= 0 || asNumber > 20) {\n      return \"error\";\n    }\n    return \"success\";\n  }\n\n  handleChange(event) {\n    const value = event.target.value;\n    this.setState({ value: value }, () => {\n      if (this.getValidationState() === \"success\") {\n        this.props.setPlatformsOnDays(this.props.day, value);\n      }\n    });\n  }\n\n  render() {\n    const { day } = this.props;\n    const label = \"Platforms on Day \" + day;\n\n    return (\n      <FormGroup validationState={this.getValidationState()}>\n        <ControlLabel>{label}</ControlLabel>\n        <FormControl type=\"number\" value={this.state.value} onChange={this.handleChange} />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  platformsOnDays: state.meet.platformsOnDays\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setPlatformsOnDays: (day, count) => dispatch(setPlatformsOnDays(day, count))\n  };\n};\n\nPlatformCount.propTypes = {\n  platformsOnDays: PropTypes.array.isRequired,\n  setPlatformsOnDays: PropTypes.func.isRequired,\n  day: PropTypes.number.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PlatformCount);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport PlatformCount from \"./PlatformCount\";\n\nclass PlatformCounts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.createPlatformInputs = this.createPlatformInputs.bind(this);\n  }\n\n  createPlatformInputs() {\n    let inputs = [];\n    const lengthDays = this.props.lengthDays;\n    for (let i = 1; i <= lengthDays; i++) {\n      inputs.push(<PlatformCount key={i} day={i} />);\n    }\n    return inputs;\n  }\n  render() {\n    return <div>{this.createPlatformInputs()}</div>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  lengthDays: state.meet.lengthDays\n});\n\nPlatformCounts.propTypes = {\n  lengthDays: PropTypes.number.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(PlatformCounts);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { ControlLabel, FormGroup } from \"react-bootstrap\";\nimport Select from \"react-select\";\n\nimport { setFormula } from \"../../actions/meetSetupActions\";\n\nconst options = [\n  { value: \"Bodyweight Multiple\", label: \"Bodyweight Multiple\" },\n  { value: \"Glossbrenner\", label: \"Glossbrenner\" },\n  { value: \"IPF Points\", label: \"IPF Points\" },\n  { value: \"NASA Points\", label: \"NASA Points\" },\n  { value: \"Schwartz/Malone\", label: \"Schwartz/Malone\" },\n  { value: \"Wilks\", label: \"Wilks\" }\n];\n\nclass FormulaSelect extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    // The \"value\" property expects an object instead of a string.\n    this.valueObject = options.find(option => {\n      return option.value === this.props.formula;\n    });\n  }\n\n  render() {\n    return (\n      <FormGroup validationState=\"success\">\n        <ControlLabel>Best Lifter Formula</ControlLabel>\n        <Select defaultValue={this.valueObject} onChange={this.props.setFormula} options={options} />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  formula: state.meet.formula\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setFormula: item => dispatch(setFormula(item.value))\n  };\n};\n\nFormulaSelect.propTypes = {\n  formula: PropTypes.string.isRequired,\n  setFormula: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FormulaSelect);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The Federation selector is pre-populated with a list of known federations\n// for which some degree of auto-configuration of divisions and weightclasses exists.\n//\n// It also supports custom entry of any federation, outside of the list provided,\n// although in that case the divisions and weightclasses can't be auto-populated.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { ControlLabel, FormGroup } from \"react-bootstrap\";\nimport Creatable from \"react-select/lib/Creatable\";\n\nimport { setFederation } from \"../../actions/meetSetupActions\";\n\nconst defaultOptions = [{ value: \"WRPF\", label: \"WRPF\" }];\n\nclass FederationSelect extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    // The \"value\" property expects an object instead of a string.\n    this.valueObject = defaultOptions.find(option => {\n      return option.value === this.props.federation;\n    });\n\n    // If the user created a new federation, it won't be present\n    // in the defaultOptions. To display it, expand the options with the prop.\n    if (!this.valueObject && this.props.federation) {\n      this.options = defaultOptions.concat({\n        value: this.props.federation,\n        label: this.props.federation\n      });\n      this.valueObject = this.options[this.options.length - 1];\n    } else {\n      this.options = defaultOptions;\n    }\n  }\n\n  render() {\n    return (\n      <FormGroup>\n        <ControlLabel>Federation</ControlLabel>\n        <Creatable\n          defaultValue={this.valueObject}\n          onChange={this.props.setFederation}\n          options={this.options}\n          placeholder=\"Type or select...\"\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  federation: state.meet.federation\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setFederation: item => dispatch(setFederation(item.value))\n  };\n};\n\nFederationSelect.propTypes = {\n  federation: PropTypes.string.isRequired,\n  setFederation: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FederationSelect);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { ControlLabel, FormGroup } from \"react-bootstrap\";\nimport CreatableSelect from \"react-select/lib/Creatable\";\n\nimport { setDivisions } from \"../../actions/meetSetupActions\";\n\nconst components = {\n  DropdownIndicator: null\n};\n\nconst createOption = label => ({\n  label,\n  value: label\n});\n\nclass DivisionSelect extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    let objarray = [];\n    for (let i = 0; i < props.divisions.length; i++) {\n      const division = props.divisions[i];\n      objarray.push({ value: division, label: division });\n    }\n\n    this.state = {\n      inputValue: \"\",\n      value: objarray\n    };\n\n    this.maybeUpdateRedux = this.maybeUpdateRedux.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  // Updates the Redux store if a division was added or removed.\n  // Since updates are synchronous, we can simply check length.\n  maybeUpdateRedux(objarray) {\n    // objarray is a list of {value: \"foo\", label: \"foo\"} objects.\n    if (objarray.length === this.props.divisions.length) {\n      return;\n    }\n\n    // The divisions changed: save to Redux.\n    let divisions = [];\n    for (let i = 0; i < objarray.length; i++) {\n      divisions.push(objarray[i].label);\n    }\n    this.props.setDivisions(divisions);\n  }\n\n  // Handles the case of deleting an existing division.\n  handleChange(value, actionMeta) {\n    this.setState({ value });\n    this.maybeUpdateRedux(value);\n  }\n\n  // Reflects the current typing status in the state.\n  handleInputChange(inputValue) {\n    this.setState({ inputValue });\n  }\n\n  // Handles the case of creating a new division.\n  handleKeyDown(event) {\n    const { inputValue, value } = this.state;\n    if (!inputValue) return;\n    if (event.key === \"Enter\" || event.key === \"Tab\") {\n      // Disallow creating redundant divisions.\n      for (let i = 0; i < value.length; i++) {\n        if (value[i].label === inputValue) {\n          // Silently drop the redundant division.\n          this.setState({ inputValue: \"\" });\n          event.preventDefault();\n          return;\n        }\n      }\n\n      const newValue = [...value, createOption(inputValue)];\n      this.setState({\n        inputValue: \"\",\n        value: newValue\n      });\n      this.maybeUpdateRedux(newValue);\n      event.preventDefault();\n    }\n  }\n\n  render() {\n    const { inputValue, value } = this.state;\n    return (\n      <FormGroup>\n        <ControlLabel>Divisions (prefer short codes!)</ControlLabel>\n        <CreatableSelect\n          components={components}\n          inputValue={inputValue}\n          isMulti\n          menuIsOpen={false}\n          onChange={this.handleChange}\n          onInputChange={this.handleInputChange}\n          onKeyDown={this.handleKeyDown}\n          placeholder=\"Type a division and press Enter...\"\n          value={value}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  divisions: state.meet.divisions\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDivisions: divisions => dispatch(setDivisions(divisions))\n  };\n};\n\nDivisionSelect.propTypes = {\n  divisions: PropTypes.array.isRequired,\n  setDivisions: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DivisionSelect);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { ControlLabel, FormGroup } from \"react-bootstrap\";\nimport CreatableSelect from \"react-select/lib/Creatable\";\n\nimport { setWeightClasses } from \"../../actions/meetSetupActions\";\n\nimport type { Sex } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\nconst components = {\n  DropdownIndicator: null\n};\n\ntype OptionType = {\n  label: string,\n  value: string\n};\n\nconst createOption = (label: string): OptionType => ({\n  label,\n  value: label\n});\n\ninterface OwnProps {\n  label: string;\n  sex: Sex;\n}\n\ninterface StateProps {\n  classes: Array<number>;\n}\n\ninterface DispatchProps {\n  setWeightClasses: (sex: Sex, classesKg: Array<number>) => any;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface InternalState {\n  inputValue: string;\n  value: Array<OptionType>;\n}\n\nclass WeightClassesSelect extends React.Component<Props, InternalState> {\n  constructor(props, context) {\n    super(props, context);\n\n    let objarray: Array<OptionType> = [];\n    for (let i = 0; i < props.classes.length; i++) {\n      const c = String(props.classes[i]);\n      objarray.push({ value: c, label: c });\n    }\n\n    this.state = {\n      inputValue: \"\",\n      value: objarray\n    };\n\n    this.maybeUpdateRedux = this.maybeUpdateRedux.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  // Updates the Redux store if a weightclass was added or removed.\n  // Since updates are synchronous, we can simply check length.\n  maybeUpdateRedux = (objarray: Array<OptionType>): void => {\n    if (objarray.length === this.props.classes.length) {\n      return;\n    }\n\n    // The classes changed: save to Redux.\n    let classes = [];\n    for (let i = 0; i < objarray.length; i++) {\n      classes.push(Number(objarray[i].label));\n    }\n    this.props.setWeightClasses(this.props.sex, classes);\n  };\n\n  // Handles the case of deleting an existing weightclass.\n  handleChange = (value: Array<OptionType>, actionMeta): void => {\n    this.setState({ value });\n    this.maybeUpdateRedux(value);\n  };\n\n  // Reflects the current typing status in the state.\n  handleInputChange = (inputValue: string): void => {\n    this.setState({ inputValue });\n  };\n\n  // Handles the case of creating a new weightclass.\n  handleKeyDown = event => {\n    const { inputValue, value } = this.state;\n    if (!inputValue) return;\n    if (event.key === \"Enter\" || event.key === \"Tab\") {\n      // Disallow creating redundant classes.\n      for (let i = 0; i < value.length; i++) {\n        if (value[i].label === inputValue) {\n          // Silently drop the redundant weightclass.\n          this.setState({ inputValue: \"\" });\n          event.preventDefault();\n          return;\n        }\n      }\n\n      // Disallow creating non-numeric inputs.\n      if (isNaN(Number(inputValue))) {\n        this.setState({ inputValue: \"\" });\n        event.preventDefault();\n        return;\n      }\n\n      // Sort the new value into the array.\n      let newValue = [...value, createOption(inputValue)];\n      newValue = newValue.sort((a, b) => Number(a.value) - Number(b.value));\n\n      this.setState({\n        inputValue: \"\",\n        value: newValue\n      });\n      this.maybeUpdateRedux(newValue);\n      event.preventDefault();\n    }\n  };\n\n  render() {\n    const { inputValue, value } = this.state;\n    return (\n      <FormGroup>\n        <ControlLabel>{this.props.label}</ControlLabel>\n        <CreatableSelect\n          components={components}\n          inputValue={inputValue}\n          isMulti\n          menuIsOpen={false}\n          onChange={this.handleChange}\n          onInputChange={this.handleInputChange}\n          onKeyDown={this.handleKeyDown}\n          placeholder=\"Type a weight class and press Enter...\"\n          value={value}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst selectClassesBySex = (sex: Sex, state: GlobalState): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return state.meet.weightClassesKgMen;\n    case \"F\":\n      return state.meet.weightClassesKgWomen;\n    case \"Mx\":\n      return state.meet.weightClassesKgMx;\n    default:\n      (sex: empty) // eslint-disable-line\n      return state.meet.weightClassesKgMen;\n  }\n};\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  return {\n    classes: selectClassesBySex(ownProps.sex, state)\n  };\n};\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    setWeightClasses: (sex, classesKg) => dispatch(setWeightClasses(sex, classesKg))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WeightClassesSelect);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { ControlLabel, FormGroup, FormControl } from \"react-bootstrap\";\n\nimport { setBarAndCollarsWeightKg } from \"../../actions/meetSetupActions\";\n\ntype Props = {\n  inKg: boolean,\n  barAndCollarsWeightKg: number,\n  setBarAndCollarsWeightKg: number => any\n};\n\ntype State = {\n  value: number\n};\n\nclass BarAndCollarsWeightKg extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.getValidationState = this.getValidationState.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    const weight = this.props.barAndCollarsWeightKg;\n    const value = this.props.inKg ? weight : weight * 2.20462262;\n\n    this.state = {\n      value: value\n    };\n  }\n\n  getValidationState = () => {\n    const { value } = this.state;\n    const asNumber = Number(value);\n\n    if (isNaN(asNumber) || asNumber <= 0 || asNumber < 5) {\n      return \"error\";\n    }\n    return \"success\";\n  };\n\n  handleChange = event => {\n    const value = event.target.value;\n    this.setState({ value: value }, () => {\n      if (this.getValidationState() === \"success\") {\n        const asNum = Number(value);\n        const weight = this.props.inKg ? asNum : asNum / 2.20462262;\n        this.props.setBarAndCollarsWeightKg(weight);\n      }\n    });\n  };\n\n  render() {\n    const label = \"Bar + Collars weight (\" + (this.props.inKg ? \"kg\" : \"lbs\") + \")\";\n\n    return (\n      <FormGroup validationState={this.getValidationState()}>\n        <ControlLabel>{label}</ControlLabel>\n        <FormControl type=\"number\" value={this.state.value} onChange={this.handleChange} />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  inKg: state.meet.inKg,\n  barAndCollarsWeightKg: state.meet.barAndCollarsWeightKg\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setBarAndCollarsWeightKg: weightKg => dispatch(setBarAndCollarsWeightKg(weightKg))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BarAndCollarsWeightKg);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Displays the selector for determining how many plates are available\n// to loaders on one side.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { FormControl, FormGroup, Table } from \"react-bootstrap\";\n\nimport { setPlatePairCount } from \"../../actions/meetSetupActions\";\n\nimport type { PlatePairCount } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  inKg: boolean;\n  platePairCounts: Array<PlatePairCount>;\n}\n\ninterface DispatchProps {\n  setPlatePairCount: (number, number) => any;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass Plates extends React.Component<Props> {\n  constructor(props, context) {\n    super(props, context);\n\n    this.validateAmountInput = this.validateAmountInput.bind(this);\n    this.updateAmountHandler = this.updateAmountHandler.bind(this);\n  }\n\n  validateAmountInput = id => {\n    const widget: any = document.getElementById(id);\n\n    // This can happen because the FormGroup is created before the widget exists.\n    if (widget === null) return;\n    const value = widget.value;\n\n    if (value === undefined) return \"error\";\n\n    // Ensure that the value is an integer in a reasonable range.\n    let asNum = Number(value);\n    if (Math.floor(asNum) !== asNum) return \"error\";\n    if (asNum < 0 || asNum > 20) return \"error\";\n    if (String(asNum) !== value) return \"error\";\n\n    return null;\n  };\n\n  updateAmountHandler = (weightKg, id) => {\n    if (this.validateAmountInput(id) === \"error\") {\n      // Although no state is set, this is used to trigger the FormGroup\n      // to re-query the validationState on change.\n      return this.setState({});\n    }\n\n    const widget: any = document.getElementById(id);\n    this.props.setPlatePairCount(weightKg, Number(widget.value));\n  };\n\n  renderWeightRow = (weightKg, amount) => {\n    // The input event value isn't passed by the event, so we assign a unique ID\n    // and then just search the whole document for it.\n    const id = \"weight\" + String(weightKg);\n\n    const weight = this.props.inKg ? weightKg : weightKg * 2.20462262;\n\n    return (\n      <tr key={weightKg}>\n        <td>{weight}</td>\n        <td>\n          <FormGroup validationState={this.validateAmountInput(id)} style={{ marginBottom: 0 }}>\n            <FormControl\n              id={id}\n              onChange={e => this.updateAmountHandler(weightKg, id)}\n              type=\"number\"\n              defaultValue={amount}\n              min={0}\n            />\n          </FormGroup>\n        </td>\n      </tr>\n    );\n  };\n\n  render() {\n    let plateRows = [];\n    for (let i = 0; i < this.props.platePairCounts.length; i++) {\n      const obj: PlatePairCount = this.props.platePairCounts[i];\n      plateRows.push(this.renderWeightRow(obj.weightKg, obj.pairCount));\n    }\n\n    const units = this.props.inKg ? \"kg\" : \"lbs\";\n\n    return (\n      <div>\n        <Table striped condensed hover style={{ margin: \"0px\" }}>\n          <thead>\n            <tr>\n              <th>Weight ({units})</th>\n              <th>Pairs of Plates</th>\n            </tr>\n          </thead>\n          <tbody>{plateRows}</tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg,\n  platePairCounts: state.meet.platePairCounts\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    setPlatePairCount: (weightKg, amount) => dispatch(setPlatePairCount(weightKg, amount))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Plates);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Col, Row, Panel, FormGroup, ControlLabel, FormControl } from \"react-bootstrap\";\n\nimport MeetName from \"./MeetName\";\nimport MeetDate from \"./MeetDate\";\nimport MeetLength from \"./MeetLength\";\nimport MeetLocation from \"./MeetLocation\";\nimport PlatformCounts from \"./PlatformCounts\";\nimport FormulaSelect from \"./FormulaSelect\";\nimport FederationSelect from \"./FederationSelect\";\nimport DivisionSelect from \"./DivisionSelect\";\nimport WeightClassesSelect from \"./WeightClassesSelect\";\nimport BarAndCollarsWeightKg from \"./BarAndCollarsWeightKg\";\nimport Plates from \"./Plates\";\n\nimport { updateMeet } from \"../../actions/meetSetupActions\";\n\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  allow4thAttempts: boolean;\n  combineSleevesAndWraps: boolean;\n  inKg: boolean;\n}\n\ninterface DispatchProps {\n  setCombineSleevesAndWraps: (event: Object) => void;\n  setAllow4thAttempts: (event: Object) => void;\n  setInKg: (event: Object) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\nconst yesNoBooleanOptions = [\n  <option key=\"Yes\" value=\"Yes\">\n    Yes\n  </option>,\n  <option key=\"No\" value=\"No\">\n    No\n  </option>\n];\n\n// The widgets speak strings, but the state speaks boolean.\nconst yesNoToBoolean = (yesno: string): boolean => {\n  if (yesno === \"Yes\") return true;\n  return false;\n};\nconst yesNoFromBoolean = (bool: boolean): string => {\n  if (bool === true) return \"Yes\";\n  return \"No\";\n};\n\nclass MeetSetup extends React.Component<Props> {\n  render() {\n    // This is used as a key to force unit-dependent components to re-initialize state.\n    const inKg = String(this.props.inKg);\n\n    return (\n      <Grid>\n        <Row>\n          <Col md={4}>\n            <Panel bsStyle=\"info\">\n              <Panel.Heading>Sanction Information</Panel.Heading>\n              <Panel.Body>\n                <MeetName />\n                <MeetLocation />\n                <FederationSelect />\n                <MeetDate />\n                <MeetLength />\n                <PlatformCounts />\n              </Panel.Body>\n            </Panel>\n          </Col>\n\n          <Col md={4}>\n            <Panel>\n              <Panel.Heading>Competition Rules</Panel.Heading>\n              <Panel.Body>\n                <DivisionSelect />\n                <WeightClassesSelect sex=\"M\" label=\"Men's Weight Classes (kg), omit SHW\" />\n                <WeightClassesSelect sex=\"F\" label=\"Women's Weight Classes (kg), omit SHW\" />\n                <WeightClassesSelect sex=\"Mx\" label=\"Mx Weight Classes (kg), omit SHW\" />\n                <FormulaSelect />\n\n                <FormGroup>\n                  <ControlLabel>Should Sleeves and Wraps be combined for placing?</ControlLabel>\n                  <FormControl\n                    componentClass=\"select\"\n                    defaultValue={yesNoFromBoolean(this.props.combineSleevesAndWraps)}\n                    onChange={this.props.setCombineSleevesAndWraps}\n                  >\n                    {yesNoBooleanOptions}\n                  </FormControl>\n                </FormGroup>\n\n                <FormGroup>\n                  <ControlLabel>Can lifters take 4th attempts for records?</ControlLabel>\n                  <FormControl\n                    componentClass=\"select\"\n                    defaultValue={yesNoFromBoolean(this.props.allow4thAttempts)}\n                    onChange={this.props.setAllow4thAttempts}\n                  >\n                    {yesNoBooleanOptions}\n                  </FormControl>\n                </FormGroup>\n              </Panel.Body>\n            </Panel>\n          </Col>\n\n          <Col md={4}>\n            <Panel bsStyle=\"info\">\n              <Panel.Heading>Weights and Loading Setup</Panel.Heading>\n              <Panel.Body>\n                <FormGroup>\n                  <ControlLabel>In what units are attempts and bodyweights?</ControlLabel>\n                  <FormControl\n                    componentClass=\"select\"\n                    defaultValue={yesNoFromBoolean(this.props.inKg)}\n                    onChange={this.props.setInKg}\n                  >\n                    <option key=\"Yes\" value=\"Yes\">\n                      Kilograms\n                    </option>\n                  </FormControl>\n                </FormGroup>\n                <BarAndCollarsWeightKg key={inKg} />\n                <Plates />\n              </Panel.Body>\n            </Panel>\n          </Col>\n        </Row>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg,\n  combineSleevesAndWraps: state.meet.combineSleevesAndWraps,\n  allow4thAttempts: state.meet.allow4thAttempts\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => ({\n  setCombineSleevesAndWraps: event =>\n    dispatch(updateMeet({ combineSleevesAndWraps: yesNoToBoolean(event.target.value) })),\n  setAllow4thAttempts: event => dispatch(updateMeet({ allow4thAttempts: yesNoToBoolean(event.target.value) })),\n  setInKg: event => dispatch(updateMeet({ inKg: yesNoToBoolean(event.target.value) }))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetSetup);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport MeetSetup from \"../components/meet-setup/MeetSetup\";\n\nclass MeetSetupContainer extends React.Component<{}> {\n  render() {\n    return <MeetSetup />;\n  }\n}\n\nexport default MeetSetupContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the table of LifterRows\n// Generalized to accept a rowRenderer component, so that different pages\n// can render different row level items, while re-using the logic in this component\n// to handle rendering one row per lifter\n// This is the parent component that determines how many rows to render,\n// what data each row should see, etc.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Table } from \"react-bootstrap\";\n\nclass LifterTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderRows = this.renderRows.bind(this);\n    this.renderHeader = this.renderHeader.bind(this);\n  }\n\n  renderRows() {\n    const LifterRow = this.props.rowRenderer;\n    const { entries } = this.props;\n    return entries.map(entry => <LifterRow key={entry.id} id={entry.id} />);\n  }\n\n  renderHeader() {\n    // Styling for small, single-character selector columns.\n    const shortStyle = { width: \"75px\" };\n    return (\n      <tr>\n        <th style={shortStyle}>Day</th>\n        <th style={shortStyle}>Platform</th>\n        <th style={shortStyle}>Flight</th>\n        <th>Name</th>\n        <th style={shortStyle}>Sex</th>\n        <th style={{ width: \"125px\" }}>BirthDate</th>\n        <th style={{ width: \"120px\" }}>Equipment</th>\n        <th style={{ width: \"200px\" }}>Division(s)</th>\n        <th style={{ width: \"80px\" }} />\n      </tr>\n    );\n  }\n\n  render() {\n    return (\n      <Table hover condensed>\n        <thead>{this.renderHeader()}</thead>\n        <tbody>{this.renderRows()}</tbody>\n      </Table>\n    );\n  }\n}\n\nLifterTable.propTypes = {\n  entries: PropTypes.array.isRequired,\n  rowRenderer: PropTypes.any.isRequired\n};\n\nexport default LifterTable;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// This defines a generic text input that colors itself based upon a validation\n// function passed in OwnProps. On blur, an onSuccess() callback is called\n// if validation passes; otherwise, the text input reverts to the initial state.\n\nimport React from \"react\";\nimport { FormControl, FormGroup } from \"react-bootstrap\";\n\nimport type { Validation } from \"../types/dataTypes\";\n\ninterface OwnProps {\n  initialValue: string;\n  placeholder?: ?string;\n  disabled?: boolean;\n  getValidationState: (value: ?string) => Validation;\n  onSuccess: (value: string) => any;\n}\n\ntype Props = $ReadOnly<OwnProps>;\n\ninterface InternalState {\n  value: string;\n}\n\nclass BirthDateInput extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    this.state = {\n      value: props.initialValue\n    };\n  }\n\n  getValidationState = (): Validation => {\n    return this.props.getValidationState(this.state.value);\n  };\n\n  handleKeyDown = (event: Object) => {\n    if (event.key === \"Enter\") {\n      event.target.blur();\n    }\n  };\n\n  handleChange = (event: Object) => {\n    this.setState({ value: event.target.value });\n  };\n\n  handleBlur = (event: Object) => {\n    if (this.getValidationState() === \"error\") {\n      this.setState({ value: this.props.initialValue });\n      return;\n    }\n\n    if (this.props.initialValue !== this.state.value) {\n      this.props.onSuccess(this.state.value);\n    }\n  };\n\n  render() {\n    return (\n      <FormGroup validationState={this.getValidationState()} style={{ marginBottom: 0 }}>\n        <FormControl\n          type=\"text\"\n          placeholder={this.props.placeholder}\n          disabled={this.props.disabled === true ? true : undefined}\n          value={this.state.value}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nexport default BirthDateInput;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type { Validation } from \"../types/dataTypes\";\n\n// Validates a string date in the ISO8601 \"YYYY-MM-DD\" format.\nexport const validateIso8601Date = (s: ?string): Validation => {\n  if (typeof s !== \"string\") return \"error\";\n\n  if (s === \"\") return null;\n  if (s.length !== \"YYYY-MM-DD\".length) return \"error\";\n\n  const pieces: Array<string> = s.split(\"-\");\n  if (pieces.length !== 3) return \"error\";\n\n  const [yearStr, monthStr, dayStr] = pieces;\n\n  // Ensure that the strings only contain numbers, because the Number() constructor\n  // will ignore whitespace.\n  const onlyNumbers = /^[0-9]+$/;\n\n  if (!yearStr.match(onlyNumbers)) return \"error\";\n  if (!monthStr.match(onlyNumbers)) return \"error\";\n  if (!dayStr.match(onlyNumbers)) return \"error\";\n\n  const year = Number(yearStr);\n  const month = Number(monthStr);\n  const day = Number(dayStr);\n\n  if (isNaN(year) || isNaN(month) || isNaN(day)) return \"error\";\n  if (year <= 0 || month <= 0 || month > 12 || day <= 0 || day > 31) return \"error\";\n\n  // Disallow dates that are out of the plausible range for powerlifting.\n  if (year < 1880 || year >= new Date().getFullYear() + 2) return \"error\";\n\n  return \"success\";\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type {\n  NewRegistrationAction,\n  DeleteRegistrationAction,\n  UpdateRegistrationAction,\n  MergePlatformAction\n} from \"../types/actionTypes\";\nimport type { Entry } from \"../types/dataTypes\";\n\n// Adds a blank (or default-initalized) row to the registrations table.\nexport const newRegistration = (obj: $Shape<Entry>): NewRegistrationAction => {\n  return {\n    type: \"NEW_REGISTRATION\",\n    overwriteDefaults: obj\n  };\n};\n\n// Deletes an existing entry from the registrations table.\n//\n// Corresponding data from the registration is *not* deleted, for example\n// from the lifting page, but because the state.registrations.lookups map\n// will no longer find an associated entry given a global unique EntryId,\n// the data will simply stop being displayed.\n//\n// The global ID from the deleted entry is not recycled.\nexport const deleteRegistration = (entryId: number): DeleteRegistrationAction => {\n  return {\n    type: \"DELETE_REGISTRATION\",\n    entryId: entryId\n  };\n};\n\n// Updates an existing entry in the registrations table.\n//\n// Because there are a lot of fields in a single entry, for the sake of\n// simplicity, this is a general method that knows how to update the\n// existing entry object with whatever has changed, as passed\n// through object properties.\nexport const updateRegistration = (entryId: number, obj: $Shape<Entry>): UpdateRegistrationAction => {\n  return {\n    type: \"UPDATE_REGISTRATION\",\n    entryId: entryId,\n    changes: obj\n  };\n};\n\n// Deletes all entries assigned to a given (day, platform), and then adds entries\n// assigned to that (day, platform) from a foreign save state.\nexport const mergePlatform = (day: number, platform: number, platformEntries: Array<Entry>): MergePlatformAction => {\n  return {\n    type: \"MERGE_PLATFORM\",\n    day: day,\n    platform: platform,\n    platformEntries: platformEntries\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines a row in the LifterTable on the Registration page.\n// This provides a bunch of widgets, each of which correspond to\n// the state of a single entry.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Button, FormControl } from \"react-bootstrap\";\nimport Select from \"react-select\";\n\nimport ValidatedTextInput from \"../ValidatedTextInput\";\n\nimport { validateIso8601Date } from \"../../validation/iso8601Date\";\n\nimport { deleteRegistration, updateRegistration } from \"../../actions/registrationActions\";\n\nconst eventOptions = [\n  { value: \"S\", label: \"S\" },\n  { value: \"B\", label: \"B\" },\n  { value: \"D\", label: \"D\" },\n  { value: \"BD\", label: \"BD\" },\n  { value: \"SBD\", label: \"SBD\" },\n  { value: \"SB\", label: \"SB\" },\n  { value: \"SD\", label: \"SD\" }\n];\n\nclass LifterRow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Store the Day in state to update the Platform options when the Day changes.\n    // Store the Birth Date in state to re-render when a new date is selected\n    this.state = {\n      selectedDay: props.entry.day\n    };\n\n    this.deleteRegistrationClick = this.deleteRegistrationClick.bind(this);\n    this.updateRegistrationDay = this.updateRegistrationDay.bind(this);\n    this.updateRegistrationPlatform = this.updateRegistrationPlatform.bind(this);\n    this.updateRegistrationFlight = this.updateRegistrationFlight.bind(this);\n    this.updateRegistrationName = this.updateRegistrationName.bind(this);\n    this.updateRegistrationSex = this.updateRegistrationSex.bind(this);\n    this.updateRegistrationLot = this.updateRegistrationLot.bind(this);\n    this.updateRegistrationMemberId = this.updateRegistrationMemberId.bind(this);\n    this.updateRegistrationBirthDate = this.updateRegistrationBirthDate.bind(this);\n    this.updateRegistrationCountry = this.updateRegistrationCountry.bind(this);\n    this.updateRegistrationState = this.updateRegistrationState.bind(this);\n    this.updateRegistrationDivisions = this.updateRegistrationDivisions.bind(this);\n    this.updateRegistrationEvents = this.updateRegistrationEvents.bind(this);\n    this.updateRegistrationEquipment = this.updateRegistrationEquipment.bind(this);\n  }\n\n  deleteRegistrationClick(event) {\n    this.props.deleteRegistration(this.props.id);\n  }\n\n  updateRegistrationDay(event) {\n    const day = Number(event.target.value);\n    const entry = this.props.entry;\n\n    // Also check whether the platform is now impossible.\n    let platform = entry.platform;\n    if (platform > this.props.meet.platformsOnDays[day - 1]) {\n      platform = 1; // This matches the default behavior of the select element.\n    }\n\n    if (entry.day !== day) {\n      this.setState({ selectedDay: day });\n      this.props.updateRegistration(this.props.id, { day: day, platform: platform });\n    }\n  }\n\n  updateRegistrationPlatform(event) {\n    const platform = Number(event.target.value);\n    if (this.props.entry.platform !== platform) {\n      this.props.updateRegistration(this.props.id, { platform: platform });\n    }\n  }\n\n  updateRegistrationFlight(event) {\n    const flight = event.target.value;\n    if (this.props.entry.flight !== flight) {\n      this.props.updateRegistration(this.props.id, { flight: flight });\n    }\n  }\n\n  updateRegistrationName(event) {\n    const name = event.target.value;\n    if (this.props.entry.name !== name) {\n      this.props.updateRegistration(this.props.id, { name: name });\n    }\n  }\n\n  updateRegistrationSex(event) {\n    const sex = event.target.value;\n    if (this.props.entry.sex !== sex) {\n      this.props.updateRegistration(this.props.id, { sex: sex });\n    }\n  }\n\n  updateRegistrationLot = event => {\n    const lot = event.target.value;\n    const asNumber = Number(lot);\n    if (asNumber >= 0 && asNumber !== this.props.entry.lot) {\n      this.props.updateRegistration(this.props.id, { lot: asNumber });\n    }\n  };\n\n  updateRegistrationMemberId = event => {\n    const memberId = event.target.value;\n    if (this.props.entry.memberId !== memberId) {\n      this.props.updateRegistration(this.props.id, { memberId: memberId });\n    }\n  };\n\n  updateRegistrationBirthDate = birthDate => {\n    if (this.props.entry.birthDate !== birthDate) {\n      this.props.updateRegistration(this.props.id, { birthDate: birthDate });\n    }\n  };\n\n  updateRegistrationCountry = country => {\n    if (this.props.entry.country !== country) {\n      this.props.updateRegistration(this.props.id, { country: country });\n    }\n  };\n\n  updateRegistrationState = state => {\n    if (this.props.entry.state !== state) {\n      this.props.updateRegistration(this.props.id, { state: state });\n    }\n  };\n\n  updateRegistrationDivisions(value, actionMeta) {\n    // Value is an array of { value, label } objects.\n    // Since updates are synchronous, we can just compare lengths.\n    if (value.length !== this.props.entry.divisions.length) {\n      let divisions = [];\n      for (let i = 0; i < value.length; i++) {\n        divisions.push(value[i].label);\n      }\n      this.props.updateRegistration(this.props.id, { divisions: divisions });\n    }\n  }\n\n  updateRegistrationEvents(value, actionMeta) {\n    // Value is an array of { value, label } objects.\n    // Since updates are synchronous, we can just compare lengths.\n    if (value.length !== this.props.entry.events.length) {\n      let events = [];\n      for (let i = 0; i < value.length; i++) {\n        events.push(value[i].label);\n      }\n      this.props.updateRegistration(this.props.id, { events: events });\n    }\n  }\n\n  updateRegistrationEquipment(event) {\n    const equipment = event.target.value;\n    if (this.props.entry.equipment !== equipment) {\n      this.props.updateRegistration(this.props.id, { equipment: equipment });\n    }\n  }\n\n  render() {\n    const entry = this.props.entry;\n\n    let dayOptions = [];\n    for (let i = 1; i <= this.props.meet.lengthDays; i++) {\n      dayOptions.push(\n        <option value={i} key={i}>\n          {i}\n        </option>\n      );\n    }\n\n    let platformOptions = [];\n    for (let i = 1; i <= this.props.meet.platformsOnDays[entry.day - 1]; i++) {\n      platformOptions.push(\n        <option value={i} key={i}>\n          {i}\n        </option>\n      );\n    }\n\n    let divisionOptions = [];\n    for (let i = 0; i < this.props.meet.divisions.length; i++) {\n      let division = this.props.meet.divisions[i];\n      divisionOptions.push({ value: division, label: division });\n    }\n\n    let selectedDivisions = [];\n    for (let i = 0; i < entry.divisions.length; i++) {\n      const division = entry.divisions[i];\n      selectedDivisions.push({ value: division, label: division });\n    }\n\n    let selectedEvents = [];\n    for (let i = 0; i < entry.events.length; i++) {\n      const events = entry.events[i];\n      selectedEvents.push({ value: events, label: events });\n    }\n\n    return (\n      <tr>\n        <td>\n          <FormControl\n            defaultValue={this.state.selectedDay}\n            componentClass=\"select\"\n            onChange={this.updateRegistrationDay}\n          >\n            {dayOptions}\n          </FormControl>\n        </td>\n\n        <td>\n          <FormControl defaultValue={entry.platform} componentClass=\"select\" onChange={this.updateRegistrationPlatform}>\n            {platformOptions}\n          </FormControl>\n        </td>\n\n        <td>\n          <FormControl defaultValue={entry.flight} componentClass=\"select\" onChange={this.updateRegistrationFlight}>\n            <option value=\"A\">A</option>\n            <option value=\"B\">B</option>\n            <option value=\"C\">C</option>\n            <option value=\"D\">D</option>\n            <option value=\"E\">E</option>\n            <option value=\"F\">F</option>\n            <option value=\"G\">G</option>\n            <option value=\"H\">H</option>\n          </FormControl>\n        </td>\n\n        <td>\n          <FormControl type=\"text\" placeholder=\"Name\" defaultValue={entry.name} onBlur={this.updateRegistrationName} />\n        </td>\n\n        <td>\n          <FormControl defaultValue={entry.sex} componentClass=\"select\" onChange={this.updateRegistrationSex}>\n            <option value=\"M\">M</option>\n            <option value=\"F\">F</option>\n            <option value=\"Mx\">Mx</option>\n          </FormControl>\n        </td>\n\n        <td>\n          <ValidatedTextInput\n            initialValue={entry.birthDate}\n            placeholder=\"YYYY-MM-DD\"\n            getValidationState={validateIso8601Date}\n            onSuccess={this.updateRegistrationBirthDate}\n          />\n        </td>\n\n        <td>\n          <FormControl\n            defaultValue={entry.equipment}\n            componentClass=\"select\"\n            onChange={this.updateRegistrationEquipment}\n          >\n            <option value=\"Bare\">Bare</option>\n            <option value=\"Sleeves\">Sleeves</option>\n            <option value=\"Wraps\">Wraps</option>\n            <option value=\"Single-ply\">Single-ply</option>\n            <option value=\"Multi-ply\">Multi-ply</option>\n          </FormControl>\n        </td>\n\n        <td>\n          <Select\n            menuPlacement=\"auto\"\n            options={divisionOptions}\n            isClearable={false}\n            isMulti={true}\n            onChange={this.updateRegistrationDivisions}\n            defaultValue={selectedDivisions}\n          />\n        </td>\n\n        <td>\n          <Button onClick={this.deleteRegistrationClick} bsStyle=\"danger\">\n            Delete\n          </Button>\n        </td>\n      </tr>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  // Only have props for the entry corresponding to this one row.\n  const lookup = state.registration.lookup;\n  const entry = state.registration.entries[lookup[ownProps.id]];\n\n  return {\n    meet: state.meet,\n    entry: entry\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteRegistration: entryId => dispatch(deleteRegistration(entryId)),\n    updateRegistration: (entryId, obj) => dispatch(updateRegistration(entryId, obj))\n  };\n};\n\nLifterRow.propTypes = {\n  meet: PropTypes.shape({\n    platformsOnDays: PropTypes.array,\n    lengthDays: PropTypes.number,\n    divisions: PropTypes.array\n  }),\n  entry: PropTypes.object,\n  id: PropTypes.number,\n  deleteRegistration: PropTypes.func,\n  updateRegistration: PropTypes.func\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LifterRow);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the button that adds a new entry to the registrations table.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\n\nimport { newRegistration } from \"../../actions/registrationActions\";\n\nimport type { Entry } from \"../../types/dataTypes\";\n\ninterface DispatchProps {\n  newRegistration: (obj: $Shape<Entry>) => any;\n}\n\ntype Props = DispatchProps;\n\nclass NewButton extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = event => {\n    this.props.newRegistration({});\n  };\n\n  render() {\n    return (\n      <Button onClick={this.handleClick} bsStyle=\"primary\" bsSize=\"large\" block>\n        New Lifter\n      </Button>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    newRegistration: (obj: $Shape<Entry>) => dispatch(newRegistration(obj))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(NewButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Registration page, contained by the RegistrationContainer.\n\nimport React from \"react\";\nimport { Panel } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport LifterTable from \"./LifterTable\";\nimport LifterRow from \"./LifterRow\";\nimport NewButton from \"./NewButton\";\n\nconst marginStyle = { margin: \"0 20px 0 20px\" };\n\nclass RegistrationView extends React.Component {\n  render() {\n    return (\n      <div style={marginStyle}>\n        <Panel>\n          <Panel.Heading>Lifter Registration</Panel.Heading>\n          <Panel.Body>\n            <LifterTable entries={this.props.registration.entries} rowRenderer={LifterRow} />\n            <NewButton />\n          </Panel.Body>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nRegistrationView.propTypes = {\n  registration: PropTypes.shape({\n    entries: PropTypes.array\n  })\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(RegistrationView);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Registration page.\n\nimport React from \"react\";\nimport RegistrationView from \"../components/registration/RegistrationView\";\n\nclass RegistrationContainer extends React.Component<{}> {\n  render() {\n    return <RegistrationView />;\n  }\n}\n\nexport default RegistrationContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Table } from \"react-bootstrap\";\n\nimport type { Entry } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  entries: Array<Entry>;\n  rowRenderer: any;\n}\n\ninterface StateProps {\n  inKg: boolean;\n}\n\ntype Props = OwnProps & StateProps;\n\nclass LifterTable extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n    this.renderRows = this.renderRows.bind(this);\n    this.renderHeader = this.renderHeader.bind(this);\n  }\n\n  renderRows = () => {\n    const LifterRow = this.props.rowRenderer;\n    const { entries } = this.props;\n    return entries.map(entry => <LifterRow key={entry.id} id={entry.id} />);\n  };\n\n  renderHeader = () => {\n    // Styling for small, single-character selector columns.\n    const shortStyle = { width: \"85px\" };\n\n    const units = this.props.inKg ? \"Kg\" : \"Lbs\";\n\n    return (\n      <tr>\n        <th style={shortStyle}>Platform</th>\n        <th style={shortStyle}>Flight</th>\n        <th style={{ width: \"300px\" }}>Name</th>\n\n        <th style={shortStyle}>Age</th>\n        <th style={shortStyle}>Bodyweight {units}</th>\n        <th style={shortStyle}>Squat Rack</th>\n        <th style={shortStyle}>Squat Opener {units}</th>\n      </tr>\n    );\n  };\n\n  render() {\n    return (\n      <Table hover condensed style={{ margin: \"0px\" }}>\n        <thead>{this.renderHeader()}</thead>\n        <tbody>{this.renderRows()}</tbody>\n      </Table>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LifterTable);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type {\n  EnterAttemptAction,\n  MarkLiftAction,\n  SetLiftingGroupAction,\n  OverrideAttemptAction,\n  OverrideEntryIdAction\n} from \"../types/actionTypes\";\nimport type { Lift } from \"../types/dataTypes\";\n\n// Sets a weightKg that doesn't have a good/failed value, for entering in attempts.\nexport const enterAttempt = (\n  entryId: number,\n  lift: Lift,\n  attemptOneIndexed: number,\n  weightKg: number\n): EnterAttemptAction => {\n  return {\n    type: \"ENTER_ATTEMPT\",\n    entryId: entryId,\n    lift: lift,\n    attemptOneIndexed: attemptOneIndexed,\n    weightKg: weightKg\n  };\n};\n\n// Marks a lift \"good\" or \"failed\".\n//\n// entryId is the ID of the affected entry, a Number.\n// lift is \"S\", \"B\", or \"D\".\n// attempt is 1,2,3, etc., up to MAX_ATTEMPTS.\n// success is a bool for whether to mark the lift as a success or as a failure.\nexport const markLift = (entryId: number, lift: Lift, attemptOneIndexed: number, success: boolean): MarkLiftAction => {\n  return {\n    type: \"MARK_LIFT\",\n    entryId: entryId,\n    lift: lift,\n    attemptOneIndexed: attemptOneIndexed,\n    success: success\n  };\n};\n\n// Sets the current group of lifters.\n// This is always manually set by the score table.\nexport const setLiftingGroup = (day: number, platform: number, flight: string, lift: Lift): SetLiftingGroupAction => {\n  return {\n    type: \"SET_LIFTING_GROUP\",\n    day: day,\n    platform: platform,\n    flight: flight,\n    lift: lift\n  };\n};\n\n// Overrides the calculated meet progress logic by forcing display of an attempt,\n// even if it has already been marked \"good lift\" or \"no lift\".\nexport const overrideAttempt = (attempt: number): OverrideAttemptAction => {\n  return {\n    type: \"OVERRIDE_ATTEMPT\",\n    attempt: attempt\n  };\n};\n\n// Overrides the calculated meet progress logic by forcing display of a specific lifter,\n// even if they have already had their attempt entered.\nexport const overrideEntryId = (entryId: number): OverrideEntryIdAction => {\n  return {\n    type: \"OVERRIDE_ENTRY_ID\",\n    entryId: entryId\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines an input of a single weight, during configuration.\n// Since it's for configuration, it doesn't have an associated success/failure value.\n//\n// For consistency purposes, weights are always stored in kg.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormControl, FormGroup } from \"react-bootstrap\";\n\nimport { updateRegistration } from \"../../actions/registrationActions\";\nimport { enterAttempt } from \"../../actions/liftingActions\";\n\nimport { liftToAttemptFieldName } from \"../../logic/entry\";\n\nimport type { Entry, Lift } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  id: number; // The EntryID.\n  field: string;\n  disabled: boolean;\n\n  // Optional attributes used only for lifts (as opposed to for bodyweights).\n  placeholder?: ?string;\n  lift?: Lift;\n  attemptOneIndexed?: number;\n  multipleOf?: number;\n}\n\ninterface StateProps {\n  inKg: boolean;\n  weightKg: number;\n}\n\ninterface DispatchProps {\n  updateRegistration: (entryId: number, obj: $Shape<Entry>) => any;\n  enterAttempt: (entryId: number, lift: Lift, attemptOneIndexed: number, weightKg: number) => any;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface InternalState {\n  weightStr: string;\n}\n\nclass WeightInput extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n    this.getValidationState = this.getValidationState.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    let weight = this.props.weightKg;\n    if (!this.props.inKg) {\n      weight = weight * 2.20462262;\n    }\n\n    // Prefer displaying an empty string to 0.0.\n    if (weight === 0.0) {\n      weight = \"\";\n    }\n\n    // Internal state, for purposes of validation.\n    // To avoid confusion (auto-rounding) when typing, just store a String.\n    this.state = {\n      weightStr: String(weight)\n    };\n  }\n\n  getValidationState = () => {\n    const weightNum = Number(this.state.weightStr);\n    if (isNaN(weightNum) || weightNum < 0) return \"error\";\n    if (this.props.multipleOf !== undefined && weightNum % this.props.multipleOf !== 0.0) {\n      return \"warning\";\n    }\n    if (this.state.weightStr.length > 0) return \"success\";\n    return null;\n  };\n\n  // Update the internal state, used for validation.\n  handleChange = event => {\n    const weightStr = event.target.value;\n    this.setState({ weightStr: weightStr });\n  };\n\n  // Update the Redux store.\n  handleBlur = event => {\n    const weightStr = event.target.value;\n    const weightNum = Number(weightStr);\n\n    if (this.getValidationState() === \"error\") {\n      return;\n    }\n\n    const weightKg = this.props.inKg ? weightNum : weightNum / 2.20462262;\n    if (this.props.weightKg === weightKg) {\n      return;\n    }\n\n    // If \"attempt\" is set, a specific attempt is selected.\n    if (this.props.attemptOneIndexed !== undefined && this.props.lift !== undefined) {\n      const attemptOneIndexed = this.props.attemptOneIndexed;\n      const lift = this.props.lift;\n      this.props.enterAttempt(this.props.id, lift, attemptOneIndexed, weightKg);\n    } else {\n      // Otherwise, the field is a Number.\n      let newfields = {};\n      newfields[this.props.field] = weightKg;\n      this.props.updateRegistration(this.props.id, newfields);\n    }\n  };\n\n  render() {\n    // FormGroup provides a default padding of 15, but FormGroup is only being\n    // used here to accept a validationState. It's not really a group.\n    const undoDefaultPadding = { marginBottom: \"0\" };\n\n    return (\n      <FormGroup style={undoDefaultPadding} validationState={this.getValidationState()}>\n        <FormControl\n          disabled={this.props.disabled}\n          placeholder={this.props.placeholder}\n          type=\"text\"\n          value={this.state.weightStr}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  // Only have props for the entry corresponding to this one row.\n  const lookup = state.registration.lookup;\n  const entry = state.registration.entries[lookup[ownProps.id]];\n\n  // If `field` is set, then read the Number from the given field name.\n  let weightKg = 0.0;\n  if (ownProps.field !== undefined) {\n    weightKg = entry[ownProps.field];\n  } else {\n    // Otherwise, refer to a specific lift and attempt.\n    const lift = ownProps.lift;\n    const attemptOneIndexed = ownProps.attemptOneIndexed;\n    const field = liftToAttemptFieldName(lift);\n    weightKg = entry[field][attemptOneIndexed - 1];\n  }\n\n  return {\n    inKg: state.meet.inKg,\n    weightKg: weightKg\n  };\n};\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    updateRegistration: (entryId, obj) => dispatch(updateRegistration(entryId, obj)),\n    enterAttempt: (entryId, lift, attemptOneIndexed, weightKg) =>\n      dispatch(enterAttempt(entryId, lift, attemptOneIndexed, weightKg))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WeightInput);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type { Validation } from \"../types/dataTypes\";\n\n// Validates a simple positive integer.\nexport const validatePositiveInteger = (s: ?string, inclusiveMax: ?number): Validation => {\n  if (typeof s !== \"string\") return \"error\";\n\n  if (s === \"\") return null;\n\n  // Ensure that the string only contains numbers, because the Number() constructor\n  // will ignore whitespace.\n  const onlyNumbers = /^[0-9]+$/;\n  if (!s.match(onlyNumbers)) return \"error\";\n\n  // The number shouldn't start with an unnecessary zero.\n  if (s.startsWith(\"0\")) return \"error\";\n\n  const n = Number(s);\n\n  // Ensure the number is a positive integer.\n  if (isNaN(n)) return \"error\";\n  if (!Number.isInteger(n)) return \"error\";\n  if (n <= 0) return \"error\";\n\n  // Allow an optional inclusive upper bound check.\n  if (typeof inclusiveMax === \"number\") {\n    if (n > inclusiveMax) return \"error\";\n  }\n\n  return \"success\";\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines a row in the LifterTable on the Weigh-inss page.\n// This provides a bunch of widgets, each of which correspond to\n// the state of a single entry.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport ValidatedTextInput from \"../ValidatedTextInput\";\nimport WeightInput from \"./WeightInput\";\n\nimport { validatePositiveInteger } from \"../../validation/positiveInteger\";\n\nimport { updateRegistration } from \"../../actions/registrationActions\";\n\nimport type { Entry, Validation } from \"../../types/dataTypes\";\nimport type { GlobalState, MeetState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  id: number;\n}\n\ninterface StateProps {\n  meet: MeetState;\n  entry: Entry;\n}\n\ninterface DispatchProps {\n  updateRegistration: (entryId: number, obj: $Shape<Entry>) => any;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nclass LifterRow extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n    this.updateRegistrationSquatRackInfo = this.updateRegistrationSquatRackInfo.bind(this);\n    this.updateRegistrationBenchRackInfo = this.updateRegistrationBenchRackInfo.bind(this);\n    this.updateRegistrationAge = this.updateRegistrationAge.bind(this);\n  }\n\n  updateRegistrationSquatRackInfo = (value: string) => {\n    if (this.props.entry.squatRackInfo !== value) {\n      this.props.updateRegistration(this.props.id, { squatRackInfo: value });\n    }\n  };\n\n  updateRegistrationBenchRackInfo = (value: string) => {\n    if (this.props.entry.benchRackInfo !== value) {\n      this.props.updateRegistration(this.props.id, { benchRackInfo: value });\n    }\n  };\n\n  updateRegistrationAge = (value: string) => {\n    const age: number = value === \"\" ? 0 : Number(value);\n    if (this.props.entry.age !== age) {\n      this.props.updateRegistration(this.props.id, { age: age });\n    }\n  };\n\n  validateAge = (value: ?string): Validation => {\n    if (value === \"\") return null;\n\n    const pos: Validation = validatePositiveInteger(value);\n    if (pos === \"success\") {\n      // Complain a little if the age is implausible.\n      const n = Number(value);\n      if (n <= 4 || n > 100) return \"warning\";\n    }\n    return pos;\n  };\n\n  validateRack = (value: ?string): Validation => {\n    if (value === \"\") return null;\n    return \"success\";\n  };\n\n  render() {\n    const entry = this.props.entry;\n\n    // Check whether the event(s) include a given lift.\n    let hasSquat = false;\n    let hasBench = false;\n    let hasDeadlift = false;\n    for (let i = 0; i < entry.events.length; i++) {\n      const event = entry.events[i];\n      if (event.includes(\"S\")) {\n        hasSquat = true;\n      }\n      if (event.includes(\"B\")) {\n        hasBench = true;\n      }\n      if (event.includes(\"D\")) {\n        hasDeadlift = true;\n      }\n    }\n\n    // Check whether the first attempt already occurred.\n    const disableSquatWeight = !hasSquat || entry.squatStatus[0] !== 0;\n    const disableBenchWeight = !hasBench || entry.benchStatus[0] !== 0;\n    const disableDeadliftWeight = !hasDeadlift || entry.deadliftStatus[0] !== 0;\n\n    return (\n      <tr>\n        <td>{entry.platform}</td>\n        <td>{entry.flight}</td>\n        <td>{entry.name}</td>\n\n        <td>\n          <ValidatedTextInput\n            initialValue={entry.age === 0 ? \"\" : String(entry.age)}\n            placeholder=\"Age\"\n            getValidationState={this.validateAge}\n            onSuccess={this.updateRegistrationAge}\n          />\n        </td>\n\n        <td>\n          <WeightInput id={this.props.id} field=\"bodyweightKg\" placeholder=\"Bwt\" disabled={false} />\n        </td>\n\n        <td>\n          <ValidatedTextInput\n            initialValue={entry.squatRackInfo}\n            placeholder={hasSquat ? \"S.Rack\" : undefined}\n            disabled={!hasSquat}\n            getValidationState={this.validateRack}\n            onSuccess={this.updateRegistrationSquatRackInfo}\n          />\n        </td>\n\n        <td>\n          <WeightInput\n            id={this.props.id}\n            lift=\"S\"\n            multipleOf={2.5}\n            attemptOneIndexed={1}\n            placeholder={hasSquat ? \"Squat\" : undefined}\n            disabled={disableSquatWeight}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  // Only have props for the entry corresponding to this one row.\n  const lookup = state.registration.lookup;\n  const entry = state.registration.entries[lookup[ownProps.id]];\n\n  return {\n    meet: state.meet,\n    entry: entry\n  };\n};\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    updateRegistration: (entryId: number, obj: $Shape<Entry>) => dispatch(updateRegistration(entryId, obj))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LifterRow);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Weigh-ins page, contained by the WeighinsContainer.\n// The Weigh-ins page updates more information in the Registration state.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Panel } from \"react-bootstrap\";\nimport { getLiftersOnDay } from \"../../logic/entry\";\nimport LifterTable from \"./LifterTable\";\nimport LifterRow from \"./LifterRow\";\n\nimport type { Entry } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\nconst marginStyle = { margin: \"0 20px 0 20px\" };\n\n// For use when embedded inside the Lifting page.\ninterface OwnProps {\n  day?: number;\n  platform?: number;\n}\n\ninterface StateProps {\n  entries: Array<Entry>;\n}\n\ntype Props = $ReadOnly<OwnProps> & $ReadOnly<StateProps>;\n\nclass WeighinsView extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n    this.getNumDaysFromEntries = this.getNumDaysFromEntries.bind(this);\n  }\n\n  // Figure out how many days there are by looking at the entries themselves.\n  //\n  // The meet page information may be unreliable: someone might have created\n  // a second day, added a lifter to it, then removed the second day without\n  // yet updating that lifter.\n  //\n  // This is an attempt to make that error more obvious, so it can be corrected.\n  getNumDaysFromEntries = () => {\n    let max_day = 0;\n    const entries = this.props.entries;\n    for (let i = 0; i < entries.length; i++) {\n      const entry = entries[i];\n      if (entry.day > max_day) {\n        max_day = entry.day;\n      }\n    }\n    return max_day;\n  };\n\n  render() {\n    // Make a separate panel for each day.\n    const numDays = this.getNumDaysFromEntries();\n    let dayPanels = [];\n    for (let i = 1; i <= numDays; i++) {\n      const lifters = getLiftersOnDay(this.props.entries, i);\n\n      // Skip if the OwnProps excluded this selection.\n      if (lifters.length === 0) {\n        continue;\n      }\n\n      // Present the lifters in sorted order.\n      lifters.sort((a, b) => {\n        if (a.platform !== b.platform) return a.platform - b.platform;\n        if (a.flight !== b.flight) return a.flight < b.flight ? -1 : 1;\n        if (a.name < b.name) return -1;\n        if (a.name > b.name) return 1;\n        return 0;\n      });\n\n      dayPanels.push(\n        <Panel key={i}>\n          <Panel.Heading>Day {i} Weigh-ins</Panel.Heading>\n          <Panel.Body>\n            <LifterTable entries={lifters} rowRenderer={LifterRow} />\n          </Panel.Body>\n        </Panel>\n      );\n    }\n\n    // If there are no days thus far, show a default warning panel.\n    if (dayPanels.length === 0) {\n      dayPanels.push(\n        <Panel key={0} bsStyle=\"info\">\n          <Panel.Heading>Waiting for Registration</Panel.Heading>\n          <Panel.Body>Add lifters on the Registration page before weighing them in.</Panel.Body>\n        </Panel>\n      );\n    }\n\n    return <div style={marginStyle}>{dayPanels}</div>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  const { day, platform } = ownProps;\n  let entries = state.registration.entries;\n\n  // Filter if requested by the OwnProps.\n  if (typeof day === \"number\" && typeof platform === \"number\") {\n    entries = entries.filter(e => e.day === day && e.platform === platform);\n  }\n\n  return { entries };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(WeighinsView);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Weighins page.\n\nimport React from \"react\";\nimport WeighinsView from \"../components/weighins/WeighinsView\";\n\nclass WeighinsContainer extends React.Component<{}> {\n  render() {\n    return <WeighinsView />;\n  }\n}\n\nexport default WeighinsContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The top bar of the Lifting page, containing huge text about the current lifter.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport type { Entry } from \"../../types/dataTypes\";\nimport type { GlobalState, RegistrationState } from \"../../types/stateTypes\";\n\nimport styles from \"./TopBar.module.scss\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId?: number;\n}\n\ninterface StateProps {\n  registration: RegistrationState;\n}\n\ntype Props = OwnProps & StateProps;\n\nclass LiftingHeader extends React.Component<Props> {\n  render() {\n    // Defaults, in case of no lifter.\n    let lifterName = \"Flight Complete\";\n    let divisionsStr = null;\n\n    // In the case of a lifter, set fields.\n    if (this.props.currentEntryId !== null && this.props.currentEntryId !== undefined) {\n      const idx = this.props.registration.lookup[this.props.currentEntryId];\n      const entry = this.props.registration.entries[idx];\n      lifterName = entry.name;\n\n      divisionsStr = \" / \" + entry.divisions.join(\", \");\n    }\n\n    return (\n      <div className={styles.topBar}>\n        <span className={styles.lifterName}>{lifterName}</span>\n        <span className={styles.divisions}>{divisionsStr}</span>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    registration: state.registration\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LiftingHeader);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type { PlatePairCount, LoadedPlate } from \"../types/dataTypes\";\n\n// Returns a list of plate weights in loading order.\n// Any unloadable remainder is reported as a final number with a negative value.\nexport const selectPlatesKg = (\n  loadingKg: number,\n  barAndCollarsWeightKg: number,\n  plates: $ReadOnlyArray<PlatePairCount>\n): Array<LoadedPlate> => {\n  // Sort a copy of the plates array by descending weight.\n  const sortedPlates = plates.slice().sort((a, b) => {\n    return b.weightKg - a.weightKg;\n  });\n\n  let sideWeightKg = (loadingKg - barAndCollarsWeightKg) / 2;\n  let loading: Array<LoadedPlate> = [];\n\n  // Run through each plate in order, applying as many of that plate as will fit.\n  for (let i = 0; i < sortedPlates.length; i++) {\n    let { weightKg, pairCount } = sortedPlates[i];\n    while (pairCount > 0 && weightKg <= sideWeightKg) {\n      pairCount--;\n      sideWeightKg -= weightKg;\n      loading.push({ weightAny: weightKg, isAlreadyLoaded: false });\n    }\n  }\n\n  // Report any remainder as a negative number.\n  if (sideWeightKg > 0) {\n    loading.push({ weightAny: -sideWeightKg, isAlreadyLoaded: false });\n  }\n  return loading;\n};\n\n// Helper function: like Array.findIndex(), but starting from a specific index.\nconst findWeightFrom = (loading: Array<LoadedPlate>, startFrom: number, weight: number): number => {\n  for (let i = startFrom; i < loading.length; i++) {\n    if (loading[i].weightAny === weight) return i;\n  }\n  return -1;\n};\n\n// Sets the 'isAlreadyLoaded' property of each LoadedPlate relative to another loading.\n//\n// Both 'loading' and 'relativeTo' are sorted in non-ascending order of weight.\nexport const makeLoadingRelative = (loading: Array<LoadedPlate>, relativeTo: Array<LoadedPlate>): void => {\n  let finger = 0; // Increasing index into the relativeTo array.\n\n  // For each plate in the loading, look for a matching plate in relativeTo[finger..].\n  // When found, move the finger past that point.\n  for (let i = 0; i < loading.length; i++) {\n    let loadedPlate = loading[i];\n    const index = findWeightFrom(relativeTo, finger, loadedPlate.weightAny);\n    if (index >= 0) {\n      finger = index + 1;\n      loadedPlate.isAlreadyLoaded = true;\n    }\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines operations for converting between different units, usually\n// pounds and kg.\n\nexport const kg2lbs = (kg: number): number => {\n  return kg * 2.20462262;\n};\n\nexport const lbs2kg = (lbs: number): number => {\n  return lbs / 2.20462262;\n};\n\n// Renders a weight (kg or lbs) for display, rounding to one decimal place.\nexport const displayWeight = (weight: number): string => {\n  return weight.toFixed(1).replace(\".0\", \"\");\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// This is the widget that gives a visual display of the weights on the bar,\n// used by the loading crew.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { displayWeight } from \"../../logic/units\";\n\nimport type { Lift, LoadedPlate } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\nimport styles from \"./BarLoad.module.scss\";\n\ninterface OwnProps {\n  loading: Array<LoadedPlate>;\n  rackInfo: string;\n}\n\ninterface StateProps {\n  lift: Lift;\n}\n\ntype Props = OwnProps & StateProps;\n\nclass BarLoad extends React.Component<Props> {\n  weightKgToStyle = (weightKg: number): any => {\n    switch (weightKg) {\n      case 50:\n        return styles.kg50;\n      case 25:\n        return styles.kg25;\n      case 20:\n        return styles.kg20;\n      case 15:\n        return styles.kg15;\n      case 10:\n        return styles.kg10;\n      case 5:\n        return styles.kg5;\n      case 2.5:\n        return styles.kg2p5;\n      case 1.25:\n        return styles.kg1p25;\n      case 1:\n        return styles.kg1;\n      case 0.75:\n        return styles.kg0p75;\n      case 0.5:\n        return styles.kg0p5;\n      case 0.25:\n        return styles.kg0p25;\n      default:\n        return styles.error;\n    }\n  };\n\n  weightKgToText = (weightKg: number): string => {\n    switch (weightKg) {\n      case 1.25:\n        return \"1¼\";\n      case 0.75:\n        return \"¾\";\n      case 0.5:\n        return \"½\";\n      case 0.25:\n        return \"¼\";\n      default:\n        return String(weightKg);\n    }\n  };\n\n  // Turns the selectPlatesKg() array into divs.\n  renderKgPlates = () => {\n    const plates: Array<LoadedPlate> = this.props.loading;\n\n    let divs = [];\n    let i = 0;\n\n    // Iterate on a group of plates of the same weight at a time.\n    while (i < plates.length) {\n      const weightKg = plates[i].weightAny;\n\n      // If the weight is negative, it's an error report.\n      if (weightKg < 0) {\n        divs.push(\n          <div key={\"error\"} className={styles.error}>\n            ?{displayWeight(-1 * weightKg)}\n          </div>\n        );\n        break;\n      }\n\n      // Count how many times this same plate kind appears consecutively.\n      let plateCount = 1;\n      for (let j = i + 1; j < plates.length && plates[j].weightAny === weightKg; j++) {\n        plateCount++;\n      }\n\n      // If that plate is large and occurs a bunch, show a counter.\n      const showCounter = plateCount >= 3;\n\n      // Push each of the plates individually.\n      for (let j = 0; j < plateCount; j++) {\n        const plate = plates[i + j];\n        const counter = String(j + 1);\n        divs.push(\n          <div\n            key={weightKg + \"-\" + counter}\n            className={this.weightKgToStyle(weightKg)}\n            style={plate.isAlreadyLoaded ? { opacity: 0.25 } : {}}\n          >\n            <div>{this.weightKgToText(weightKg)}</div>\n            {showCounter ? <div>{counter}</div> : null}\n          </div>\n        );\n      }\n\n      i += plateCount;\n    }\n\n    return divs;\n  };\n\n  render() {\n    // Only show rack info for lifts that use a rack.\n    let rackInfo = null;\n    if (this.props.lift !== \"D\") {\n      rackInfo = (\n        <div key={this.props.rackInfo} className={styles.rackInfo}>\n          Rack {this.props.rackInfo}\n        </div>\n      );\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.bar} />\n        {this.renderKgPlates()}\n        <div className={styles.collar} />\n        <div className={styles.bar} />\n        {rackInfo}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    lift: state.lifting.lift\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(BarLoad);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The left panel on the lifting page, showing information about the current lifter\n// and helpful information for the loading crew.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { selectPlatesKg, makeLoadingRelative } from \"../../logic/barLoad\";\nimport { liftToAttemptFieldName } from \"../../logic/entry\";\nimport { kg2lbs, displayWeight } from \"../../logic/units\";\n\nimport BarLoad from \"./BarLoad\";\n\nimport styles from \"./LeftPanel.module.scss\";\n\nimport type { Entry, LoadedPlate, PlatePairCount } from \"../../types/dataTypes\";\nimport type { GlobalState, LiftingState, RegistrationState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId?: number;\n  nextEntryId?: number;\n  nextAttemptOneIndexed?: number;\n}\n\ninterface StateProps {\n  inKg: boolean;\n  barAndCollarsWeightKg: number;\n  platePairCounts: Array<PlatePairCount>;\n  registration: RegistrationState;\n  lifting: LiftingState;\n}\n\ntype Props = OwnProps & StateProps;\n\ninterface BarLoadOptions {\n  weightKg: number;\n  weightLbs: number;\n  rackInfo: string;\n}\n\nclass LeftPanel extends React.Component<Props> {\n  getBarLoadProps = (entryId?: number, attemptOneIndexed?: number): BarLoadOptions => {\n    const lift = this.props.lifting.lift;\n    const fieldKg = liftToAttemptFieldName(lift);\n\n    // Defaults, in case of no lifter.\n    if (entryId === null || entryId === undefined || attemptOneIndexed === null || attemptOneIndexed === undefined) {\n      return { weightKg: 0, weightLbs: 0, rackInfo: \"\" };\n    }\n\n    const idx = this.props.registration.lookup[entryId];\n    const entry = this.props.registration.entries[idx];\n\n    const weightKg = entry[fieldKg][attemptOneIndexed - 1];\n    const weightLbs = kg2lbs(weightKg);\n\n    let rackInfo = \"\";\n    if (lift === \"S\") rackInfo = entry.squatRackInfo;\n    if (lift === \"B\") rackInfo = entry.benchRackInfo;\n\n    return { weightKg, weightLbs, rackInfo };\n  };\n\n  render() {\n    const current = this.getBarLoadProps(this.props.currentEntryId, this.props.attemptOneIndexed);\n    const next = this.getBarLoadProps(this.props.nextEntryId, this.props.nextAttemptOneIndexed);\n\n    // Show one decimal point, and omit it if possible.\n    const weightKgText = displayWeight(current.weightKg);\n    const weightLbsText = displayWeight(current.weightLbs);\n\n    // Calculate both loadings.\n    const currentLoading: Array<LoadedPlate> = selectPlatesKg(\n      current.weightKg,\n      this.props.barAndCollarsWeightKg,\n      this.props.platePairCounts\n    );\n    const nextLoading: Array<LoadedPlate> = selectPlatesKg(\n      next.weightKg,\n      this.props.barAndCollarsWeightKg,\n      this.props.platePairCounts\n    );\n\n    // Set the next loading relative to the current loading.\n    if (next.weightKg >= current.weightKg) {\n      makeLoadingRelative(nextLoading, currentLoading);\n    }\n\n    const nextBarLoad =\n      next.weightKg === 0 ? null : (\n        <div className={styles.loadingBar}>\n          <div className={styles.nextCard}>\n          <div className={styles.nextText}>NEXT UP</div>\n          <div className={styles.barArea}>\n            <BarLoad key={String(next.weightKg) + next.rackInfo} loading={nextLoading} rackInfo={next.rackInfo} />\n          </div>\n          </div>\n        </div>\n      );\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.activeCard}>\n          <div className={styles.loadingBar}>\n            <div className={styles.attemptText}>\n              {weightKgText}kg / {weightLbsText}lb\n            </div>\n            <div className={styles.barArea}>\n              <BarLoad\n                key={String(current.weightKg) + current.rackInfo}\n                loading={currentLoading}\n                rackInfo={current.rackInfo}\n              />\n            </div>\n          </div>\n        </div>\n        {nextBarLoad}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    inKg: state.meet.inKg,\n    barAndCollarsWeightKg: state.meet.barAndCollarsWeightKg,\n    platePairCounts: state.meet.platePairCounts,\n    registration: state.registration,\n    lifting: state.lifting\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LeftPanel);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// An editable component for attempt manipulation in the LiftingContent.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { FormControl, FormGroup } from \"react-bootstrap\";\n\nimport { liftToAttemptFieldName, liftToStatusFieldName } from \"../../logic/entry\";\nimport { enterAttempt } from \"../../actions/liftingActions\";\n\nimport type { Entry, Lift } from \"../../types/dataTypes\";\n\nimport styles from \"./LiftingTable.module.scss\";\n\ninterface OwnProps {\n  entry: Entry;\n  lift: Lift;\n  attemptOneIndexed: number;\n}\n\ninterface DispatchProps {\n  enterAttempt: (entryId: number, lift: Lift, attemptOneIndexed: number, weightKg: number) => any;\n}\n\ntype Props = OwnProps & DispatchProps;\n\ninterface InternalState {\n  initialValue: string;\n  value: string;\n}\n\nclass AttemptInput extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    const fieldKg = liftToAttemptFieldName(this.props.lift);\n    const weightKg: number = this.props.entry[fieldKg][this.props.attemptOneIndexed - 1];\n\n    let weightStr = \"\";\n    if (weightKg !== 0) {\n      weightStr = String(weightKg);\n    }\n\n    this.state = {\n      initialValue: weightStr,\n      value: weightStr\n    };\n  }\n\n  getValidationState() {\n    const { value } = this.state;\n    if (value === \"\") return null;\n\n    // Check that the input is a number.\n    const asNumber = Number(value);\n    if (isNaN(asNumber)) return \"error\";\n    if (!isFinite(asNumber)) return \"error\";\n    if (asNumber < 0) return \"error\";\n\n    if (asNumber % 2.5 !== 0) return \"warning\";\n\n    // The bar weight must be monotonically increasing between attempts.\n    if (this.props.attemptOneIndexed > 1) {\n      const entry = this.props.entry;\n      const fieldKg = liftToAttemptFieldName(this.props.lift);\n      const fieldStatus = liftToStatusFieldName(this.props.lift);\n\n      const prevAttemptOneIndexed = this.props.attemptOneIndexed - 1;\n      const prevKg = entry[fieldKg][prevAttemptOneIndexed - 1];\n      const prevStatus = entry[fieldStatus][prevAttemptOneIndexed - 1];\n\n      // The previous weight cannot be greater than the current weight.\n      if (prevKg > asNumber) return \"warning\";\n\n      // However, they can be equal if the previous attempt was failed.\n      if (prevKg === asNumber && prevStatus !== -1) return \"warning\";\n    }\n\n    return null;\n  }\n\n  handleKeyDown = event => {\n    if (event.key === \"Enter\") {\n      event.target.blur();\n    }\n  };\n\n  handleChange = event => {\n    const value = event.target.value;\n    let fixups = value.replace(\",\", \".\").replace(\" \", \"\");\n\n    // Dvorak \"e\" corresponds to QWERTY \".\", but also is used in exponential\n    // notation, which is a fairly impactful typo.\n    fixups = value.replace(\"e\", \".\");\n\n    this.setState({ value: fixups });\n  };\n\n  handleBlur = event => {\n    if (this.getValidationState() === \"error\") {\n      this.setState({ value: this.state.initialValue });\n      return;\n    }\n\n    const entryId = this.props.entry.id;\n    const lift = this.props.lift;\n    const attemptOneIndexed = this.props.attemptOneIndexed;\n    const weightKg = Number(this.state.value);\n\n    this.props.enterAttempt(entryId, lift, attemptOneIndexed, weightKg);\n  };\n\n  render() {\n    return (\n      <FormGroup validationState={this.getValidationState()} style={{ marginBottom: 0 }}>\n        <FormControl\n          type=\"text\"\n          placeholder=\"\"\n          value={this.state.value}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n          className={styles.attemptInput}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    enterAttempt: (entryId, lift, attemptOneIndexed, weightKg) =>\n      dispatch(enterAttempt(entryId, lift, attemptOneIndexed, weightKg))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(AttemptInput);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the logic for calculating the division Place of a lifter, shared between\n// the Lifting page, the Rankings page, and data export code.\n//\n// The algorithm used is particularly bad -- the foremost goal was to make an interface\n// that allowed for maximum code reuse between the Rankings and Lifting pages,\n// which have slightly different needs.\n\nimport { getProjectedEventTotalKg, getFinalEventTotalKg } from \"./entry\";\nimport { getWeightClassStr } from \"../reducers/meetReducer\";\n\nimport type { Sex, Event, Equipment, Entry } from \"../types/dataTypes\";\n\nexport type Place = number | \"DQ\";\n\n// Determines how the total is calculated.\ntype ResultsType = \"Projected\" | \"Final\";\n\n// Specifies a competition category under which entries can be ranked together.\nexport type Category = {\n  sex: Sex,\n  event: Event,\n  equipment: Equipment,\n  division: string,\n  weightClassStr: string\n};\n\n// Wraps up all the entries in a category with the category's descriptors.\nexport type CategoryResults = {\n  category: Category,\n  orderedEntries: Array<Entry>\n};\n\n// Generates a unique String out of a Category, for purposes of using as a Map key.\nconst categoryToKey = (category: Category): string => {\n  return JSON.stringify(category);\n};\nconst keyToCategory = (key: string): Category => {\n  return JSON.parse(key);\n};\n\n// Returns a copy of the entries array sorted by Place.\n// All entries are assumed to be part of the same category.\nconst sortByPlaceInCategory = (entries: Array<Entry>, category: Category, type: ResultsType): Array<Entry> => {\n  const event = category.event;\n\n  // Clone the entries array to avoid modifying the original.\n  let clonedEntries = entries.slice();\n\n  // Sort in the given category, first place having the lowest index.\n  clonedEntries.sort((a, b) => {\n    // First sort by Total, higher sorting lower.\n    if (type === \"Projected\") {\n      const aTotal = getProjectedEventTotalKg(a, event);\n      const bTotal = getProjectedEventTotalKg(b, event);\n      if (aTotal !== bTotal) return bTotal - aTotal;\n    } else if (type === \"Final\") {\n      const aTotal = getFinalEventTotalKg(a, event);\n      const bTotal = getFinalEventTotalKg(b, event);\n      if (aTotal !== bTotal) return bTotal - aTotal;\n    }\n\n    // If totals are equal, sort by Bodyweight, lower sorting lower.\n    if (a.bodyweightKg !== b.bodyweightKg) return a.bodyweightKg - b.bodyweightKg;\n\n    // TODO: Breaking totals after this point is based on which lifter achieved\n    // that total first... but that requires reusing the comparison code that\n    // determines the lifting order. See Issue #65.\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n  });\n\n  return clonedEntries;\n};\n\n// Determines the sort order by Event.\nconst getEventSortOrder = (ev: Event): number => {\n  return [\"SBD\", \"BD\", \"SB\", \"SD\", \"S\", \"B\", \"D\"].indexOf(ev);\n};\n\n// Determines the sort order by Equipment.\nconst getEquipmentSortOrder = (eq: Equipment): number => {\n  return [\"Bare\", \"Sleeves\", \"Wraps\", \"Single-ply\", \"Multi-ply\"].indexOf(eq);\n};\n\n// Determines the sort order by Sex.\nconst getSexSortOrder = (sex: Sex): number => {\n  switch (sex) {\n    case \"F\":\n      return 0;\n    case \"M\":\n      return 1;\n    case \"Mx\":\n      return 2;\n    default:\n      (sex: empty) // eslint-disable-line\n      return 3;\n  }\n};\n\n// Determines the sort (and therefore presentation) order for the Category Results.\n// The input array is sorted in-place; nothing is returned.\nexport const sortCategoryResults = (results: Array<CategoryResults>) => {\n  results.sort((a, b) => {\n    const catA = a.category;\n    const catB = b.category;\n\n    // First, sort by Sex.\n    const aSex = getSexSortOrder(catA.sex);\n    const bSex = getSexSortOrder(catB.sex);\n    if (aSex !== bSex) return aSex - bSex;\n\n    // Next, sort by Event.\n    const aEvent = getEventSortOrder(catA.event);\n    const bEvent = getEventSortOrder(catB.event);\n    if (aEvent !== bEvent) return aEvent - bEvent;\n\n    // Next, sort by Equipment.\n    const aEquipment = getEquipmentSortOrder(catA.equipment);\n    const bEquipment = getEquipmentSortOrder(catB.equipment);\n    if (aEquipment !== bEquipment) return aEquipment - bEquipment;\n\n    // Next, sort by WeightClass.\n    // parseInt() ignores the \"+\" at the end of SHW class strings.\n    const aWeightClass = parseInt(catA.weightClassStr);\n    const bWeightClass = parseInt(catB.weightClassStr);\n    if (aWeightClass !== bWeightClass) return aWeightClass - bWeightClass;\n\n    // Finally, sort by Division as string.\n    if (catA.division < catB.division) return -1;\n    if (catA.division > catB.division) return 1;\n    return 0; // Shouldn't happen!\n  });\n};\n\nconst mapSexToClasses = (sex: Sex, men: Array<number>, women: Array<number>, mx: Array<number>): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return men;\n    case \"F\":\n      return women;\n    case \"Mx\":\n      return mx;\n    default:\n      (sex: empty) // eslint-disable-line\n      return men;\n  }\n};\n\n// Generates objects representing every present category of competition,\n// with each entry given a Place designation.\n//\n// The returned objects are sorted in intended order of presentation.\nconst getAllResults = (\n  entries: Array<Entry>,\n  weightClassesKgMen: Array<number>,\n  weightClassesKgWomen: Array<number>,\n  weightClassesKgMx: Array<number>,\n  combineSleevesAndWraps: boolean,\n  type: ResultsType\n): Array<CategoryResults> => {\n  // Generate a map from category to the entries within that category.\n  // The map is populated by iterating over each entry and having the entry\n  // append itself to per-category lists.\n  let categoryMap = new Map();\n  for (let i = 0; i < entries.length; i++) {\n    const e = entries[i];\n\n    // Remember consistent properties.\n    const sex = e.sex;\n    const classesForSex = mapSexToClasses(sex, weightClassesKgMen, weightClassesKgWomen, weightClassesKgMx);\n    const weightClassStr = getWeightClassStr(classesForSex, e.bodyweightKg);\n\n    // If the results combine Sleeves and Wraps, promote Sleeves to Wraps.\n    let equipment = e.equipment;\n    if (combineSleevesAndWraps && equipment === \"Sleeves\") {\n      equipment = \"Wraps\";\n    }\n\n    // Iterate over every combination of division and event, adding to the map.\n    for (let dividx = 0; dividx < e.divisions.length; dividx++) {\n      const division = e.divisions[dividx];\n\n      for (let evidx = 0; evidx < e.events.length; evidx++) {\n        const event = e.events[evidx];\n        const category = { sex, event, equipment, division, weightClassStr };\n        const key = categoryToKey(category);\n\n        const catEntries = categoryMap.get(key);\n        catEntries === undefined ? categoryMap.set(key, [e]) : catEntries.push(e);\n      }\n    }\n  }\n\n  // Iterate over each category and assign a Place to the entries therein.\n  let results = [];\n  for (let [key, catEntries] of categoryMap) {\n    const category = keyToCategory(key);\n    const orderedEntries = sortByPlaceInCategory(catEntries, category, type);\n    results.push({ category, orderedEntries });\n  }\n\n  sortCategoryResults(results);\n  return results;\n};\n\nexport const getProjectedResults = (\n  entries: Array<Entry>,\n  weightClassesKgMen: Array<number>,\n  weightClassesKgWomen: Array<number>,\n  weightClassesKgMx: Array<number>,\n  combineSleevesAndWraps: boolean\n): Array<CategoryResults> => {\n  return getAllResults(\n    entries,\n    weightClassesKgMen,\n    weightClassesKgWomen,\n    weightClassesKgMx,\n    combineSleevesAndWraps,\n    \"Projected\"\n  );\n};\n\nexport const getFinalResults = (\n  entries: Array<Entry>,\n  weightClassesKgMen: Array<number>,\n  weightClassesKgWomen: Array<number>,\n  weightClassesKgMx: Array<number>,\n  combineSleevesAndWraps: boolean\n): Array<CategoryResults> => {\n  return getAllResults(\n    entries,\n    weightClassesKgMen,\n    weightClassesKgWomen,\n    weightClassesKgMx,\n    combineSleevesAndWraps,\n    \"Final\"\n  );\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The main component of the Lifting page, contained by the LiftingView.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport AttemptInput from \"./AttemptInput\";\n\nimport { getWeightClassStr } from \"../../reducers/meetReducer\";\nimport {\n  getProjectedTotalKg,\n  getFinalTotalKg,\n  getProjectedWilks,\n  getFinalWilks,\n  getProjectedIPFPoints,\n  getFinalIPFPoints,\n  getProjectedBodyweightMultiple,\n  getFinalBodyweightMultiple,\n  getProjectedGlossbrenner,\n  getFinalGlossbrenner,\n  getProjectedNASAPoints,\n  getFinalNASAPoints,\n  getProjectedSchwartzMalone,\n  getFinalSchwartzMalone,\n  liftToAttemptFieldName,\n  liftToStatusFieldName\n} from \"../../logic/entry\";\n\nimport { getProjectedResults, getFinalResults } from \"../../logic/divisionPlace\";\nimport type { CategoryResults } from \"../../logic/divisionPlace\";\n\nimport type { Entry, Sex } from \"../../types/dataTypes\";\nimport type { GlobalState, MeetState, LiftingState } from \"../../types/stateTypes\";\n\nimport styles from \"./LiftingTable.module.scss\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId?: number;\n}\n\ninterface StateProps {\n  meet: MeetState;\n  lifting: LiftingState;\n}\n\ntype Props = OwnProps & StateProps;\n\n// List of possible columns that can be rendered.\n// The main render() function decides what columns to render,\n// and communicates its selection with each row's renderer.\ntype ColumnType =\n  | \"Name\"\n  | \"Bodyweight\"\n  | \"WeightClass\"\n  | \"Division\"\n  | \"Equipment\"\n  | \"Age\"\n  | \"S1\" | \"S2\" | \"S3\" | \"S4\" // eslint-disable-line\n  | \"B1\" | \"B2\" | \"B3\" | \"B4\" // eslint-disable-line\n  | \"D1\" | \"D2\" | \"D3\" | \"D4\" // eslint-disable-line\n  | \"BestSquat\" | \"BestBench\" // eslint-disable-line\n  | \"Spacer\"\n  | \"ProjectedTotal\"\n  | \"ProjectedPoints\"\n  | \"FinalTotal\"\n  | \"FinalPoints\"\n  | \"Place\";\n\nclass LiftingTable extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n    this.renderRows = this.renderRows.bind(this);\n  }\n\n  renderBest3AttemptField(entry, lift, columnType: ColumnType) {\n    const fieldKg = liftToAttemptFieldName(lift);\n    const fieldStatus = liftToStatusFieldName(lift);\n\n    // Look for either the best lift or the lightest no-lift.\n    let best3 = 0.0;\n    let lightestFailed = 0.0;\n\n    for (let i = 0; i < 3; i++) {\n      const kg = entry[fieldKg][i];\n\n      if (entry[fieldStatus][i] === 1) {\n        best3 = Math.max(best3, kg);\n      } else if (entry[fieldStatus][i] === -1) {\n        lightestFailed = lightestFailed === 0 ? kg : Math.min(lightestFailed, kg);\n      }\n    }\n\n    // Render cells using attempt coloring.\n    if (best3 !== 0) {\n      return (\n        <td key={columnType} className={styles.goodlift}>\n          {best3}\n        </td>\n      );\n    }\n    if (lightestFailed !== 0) {\n      return (\n        <td key={columnType} className={styles.nolift}>\n          {lightestFailed}\n        </td>\n      );\n    }\n\n    // Show an empty cell by default.\n    return <td key={columnType} />;\n  }\n\n  renderAttemptField(entry, lift, attemptOneIndexed: number, columnType: ColumnType) {\n    const fieldKg = liftToAttemptFieldName(lift);\n    const fieldStatus = liftToStatusFieldName(lift);\n\n    const kg = entry[fieldKg][attemptOneIndexed - 1];\n    const status = entry[fieldStatus][attemptOneIndexed - 1];\n\n    // If the lifter was manually selected, always show an AttemptInput.\n    // This allows manual correction of weights when a misload occurs,\n    // even though the lift has already been marked good lift / no lift.\n    if (this.props.lifting.overrideEntryId === entry.id && attemptOneIndexed === this.props.attemptOneIndexed) {\n      return (\n        <td key={columnType} className={styles.attemptInputCell}>\n          <AttemptInput entry={entry} lift={lift} attemptOneIndexed={attemptOneIndexed} />\n        </td>\n      );\n    }\n\n    // If the attempt was already made, render a colored text field.\n    // The weight cannot be changed after the fact.\n    if (status !== 0) {\n      const className = status === 1 ? styles.goodlift : styles.nolift;\n      const maybeNegative = status === 1 ? \"\" : \"-\";\n      return (\n        <td key={columnType} className={className}>\n          {maybeNegative}\n          {kg}\n        </td>\n      );\n    }\n\n    // If the attempt isn't for the current lift, just show the number.\n    if (lift !== this.props.lifting.lift) {\n      const kgStr = kg === 0 ? \"\" : String(kg);\n      return <td key={columnType}>{kgStr}</td>;\n    }\n\n    // Was any previous attempt taken?\n    let anyPreviousAttemptTaken = false;\n    for (var i = 1; i < attemptOneIndexed; i++) {\n      if (entry[fieldStatus][i - 1] !== 0) {\n        anyPreviousAttemptTaken = true;\n        break;\n      }\n    }\n\n    // Show a text input box if either:\n    // 1. This column is for the current attempt, and the lifter has a previous attempt.\n    // 2. This column is for the next attempt, and the lifter took the current attempt.\n    // 3. For whatever reason, someone managed to specify a weight.\n    const currentAndHasPrevious = attemptOneIndexed === this.props.attemptOneIndexed && anyPreviousAttemptTaken;\n    const nextAndTookLast =\n      attemptOneIndexed === this.props.attemptOneIndexed + 1 &&\n      entry[fieldStatus][this.props.attemptOneIndexed - 1] !== 0;\n\n    if (kg !== 0 || currentAndHasPrevious || nextAndTookLast) {\n      return (\n        <td key={columnType} className={styles.attemptInputCell}>\n          <AttemptInput entry={entry} lift={lift} attemptOneIndexed={attemptOneIndexed} />\n        </td>\n      );\n    }\n\n    // Default handler.\n    const kgStr = kg === 0 ? \"\" : String(kg);\n    return <td key={columnType}>{kgStr}</td>;\n  }\n\n  mapSexToClasses = (sex: Sex, meetState: MeetState): Array<number> => {\n    switch (sex) {\n      case \"M\":\n        return meetState.weightClassesKgMen;\n      case \"F\":\n        return meetState.weightClassesKgWomen;\n      case \"Mx\":\n        return meetState.weightClassesKgMx;\n      default:\n        (sex: empty) // eslint-disable-line\n        return meetState.weightClassesKgMen;\n    }\n  };\n\n  renderCell = (entry: Object, columnType: ColumnType, categoryResults: Array<CategoryResults>) => {\n    switch (columnType) {\n      case \"Name\":\n        return (\n          <td key={columnType} className={styles.textCell}>\n            {entry.name}\n          </td>\n        );\n      case \"Bodyweight\": {\n        const bw = entry.bodyweightKg;\n        return <td key={columnType}>{bw === 0 ? null : bw}</td>;\n      }\n      case \"WeightClass\": {\n        const bw = entry.bodyweightKg;\n        const classesForSex = this.mapSexToClasses(entry.sex, this.props.meet);\n        const weightClass = getWeightClassStr(classesForSex, bw);\n        return <td key={columnType}>{bw === 0 ? null : weightClass}</td>;\n      }\n      case \"Division\": {\n        // Just show the first division in the list, if any.\n        // Changing this requires coordination with the \"Place\" column code.\n        const firstDiv = entry.divisions.length > 0 ? entry.divisions[0] : null;\n        return (\n          <td key={columnType} className={styles.textCell}>\n            {firstDiv}\n          </td>\n        );\n      }\n      case \"Equipment\": {\n        // Use shorter names to actually fit in the table.\n        let equipment = entry.equipment;\n        if (equipment === \"Single-ply\") equipment = \"Single\";\n        if (equipment === \"Multi-ply\") equipment = \"Multi\";\n        return <td key={columnType}>{equipment}</td>;\n      }\n      case \"Age\":\n        return <td key={columnType}>{entry.age}</td>;\n      case \"S1\":\n        return this.renderAttemptField(entry, \"S\", 1, columnType);\n      case \"S2\":\n        return this.renderAttemptField(entry, \"S\", 2, columnType);\n      case \"S3\":\n        return this.renderAttemptField(entry, \"S\", 3, columnType);\n      case \"S4\":\n        return this.renderAttemptField(entry, \"S\", 4, columnType);\n      case \"B1\":\n        return this.renderAttemptField(entry, \"B\", 1, columnType);\n      case \"B2\":\n        return this.renderAttemptField(entry, \"B\", 2, columnType);\n      case \"B3\":\n        return this.renderAttemptField(entry, \"B\", 3, columnType);\n      case \"B4\":\n        return this.renderAttemptField(entry, \"B\", 4, columnType);\n      case \"D1\":\n        return this.renderAttemptField(entry, \"D\", 1, columnType);\n      case \"D2\":\n        return this.renderAttemptField(entry, \"D\", 2, columnType);\n      case \"D3\":\n        return this.renderAttemptField(entry, \"D\", 3, columnType);\n      case \"D4\":\n        return this.renderAttemptField(entry, \"D\", 4, columnType);\n      case \"BestSquat\":\n        return this.renderBest3AttemptField(entry, \"S\", columnType);\n      case \"BestBench\":\n        return this.renderBest3AttemptField(entry, \"B\", columnType);\n      case \"Spacer\":\n        return <td key={columnType} className={styles.spacerCell} />;\n      case \"ProjectedTotal\": {\n        const totalKg = getProjectedTotalKg(entry);\n        return <td key={columnType}>{totalKg !== 0 ? totalKg : null}</td>;\n      }\n      case \"ProjectedPoints\": {\n        let points = 0;\n        if (this.props.meet.formula === \"Glossbrenner\") {\n          points = getProjectedGlossbrenner(entry);\n        } else if (this.props.meet.formula === \"IPF Points\") {\n          const event = entry.events.length > 0 ? entry.events[0] : \"SBD\";\n          points = getProjectedIPFPoints(entry, event);\n        } else if (this.props.meet.formula === \"Wilks\") {\n          points = getProjectedWilks(entry);\n        } else if (this.props.meet.formula === \"Schwartz/Malone\") {\n          points = getProjectedSchwartzMalone(entry);\n        } else if (this.props.meet.formula === \"NASA Points\") {\n          points = getProjectedNASAPoints(entry);\n        } else if (this.props.meet.formula === \"Bodyweight Multiple\") {\n          points = getProjectedBodyweightMultiple(entry);\n        }\n        return <td key={columnType}>{points !== 0 ? points.toFixed(2) : null}</td>;\n      }\n      case \"FinalTotal\": {\n        const totalKg = getFinalTotalKg(entry);\n        return <td key={columnType}>{totalKg !== 0 ? totalKg : null}</td>;\n      }\n      case \"FinalPoints\": {\n        let points = 0;\n        if (this.props.meet.formula === \"Glossbrenner\") {\n          points = getFinalGlossbrenner(entry);\n        } else if (this.props.meet.formula === \"IPF Points\") {\n          const event = entry.events.length > 0 ? entry.events[0] : \"SBD\";\n          points = getFinalIPFPoints(entry, event);\n        } else if (this.props.meet.formula === \"Wilks\") {\n          points = getFinalWilks(entry);\n        } else if (this.props.meet.formula === \"Schwartz/Malone\") {\n          points = getFinalSchwartzMalone(entry);\n        } else if (this.props.meet.formula === \"NASA Points\") {\n          points = getFinalNASAPoints(entry);\n        } else if (this.props.meet.formula === \"Bodyweight Multiple\") {\n          points = getFinalBodyweightMultiple(entry);\n        }\n        return <td key={columnType}>{points !== 0 ? points.toFixed(2) : null}</td>;\n      }\n      case \"Place\": {\n        // If the lifter has no total, then don't report a place.\n        if (getFinalTotalKg(entry) === 0) return <td key={columnType} />;\n\n        // Just show the Place from the first division in the list.\n        // This is the same division as shown in the \"Division\" column.\n        if (entry.divisions.length === 0) return <td key={columnType} />;\n        const firstDiv = entry.divisions[0];\n\n        // Look at all the categories, and find the first one including this division\n        // and entry. Because the categories are in sorted order, SBD takes priority\n        // over B by default.\n        for (let i = 0; i < categoryResults.length; i++) {\n          const result = categoryResults[i];\n          if (result.category.division !== firstDiv) {\n            continue;\n          }\n\n          const catEntries = result.orderedEntries;\n          for (let j = 0; j < catEntries.length; j++) {\n            const catEntry = catEntries[j];\n\n            if (catEntry.id === entry.id) {\n              return <td key={columnType}>{j + 1}</td>;\n            }\n          }\n        }\n\n        return <td key={columnType} />; // Shouldn't happen.\n      }\n      default:\n        (columnType: empty); // eslint-disable-line\n        return <td key={columnType} />;\n    }\n  };\n\n  renderRows = (columns: Array<ColumnType>, categoryResults: Array<CategoryResults>) => {\n    const orderedEntries = this.props.orderedEntries;\n    const currentEntryId = this.props.currentEntryId;\n\n    let rows = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const entry = orderedEntries[i];\n\n      // Iterate over each columnType, handling each.\n      let cells = [];\n      for (let col = 0; col < columns.length; col++) {\n        const columnType = columns[col];\n        cells.push(this.renderCell(entry, columnType, categoryResults));\n      }\n\n      const isCurrent = entry.id === currentEntryId;\n      const rowClassName = isCurrent ? styles.current : \"\";\n      rows.push(\n        <tr key={entry.id} className={rowClassName}>\n          {cells}\n        </tr>\n      );\n    }\n    return rows;\n  };\n\n  getColumnHeaderString = (columnType: ColumnType): string => {\n    switch (columnType) {\n      case \"Name\":\n        return \"Name\";\n      case \"Bodyweight\":\n        return \"Bwt\";\n      case \"WeightClass\":\n        return \"Class\";\n      case \"Division\":\n        return \"Division\";\n      case \"Equipment\":\n        return \"Equip\";\n      case \"Age\":\n        return \"Age\";\n      case \"S1\":\n        return \"FS1\";\n      case \"S2\":\n        return \"FS2\";\n      case \"S3\":\n        return \"FS3\";\n      case \"S4\":\n        return \"FS4\";\n      case \"B1\":\n        return \"B1\";\n      case \"B2\":\n        return \"B2\";\n      case \"B3\":\n        return \"B3\";\n      case \"B4\":\n        return \"B4\";\n      case \"D1\":\n        return \"D1\";\n      case \"D2\":\n        return \"D2\";\n      case \"D3\":\n        return \"D3\";\n      case \"D4\":\n        return \"D4\";\n      case \"BestSquat\":\n        return \"Squat\";\n      case \"BestBench\":\n        return \"Bench\";\n      case \"Spacer\":\n        return \"\";\n      case \"ProjectedTotal\":\n        return \"Total\";\n      case \"ProjectedPoints\":\n        return \"Points\";\n      case \"FinalTotal\":\n        return \"Total\";\n      case \"FinalPoints\":\n        return \"Points\";\n      case \"Place\":\n        return \"Place\";\n      default:\n        (columnType: empty); // eslint-disable-line\n        return \"\";\n    }\n  };\n\n  render() {\n    // Select the columns for display.\n    let columns: Array<ColumnType> = [\"Name\", \"Division\", \"Bodyweight\", \"WeightClass\", \"S1\", \"S2\", \"S3\", \"FinalPoints\", \"Place\"];\n\n    let useProjected = false;\n\n    // Build headers.\n    let headers = [];\n    for (let i = 0; i < columns.length; i++) {\n      const column = columns[i];\n      let className = styles.smallCell;\n      if (column === \"Name\") className = styles.nameCell;\n      else if (column === \"Division\") className = styles.divisionCell;\n      else if (column === \"Spacer\") className = styles.spacerCell;\n\n      headers.push(\n        <th key={column} className={className}>\n          {this.getColumnHeaderString(column)}\n        </th>\n      );\n    }\n\n    // Calculate the Division placings for each of the lifters.\n    const categoryResults = useProjected\n      ? getProjectedResults(\n          this.props.orderedEntries,\n          this.props.meet.weightClassesKgMen,\n          this.props.meet.weightClassesKgWomen,\n          this.props.meet.weightClassesKgMx,\n          this.props.meet.combineSleevesAndWraps\n        )\n      : getFinalResults(\n          this.props.orderedEntries,\n          this.props.meet.weightClassesKgMen,\n          this.props.meet.weightClassesKgWomen,\n          this.props.meet.weightClassesKgMx,\n          this.props.meet.combineSleevesAndWraps\n        );\n\n    return (\n      <table className={styles.liftingtable}>\n        <thead>\n          <tr>{headers}</tr>\n        </thead>\n        <tbody>{this.renderRows(columns, categoryResults)}</tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    meet: state.meet,\n    lifting: state.lifting\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LiftingTable);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The footer of the Lifting page, contained by the LiftingView.\n// This is the parent element of the controls that affect present lifting state.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { FormControl } from \"react-bootstrap\";\n\nimport { markLift, overrideAttempt, overrideEntryId, setLiftingGroup } from \"../../actions/liftingActions\";\n\nimport type { Entry, Flight } from \"../../types/dataTypes\";\nimport type { GlobalState, LiftingState } from \"../../types/stateTypes\";\n\nimport styles from \"./LiftingFooter.module.scss\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId: number | null;\n  flightsOnPlatform: Array<Flight>;\n  toggleReplaceTableWithWeighins: () => void;\n}\n\ninterface StateProps {\n  lifting: LiftingState;\n  lengthDays: number;\n  platformsOnDays: Array<number>;\n  allow4thAttempts: boolean;\n}\n\ninterface DispatchProps {\n  setLiftingGroup: any;\n  overrideAttempt: any;\n  overrideEntryId: any;\n  markLift: any;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nclass LiftingFooter extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handlePlatformChange = this.handlePlatformChange.bind(this);\n    this.handleFlightChange = this.handleFlightChange.bind(this);\n    this.handleLiftChange = this.handleLiftChange.bind(this);\n\n    this.handleGoodLift = this.handleGoodLift.bind(this);\n    this.handleNoLift = this.handleNoLift.bind(this);\n\n    this.handleAttemptChange = this.handleAttemptChange.bind(this);\n    this.handleLifterChange = this.handleLifterChange.bind(this);\n\n    this.makeLifterOptions = this.makeLifterOptions.bind(this);\n  }\n\n  handleDayChange = event => {\n    const day = Number(event.target.value);\n    const flight = this.props.lifting.flight;\n    const lift = this.props.lifting.lift;\n\n    // If the new day has fewer platforms, reset the platform selector also.\n    let platform = this.props.lifting.platform;\n    if (platform > this.props.platformsOnDays[day - 1]) {\n      platform = 1;\n    }\n\n    this.props.setLiftingGroup(day, platform, flight, lift);\n  };\n\n  handlePlatformChange = event => {\n    const day = this.props.lifting.day;\n    const platform = Number(event.target.value);\n    const flight = this.props.lifting.flight;\n    const lift = this.props.lifting.lift;\n    this.props.setLiftingGroup(day, platform, flight, lift);\n  };\n\n  handleFlightChange = event => {\n    const day = this.props.lifting.day;\n    const platform = this.props.lifting.platform;\n    const flight = event.target.value;\n    const lift = this.props.lifting.lift;\n    this.props.setLiftingGroup(day, platform, flight, lift);\n  };\n\n  handleLiftChange = event => {\n    const day = this.props.lifting.day;\n    const platform = this.props.lifting.platform;\n    const flight = this.props.lifting.flight;\n    const lift = event.target.value;\n    this.props.setLiftingGroup(day, platform, flight, lift);\n  };\n\n  handleAttemptChange = event => {\n    const attempt = Number(event.target.value);\n    this.props.overrideAttempt(attempt);\n  };\n\n  handleLifterChange = event => {\n    const entryId = Number(event.target.value);\n    this.props.overrideEntryId(entryId);\n  };\n\n  handleGoodLift = () => {\n    // If there's no active entry, there's nothing to set.\n    if (this.props.currentEntryId === null) {\n      return;\n    }\n\n    const entryId = Number(this.props.currentEntryId);\n    const lift = this.props.lifting.lift;\n    const attempt = this.props.attemptOneIndexed;\n    this.props.markLift(entryId, lift, attempt, true);\n  };\n\n  handleNoLift = () => {\n    // If there's no active entry, there's nothing to set.\n    if (this.props.currentEntryId === null) {\n      return;\n    }\n\n    const entryId = Number(this.props.currentEntryId);\n    const lift = this.props.lifting.lift;\n    const attempt = this.props.attemptOneIndexed;\n    this.props.markLift(entryId, lift, attempt, false);\n  };\n\n  handleFullscreen = () => {\n    // Document must be typecast to \"any\" because the fullscreen properties\n    // used here aren't defined in the Flow Document type definition.\n    if ((document: any).fullscreenElement !== null) {\n      (document: any).exitFullscreen();\n    } else {\n      const liftingView = document.getElementById(\"liftingView\");\n      if (liftingView !== null) {\n        liftingView.requestFullscreen();\n      }\n    }\n  };\n\n  makeLifterOptions = () => {\n    const orderedEntries = this.props.orderedEntries;\n\n    if (orderedEntries.length === 0) {\n      return (\n        <option value={0} key={0}>\n          No Lifters\n        </option>\n      );\n    }\n\n    let lifterOptions = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const entry = orderedEntries[i];\n      lifterOptions.push(\n        <option value={entry.id} key={entry.id}>\n          {entry.name}\n        </option>\n      );\n    }\n    return lifterOptions;\n  };\n\n  render() {\n    const numPlatforms = this.props.platformsOnDays[this.props.lifting.day - 1];\n\n    let dayOptions = [];\n    for (let i = 1; i <= this.props.lengthDays; i++) {\n      const label = \"Day \" + String(i);\n      dayOptions.push(\n        <option value={i} key={i}>\n          {label}\n        </option>\n      );\n    }\n\n    let platformOptions = [];\n    for (let i = 1; i <= numPlatforms; i++) {\n      platformOptions.push(\n        <option value={i} key={i}>\n          Platform {i}\n        </option>\n      );\n    }\n\n    let flightOptions = [];\n    for (let i = 0; i < this.props.flightsOnPlatform.length; i++) {\n      const flight = this.props.flightsOnPlatform[i];\n      const key = this.props.lifting.day + \"-\" + this.props.lifting.platform + \"-\" + i;\n      flightOptions.push(\n        <option value={flight} key={key}>\n          Flight {flight}\n        </option>\n      );\n    }\n\n    let attemptOptions = [];\n    for (let i = 1; i <= 3; i++) {\n      attemptOptions.push(\n        <option key={i} value={i}>\n          Attempt {i}\n        </option>\n      );\n    }\n    if (this.props.allow4thAttempts === true) {\n      attemptOptions.push(\n        <option key={4} value={4}>\n          Attempt 4\n        </option>\n      );\n    }\n\n    const currentEntryId = this.props.currentEntryId === null ? undefined : this.props.currentEntryId;\n\n    return (\n      <div className={styles.footer}>\n        <div className={styles.leftControls}>\n          <FormControl\n            componentClass=\"select\"\n            defaultValue={this.props.lifting.day}\n            onChange={this.handleDayChange}\n            className={styles.selector}\n          >\n            {dayOptions}\n          </FormControl>\n          <FormControl\n            componentClass=\"select\"\n            defaultValue={this.props.lifting.platform}\n            onChange={this.handlePlatformChange}\n            className={styles.selector}\n          >\n            {platformOptions}\n          </FormControl>\n          <FormControl\n            componentClass=\"select\"\n            defaultValue={this.props.lifting.flight}\n            onChange={this.handleFlightChange}\n            className={styles.selector}\n          >\n            {flightOptions}\n          </FormControl>\n          <FormControl\n            value={this.props.attemptOneIndexed}\n            componentClass=\"select\"\n            onChange={this.handleAttemptChange}\n            className={styles.selector}\n          >\n            {attemptOptions}\n          </FormControl>\n          <FormControl\n            value={currentEntryId}\n            componentClass=\"select\"\n            onChange={this.handleLifterChange}\n            className={styles.selector}\n          >\n            {this.makeLifterOptions()}\n          </FormControl>\n        </div>\n\n        <div className={styles.rightControls}>\n          <button type=\"button\" onClick={this.props.toggleReplaceTableWithWeighins}>\n            Toggle Weigh-ins\n          </button>\n          <button type=\"button\" onClick={this.handleFullscreen} className={styles.fullscreen}>\n            Toggle Fullscreen\n          </button>\n          <button type=\"button\" onMouseDown={this.handleNoLift} className={styles.noLift}>\n            No Lift\n          </button>\n          <button type=\"button\" onMouseDown={this.handleGoodLift} className={styles.goodLift}>\n            Good Lift\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    lengthDays: state.meet.lengthDays,\n    platformsOnDays: state.meet.platformsOnDays,\n    allow4thAttempts: state.meet.allow4thAttempts,\n    lifting: state.lifting\n  };\n};\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    setLiftingGroup: (day, platform, flight, lift) => dispatch(setLiftingGroup(day, platform, flight, lift)),\n    overrideAttempt: attempt => dispatch(overrideAttempt(attempt)),\n    overrideEntryId: entryId => dispatch(overrideEntryId(entryId)),\n    markLift: (entryId, lift, attempt, success) => dispatch(markLift(entryId, lift, attempt, success))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LiftingFooter);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { liftToAttemptFieldName, liftToStatusFieldName, MAX_ATTEMPTS } from \"./entry\";\n\nimport type { LiftingOrder, Entry, FieldKg, FieldStatus } from \"../types/dataTypes\";\nimport type { LiftingState } from \"../types/stateTypes\";\n\n// Helper function: for a given entry, see what attempt number would be next.\n//\n// Returns a number >1 if the entry is still lifting, representing the next attempt.\n// Returns zero if the entry does not have any pending attempts.\nconst getNextAttemptNumberForEntry = (entry: Entry, fieldKg: FieldKg, fieldStatus: FieldStatus): number => {\n  const weightsKg = entry[fieldKg];\n  const statuses = entry[fieldStatus];\n\n  // Lifters only set the next attempt, so loop backwards,\n  // looking for the first attempt that meets the criteria.\n  for (var i = MAX_ATTEMPTS - 1; i >= 0; i--) {\n    if (weightsKg[i] !== 0 && statuses[i] === 0) {\n      return i + 1;\n    }\n  }\n  return 0;\n};\n\n// Determine the current active attempt for the current lift.\n//\n// An attempt is active if either:\n// 1. It has been overridden by the Attempt selector.\n// 2. There exists an attempt of that number with no success/failure value,\n//    and there is no lower attempt number with that property.\n//\n// Returns a number in the (inclusive) range of [1, MAX_ATTEMPTS].\n// If there is not enough data to make a decision, returns 1.\nconst getActiveAttemptNumber = (entriesInFlight: Array<Entry>, lifting: LiftingState): number => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n  const fieldStatus = liftToStatusFieldName(lift);\n\n  // Allow manual override.\n  if (lifting.overrideAttempt !== null) {\n    return Number(lifting.overrideAttempt);\n  }\n\n  // Iterate in reverse, looking for the earliest attempt that hasn't been lifted.\n  let earliestAttemptOneIndexed = MAX_ATTEMPTS + 1;\n  for (var i = 0; i < entriesInFlight.length; i++) {\n    const entry = entriesInFlight[i];\n    const next = getNextAttemptNumberForEntry(entry, fieldKg, fieldStatus);\n    // Zero return value means \"no pending attempts for this entry.\"\n    if (next > 0 && next < earliestAttemptOneIndexed) {\n      earliestAttemptOneIndexed = next;\n    }\n  }\n\n  // In the case of no pending lifts, just default to first attempt.\n  if (earliestAttemptOneIndexed === MAX_ATTEMPTS + 1) {\n    return 1;\n  }\n  return earliestAttemptOneIndexed;\n};\n\n// Helper function for recursive comparison.\nconst compareEntriesByAttempt = (a: Entry, b: Entry, fieldKg: FieldKg, attemptOneIndexed: number): number => {\n  const aKg = a[fieldKg][attemptOneIndexed - 1];\n  const bKg = b[fieldKg][attemptOneIndexed - 1];\n\n  // If non-equal, sort by weight, ascending.\n  if (aKg !== bKg) return aKg - bKg;\n\n  // If the federation uses lot numbers, break ties using lot.\n  if (a.lot !== 0 && b.lot !== 0) return a.lot - b.lot;\n\n  // If this is not the first attempt, preserve the order from the last attempt.\n  if (attemptOneIndexed > 1) {\n    return compareEntriesByAttempt(a, b, fieldKg, attemptOneIndexed - 1);\n  }\n\n  // Try to break ties using bodyweight, with the lighter lifter going first.\n  if (a.bodyweightKg !== b.bodyweightKg) return a.bodyweightKg - b.bodyweightKg;\n\n  // If we've run out of properties by which to compare them, resort to Name.\n  if (a.name < b.name) return -1;\n  if (a.name > b.name) return 1;\n  return 0;\n};\n\n// Helper function: performs an in-place sort on an array of entries.\n// Assumes that zero entries are not mixed in with non-zero entries.\nexport const orderEntriesByAttempt = (\n  entries: Array<Entry>,\n  fieldKg: FieldKg,\n  attemptOneIndexed: number\n): Array<Entry> => {\n  return entries.sort((a, b) => {\n    return compareEntriesByAttempt(a, b, fieldKg, attemptOneIndexed);\n  });\n};\n\n// Returns a copy of the entries in lifting order for the current attempt.\nconst orderEntriesForAttempt = (\n  entriesInFlight: Array<Entry>,\n  lifting: LiftingState,\n  attemptOneIndexed: number\n): Array<Entry> => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n\n  const attemptZeroIndexed = attemptOneIndexed - 1;\n  const existsNextAttempt = attemptOneIndexed + 1 <= MAX_ATTEMPTS;\n  const existsPrevAttempt = attemptOneIndexed > 1;\n\n  // Divide the entries into disjoint groups:\n  let byNextAttempt: Array<Entry> = []; // Entries sorted by their next attempt.\n  let byThisAttempt: Array<Entry> = []; // Entries sorted by this attempt.\n  let byPrevAttempt: Array<Entry> = []; // Entries sorted by previous attempt.\n  let notLifting: Array<Entry> = []; // Entries that don't have this or next attempts in.\n\n  for (let i = 0; i < entriesInFlight.length; i++) {\n    const entry = entriesInFlight[i];\n\n    if (existsNextAttempt && entry[fieldKg][attemptZeroIndexed + 1] !== 0) {\n      byNextAttempt.push(entry);\n    } else if (entry[fieldKg][attemptZeroIndexed] !== 0) {\n      byThisAttempt.push(entry);\n    } else if (existsPrevAttempt && entry[fieldKg][attemptZeroIndexed - 1] !== 0) {\n      byPrevAttempt.push(entry);\n    } else {\n      notLifting.push(entry);\n    }\n  }\n\n  // Perform sorting on the relative groups.\n  if (existsNextAttempt) {\n    orderEntriesByAttempt(byNextAttempt, fieldKg, attemptOneIndexed + 1);\n  }\n  orderEntriesByAttempt(byThisAttempt, fieldKg, attemptOneIndexed);\n  if (existsPrevAttempt) {\n    orderEntriesByAttempt(byPrevAttempt, fieldKg, attemptOneIndexed - 1);\n  }\n  orderEntriesByAttempt(notLifting, fieldKg, attemptOneIndexed);\n\n  // Arrange these three groups consecutively.\n  return Array.prototype.concat(byNextAttempt, byThisAttempt, byPrevAttempt, notLifting);\n};\n\n// Returns either the current entry ID or null if no active entry.\n//\n// In the ordered entries, the earliest lifter that hasn't gone yet is going.\n// This can be manually overridden by UI controls.\nconst getCurrentEntryId = (\n  lifting: LiftingState,\n  orderedEntries: Array<Entry>,\n  attemptOneIndexed: number\n): number | null => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n  const fieldStatus = liftToStatusFieldName(lift);\n\n  if (lifting.overrideEntryId !== null) {\n    return Number(lifting.overrideEntryId);\n  }\n\n  for (let i = 0; i < orderedEntries.length; i++) {\n    const entry = orderedEntries[i];\n    const idx = attemptOneIndexed - 1;\n    if (entry[fieldKg][idx] !== 0 && entry[fieldStatus][idx] === 0) {\n      return entry.id;\n    }\n  }\n  return null;\n};\n\ntype NextEntryInfo = {\n  entryId: number,\n  attemptOneIndexed: number\n};\n\n// Returns either an Object of {entryId, attemptOneIndexed}, or null.\nconst getNextEntryInfo = (\n  lifting: LiftingState,\n  currentEntryId: number | null,\n  orderedEntries: Array<Entry>,\n  attemptOneIndexed: number\n): NextEntryInfo | null => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n  const fieldStatus = liftToStatusFieldName(lift);\n\n  if (currentEntryId === null) {\n    return null;\n  }\n\n  // Find the index of the currentEntryId in the orderedEntries.\n  const currentEntryIndex = orderedEntries.findIndex(e => e.id === currentEntryId);\n  if (currentEntryIndex === -1) {\n    return null;\n  }\n\n  // Walk forward, looking for additional valid attempts.\n  for (let i = currentEntryIndex + 1; i < orderedEntries.length; i++) {\n    const hasAttempt = orderedEntries[i][fieldKg][attemptOneIndexed - 1] !== 0;\n    const notTaken = orderedEntries[i][fieldStatus][attemptOneIndexed - 1] === 0;\n\n    if (hasAttempt && notTaken) {\n      return {\n        entryId: orderedEntries[i].id,\n        attemptOneIndexed: attemptOneIndexed\n      };\n    }\n  }\n\n  // If none were found walking forward, check the next attempt by wrapping around.\n  if (attemptOneIndexed + 1 > MAX_ATTEMPTS) {\n    return null;\n  }\n  const nextAttemptOneIndexed = attemptOneIndexed + 1;\n\n  for (let i = 0; i < currentEntryIndex; i++) {\n    const hasAttempt = orderedEntries[i][fieldKg][nextAttemptOneIndexed - 1] !== 0;\n    const notTaken = orderedEntries[i][fieldStatus][nextAttemptOneIndexed - 1] === 0;\n\n    if (hasAttempt && notTaken) {\n      return {\n        entryId: orderedEntries[i].id,\n        attemptOneIndexed: nextAttemptOneIndexed\n      };\n    }\n  }\n\n  return null;\n};\n\n// Main application logic. Resolves the LiftingState to a LiftingOrder.\nexport const getLiftingOrder = (entriesInFlight: Array<Entry>, lifting: LiftingState): LiftingOrder => {\n  const attemptOneIndexed = getActiveAttemptNumber(entriesInFlight, lifting);\n  const orderedEntries = orderEntriesForAttempt(entriesInFlight, lifting, attemptOneIndexed);\n  const currentEntryId = getCurrentEntryId(lifting, orderedEntries, attemptOneIndexed);\n  const nextEntryInfo = getNextEntryInfo(lifting, currentEntryId, orderedEntries, attemptOneIndexed);\n\n  return {\n    orderedEntries: orderedEntries,\n    attemptOneIndexed: attemptOneIndexed,\n    currentEntryId: currentEntryId,\n    nextAttemptOneIndexed: nextEntryInfo ? nextEntryInfo.attemptOneIndexed : null,\n    nextEntryId: nextEntryInfo ? nextEntryInfo.entryId : null\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Lifting page, contained by the LiftingContainer.\n//\n// The LiftingTable, LiftingFooter, etc. all share calculated state.\n// This class performs the state calculations and communicates that to its\n// sub-components via props.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport TopBar from \"./TopBar\";\nimport LeftPanel from \"./LeftPanel\";\nimport LiftingTable from \"./LiftingTable\";\nimport LiftingFooter from \"./LiftingFooter\";\nimport WeighinsView from \"../weighins/WeighinsView\";\n\nimport styles from \"./LiftingView.module.scss\";\n\nimport { getLiftingOrder } from \"../../logic/liftingOrder\";\n\nimport type { Entry, Flight } from \"../../types/dataTypes\";\nimport type { GlobalState, MeetState, LiftingState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  meet: MeetState;\n  lifting: LiftingState;\n  flightsOnPlatform: Array<Flight>;\n  entriesInFlight: Array<Entry>;\n}\n\ntype Props = $ReadOnly<StateProps>;\n\ninterface InternalState {\n  // If true, the LiftingTable is replaced with the Weighins page.\n  // This lets the score table change arbitrary rack height and attempt information\n  // without removing the current lifter or bar load displays.\n  replaceTableWithWeighins: boolean;\n}\n\nclass LiftingView extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n    this.toggleReplaceTableWithWeighins = this.toggleReplaceTableWithWeighins.bind(this);\n    this.state = {\n      replaceTableWithWeighins: false\n    };\n  }\n\n  toggleReplaceTableWithWeighins = (): void => {\n    this.setState({\n      replaceTableWithWeighins: !this.state.replaceTableWithWeighins\n    });\n  };\n\n  render() {\n    const now = getLiftingOrder(this.props.entriesInFlight, this.props.lifting);\n\n    let rightElement = null;\n    if (this.state.replaceTableWithWeighins === false) {\n      rightElement = (\n        <LiftingTable\n          attemptOneIndexed={now.attemptOneIndexed}\n          orderedEntries={now.orderedEntries}\n          currentEntryId={now.currentEntryId}\n        />\n      );\n    } else {\n      rightElement = <WeighinsView day={this.props.lifting.day} platform={this.props.lifting.platform} />;\n    }\n\n    return (\n      <div id=\"liftingView\" className={styles.liftingView} style={{ backgroundImage: \"url('/nightmare-muscle/rainbow_tie_dye_seamless.jpg')\"}}>\n        <TopBar\n          attemptOneIndexed={now.attemptOneIndexed}\n          orderedEntries={now.orderedEntries}\n          currentEntryId={now.currentEntryId}\n        />\n\n        <div className={styles.middleParentContainer}>\n          <div className={styles.leftPanelContainer}>\n            <LeftPanel\n              attemptOneIndexed={now.attemptOneIndexed}\n              orderedEntries={now.orderedEntries}\n              currentEntryId={now.currentEntryId}\n              nextEntryId={now.nextEntryId}\n              nextAttemptOneIndexed={now.nextAttemptOneIndexed}\n            />\n          </div>\n\n          <div className={styles.rightPanelContainer}>{rightElement}</div>\n        </div>\n\n        <LiftingFooter\n          attemptOneIndexed={now.attemptOneIndexed}\n          orderedEntries={now.orderedEntries}\n          currentEntryId={now.currentEntryId}\n          flightsOnPlatform={this.props.flightsOnPlatform}\n          toggleReplaceTableWithWeighins={this.toggleReplaceTableWithWeighins}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  const day = state.lifting.day;\n  const platform = state.lifting.platform;\n  const flight = state.lifting.flight;\n\n  const entriesOnPlatform = state.registration.entries.filter(\n    entry => entry.day === day && entry.platform === platform\n  );\n\n  // Determine available flights from the entries themselves.\n  let flights: Array<Flight> = [];\n  for (let i = 0; i < entriesOnPlatform.length; i++) {\n    const entry = entriesOnPlatform[i];\n    if (flights.indexOf(entry.flight) === -1) {\n      flights.push(entry.flight);\n    }\n  }\n  flights.sort();\n\n  // Only receive entries that are in the currently-lifting group.\n  const entriesInFlight = entriesOnPlatform.filter(entry => entry.flight === flight);\n\n  return {\n    meet: state.meet,\n    lifting: state.lifting,\n    flightsOnPlatform: flights,\n    entriesInFlight: entriesInFlight\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LiftingView);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Lifting page.\n\nimport React from \"react\";\nimport LiftingView from \"../components/lifting/LiftingView\";\n\nclass LiftingContainer extends React.Component<{}> {\n  render() {\n    return <LiftingView />;\n  }\n}\n\nexport default LiftingContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Shows the first attempt ordering of lifters for a single flight.\n\nimport React from \"react\";\n\nimport { Panel, Table } from \"react-bootstrap\";\n\nimport { liftToAttemptFieldName } from \"../../logic/entry\";\nimport { orderEntriesByAttempt } from \"../../logic/liftingOrder\";\nimport { kg2lbs, displayWeight } from \"../../logic/units\";\n\nimport type { Entry, Flight, Lift } from \"../../types/dataTypes\";\n\nimport styles from \"./OneFlightOrder.module.scss\";\n\ninterface OwnProps {\n  flight: Flight;\n  entriesInFlight: Array<Entry>;\n}\n\ntype Props = OwnProps;\n\nclass OneFlightOrder extends React.Component<Props> {\n  getOrderBy = (lift: Lift): Array<Entry> => {\n    const fieldKg = liftToAttemptFieldName(lift);\n\n    // Only consider entries that registered a first attempt.\n    const entriesForLift = this.props.entriesInFlight.filter(e => {\n      return e[fieldKg][0] !== 0;\n    });\n\n    // Sort them in-place on the basis of that first attempt.\n    return orderEntriesByAttempt(entriesForLift, fieldKg, 1);\n  };\n\n  render() {\n    const bySquat = this.getOrderBy(\"S\");\n    const byBench = this.getOrderBy(\"B\");\n    const byDeadlift = this.getOrderBy(\"D\");\n\n    const hasSquat = bySquat.length !== 0;\n    const hasBench = byBench.length !== 0;\n    const hasDeadlift = byDeadlift.length !== 0;\n\n    const maxRows = Math.max(bySquat.length, byBench.length, byDeadlift.length);\n\n    // Construct a table row-by-row.\n    let rows = [];\n    for (let i = 0; i < maxRows; i++) {\n      let builder = [];\n      let key = 0;\n\n      if (hasSquat) {\n        if (i < bySquat.length) {\n          const entry = bySquat[i];\n          const kg: string = displayWeight(entry.squatKg[0]);\n          const lbs: string = displayWeight(kg2lbs(entry.squatKg[0]));\n          builder.push(\n            <td key={\"S-\" + entry.id}>\n              {i + 1}. {entry.name}\n            </td>\n          );\n          builder.push(<td key={\"S-kg-\" + entry.id}>{kg}</td>);\n          builder.push(<td key={\"S-lbs-\" + entry.id}>{lbs}</td>);\n        } else {\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n        }\n      }\n\n      if (hasBench) {\n        if (i < byBench.length) {\n          const entry = byBench[i];\n          const kg: string = displayWeight(entry.benchKg[0]);\n          const lbs: string = displayWeight(kg2lbs(entry.benchKg[0]));\n          builder.push(\n            <td key={\"B-\" + entry.id} className={styles.leftDivider}>\n              {i + 1}. {entry.name}\n            </td>\n          );\n          builder.push(<td key={\"B-kg-\" + entry.id}>{kg}</td>);\n          builder.push(<td key={\"B-lbs-\" + entry.id}>{lbs}</td>);\n        } else {\n          builder.push(<td key={key++} className={styles.leftDivider} />);\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n        }\n      }\n\n      if (hasDeadlift) {\n        if (i < byDeadlift.length) {\n          const entry = byDeadlift[i];\n          const kg: string = displayWeight(entry.deadliftKg[0]);\n          const lbs: string = displayWeight(kg2lbs(entry.deadliftKg[0]));\n          builder.push(\n            <td key={\"D-\" + entry.id} className={styles.leftDivider}>\n              {i + 1}. {entry.name}\n            </td>\n          );\n          builder.push(<td key={\"D-kg-\" + entry.id}>{kg}</td>);\n          builder.push(<td key={\"D-lbs-\" + entry.id}>{lbs}</td>);\n        } else {\n          builder.push(<td key={key++} className={styles.leftDivider} />);\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n        }\n      }\n\n      rows.push(<tr key={i}>{builder}</tr>);\n    }\n\n    // Construct the table header.\n    let header = [];\n    if (hasSquat) {\n      header.push(<th key={\"S\"}>Squat</th>);\n      header.push(<th key={\"S-kg\"}>Kg</th>);\n      header.push(<th key={\"S-lbs\"}>Lbs</th>);\n    }\n    if (hasBench) {\n      header.push(\n        <th key={\"B\"} className={styles.leftDivider}>\n          Bench\n        </th>\n      );\n      header.push(<th key={\"B-kg\"}>Kg</th>);\n      header.push(<th key={\"B-lbs\"}>Lbs</th>);\n    }\n    if (hasDeadlift) {\n      header.push(\n        <th key={\"D\"} className={styles.leftDivider}>\n          Deadlift\n        </th>\n      );\n      header.push(<th key={\"D-kg\"}>Kg</th>);\n      header.push(<th key={\"D-lbs\"}>Lbs</th>);\n    }\n\n    return (\n      <Panel>\n        <Panel.Heading>Flight {this.props.flight} Lifting Order</Panel.Heading>\n        <Panel.Body>\n          <Table striped hover condensed style={{ margin: \"0px\" }}>\n            <thead>\n              <tr>{header}</tr>\n            </thead>\n            <tbody>{rows}</tbody>\n          </Table>\n        </Panel.Body>\n      </Panel>\n    );\n  }\n}\n\nexport default OneFlightOrder;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Shows all the lifters who are competing in the same Category.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Panel } from \"react-bootstrap\";\n\nimport type { CategoryResults } from \"../../logic/divisionPlace\";\nimport type { Sex } from \"../../types/dataTypes\";\n\nconst sexToLabel = (sex: Sex): string => {\n  switch (sex) {\n    case \"M\":\n      return \"Men's\";\n    case \"F\":\n      return \"Women's\";\n    case \"Mx\":\n      return \"Mx\";\n    default:\n      (sex: empty) // eslint-disable-line\n      return \"\";\n  }\n};\n\ntype Props = {\n  platform: number,\n  categoryResults: CategoryResults\n};\n\nclass OneCategory extends React.Component<Props> {\n  render() {\n    const category = this.props.categoryResults.category;\n    const entries = this.props.categoryResults.orderedEntries;\n\n    const sex = sexToLabel(category.sex);\n\n    let namelist = [];\n    for (let i = 0; i < entries.length; i++) {\n      namelist.push(entries[i].name);\n    }\n\n    return (\n      <Panel bsStyle=\"info\">\n        <Panel.Heading>\n          Platform {this.props.platform} Lifters in {sex} {category.weightClassStr}kg {category.equipment}{\" \"}\n          {category.division} {category.event}\n        </Panel.Heading>\n        <Panel.Body>{namelist.join(\", \")}</Panel.Body>\n      </Panel>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  null\n)(OneCategory);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the FlightOrder page, contained by the FlightOrderContainer.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Button, FormControl, Panel } from \"react-bootstrap\";\n\nimport OneFlightOrder from \"./OneFlightOrder\";\nimport OneCategory from \"./OneCategory\";\n\nimport { getProjectedResults } from \"../../logic/divisionPlace\";\n\nimport type { Entry } from \"../../types/dataTypes\";\nimport type { GlobalState, MeetState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  meet: MeetState;\n  entries: Array<Entry>;\n}\n\ntype Props = StateProps;\n\ninterface InternalState {\n  day: number;\n  platform: number;\n}\n\nconst marginStyle = { margin: \"0\" };\n\nclass FlightOrderView extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n\n    this.updateDay = this.updateDay.bind(this);\n    this.updatePlatform = this.updatePlatform.bind(this);\n    this.handlePrint = this.handlePrint.bind(this);\n\n    this.state = {\n      day: 1,\n      platform: 1\n    };\n  }\n\n  updateDay = event => {\n    const day = Number(event.target.value);\n    if (this.state.day !== day) {\n      // If the currently-selected platform number becomes invalid, reset it.\n      if (this.state.platform > this.props.meet.platformsOnDays[day - 1]) {\n        this.setState({ day: day, platform: 1 });\n      } else {\n        this.setState({ day: day });\n      }\n    }\n  };\n\n  updatePlatform = event => {\n    const platform = Number(event.target.value);\n    if (this.state.platform !== platform) {\n      this.setState({ platform: platform });\n    }\n  };\n\n  handlePrint = () => {\n    window.print();\n  };\n\n  render() {\n    const selectorStyle = { width: \"120px\" };\n\n    // Make options for all of the days.\n    let dayOptions = [];\n    for (let i = 1; i <= this.props.meet.lengthDays; i++) {\n      dayOptions.push(\n        <option value={i} key={i}>\n          Day {i}\n        </option>\n      );\n    }\n\n    // Make options for all of the available platforms on the current day.\n    let platformOptions = [];\n    let numPlatforms = this.props.meet.platformsOnDays[this.state.day - 1];\n    for (let i = 1; i <= numPlatforms; i++) {\n      platformOptions.push(\n        <option value={i} key={i}>\n          Platform {i}\n        </option>\n      );\n    }\n\n    // Get all the entries under the current (day, platform) selection.\n    let shownEntries = this.props.entries.filter(e => {\n      return e.day === this.state.day && e.platform === this.state.platform;\n    });\n\n    // Look through the entries to discover what flights exist.\n    let knownFlights = [];\n    for (let i = 0; i < shownEntries.length; i++) {\n      const entry = shownEntries[i];\n      if (knownFlights.indexOf(entry.flight) === -1) {\n        knownFlights.push(entry.flight);\n      }\n    }\n    knownFlights.sort();\n\n    // For each flight, see if there are any lifters, and build a OneFlightOrder.\n    let flightOrders = [];\n    for (let i = 0; i < knownFlights.length; i++) {\n      const flight = knownFlights[i];\n      const entriesInFlight = shownEntries.filter(e => e.flight === flight);\n      const id = \"\" + this.state.day + \"-\" + this.state.platform + \"-\" + flight;\n      flightOrders.push(<OneFlightOrder key={id} flight={flight} entriesInFlight={entriesInFlight} />);\n    }\n\n    // Look through the entries to discover what divisions exist.\n    const categoryResults = getProjectedResults(\n      shownEntries,\n      this.props.meet.weightClassesKgMen,\n      this.props.meet.weightClassesKgWomen,\n      this.props.meet.weightClassesKgMx,\n      this.props.meet.combineSleevesAndWraps\n    );\n\n    let categories = [];\n    for (let i = 0; i < categoryResults.length; i++) {\n      const id = \"\" + this.state.day + \"-\" + this.state.platform + \"-\" + i;\n      categories.push(<OneCategory key={id} platform={this.state.platform} categoryResults={categoryResults[i]} />);\n    }\n\n    return (\n      <div style={marginStyle}>\n        <Panel bsStyle=\"info\">\n          <Panel.Body style={{ display: \"flex\" }}>\n            <FormControl\n              defaultValue={this.state.day}\n              componentClass=\"select\"\n              onChange={this.updateDay}\n              style={selectorStyle}\n            >\n              {dayOptions}\n            </FormControl>\n\n            <FormControl\n              defaultValue={this.state.platform}\n              componentClass=\"select\"\n              onChange={this.updatePlatform}\n              style={selectorStyle}\n            >\n              {platformOptions}\n            </FormControl>\n\n            <Button bsStyle=\"info\" onClick={this.handlePrint}>\n              Print Page\n            </Button>\n          </Panel.Body>\n        </Panel>\n\n        {flightOrders}\n        {categories}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    meet: state.meet,\n    entries: state.registration.entries\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(FlightOrderView);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the FlightOrder page.\n\nimport React from \"react\";\nimport FlightOrderView from \"../components/flight-order/FlightOrderView\";\n\nclass FlightOrderContainer extends React.Component<{}> {\n  render() {\n    return <FlightOrderView />;\n  }\n}\n\nexport default FlightOrderContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Displays the results by division.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Panel, Table } from \"react-bootstrap\";\n\nimport { getFinalResults } from \"../../logic/divisionPlace\";\nimport { getWeightClassStr } from \"../../reducers/meetReducer\";\nimport {\n  getBest5SquatKg,\n  getBest5BenchKg,\n  getBest5DeadliftKg,\n  getFinalEventTotalKg,\n  entryHasLifted\n} from \"../../logic/entry\";\n\nimport { bodyweight_multiple } from \"../../logic/coefficients/bodyweight-multiple\";\nimport { glossbrenner } from \"../../logic/coefficients/glossbrenner\";\nimport { ipfpoints } from \"../../logic/coefficients/ipf\";\nimport { nasapoints } from \"../../logic/coefficients/nasa\";\nimport { schwartzmalone } from \"../../logic/coefficients/schwartzmalone\";\nimport { wilks } from \"../../logic/coefficients/wilks\";\n\nimport type { Category, CategoryResults } from \"../../logic/divisionPlace\";\nimport type { Entry, Sex } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  meetName: string;\n  formula: string;\n  combineSleevesAndWraps: boolean;\n  lengthDays: number;\n  weightClassesKgMen: Array<number>;\n  weightClassesKgWomen: Array<number>;\n  weightClassesKgMx: Array<number>;\n  entries: Array<Entry>;\n}\n\ninterface OwnProps {\n  day: string; // Really a number, 0 meaning \"all\".\n}\n\ntype Props = StateProps & OwnProps;\n\nconst mapSexToClasses = (sex: Sex, props: Props): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return props.weightClassesKgMen;\n    case \"F\":\n      return props.weightClassesKgWomen;\n    case \"Mx\":\n      return props.weightClassesKgMx;\n    default:\n      (sex: empty) // eslint-disable-line\n      return props.weightClassesKgMen;\n  }\n};\n\nclass ByDivision extends React.Component<Props> {\n  renderEntryRow = (entry: Entry, category: Category, key: number): any => {\n    // Skip no-show entries.\n    if (!entryHasLifted(entry)) return null;\n\n    const classes = mapSexToClasses(entry.sex, this.props);\n    const totalKg = getFinalEventTotalKg(entry, category.event);\n    const squatKg = getBest5SquatKg(entry);\n    const benchKg = getBest5BenchKg(entry);\n    const deadliftKg = getBest5DeadliftKg(entry);\n\n    // The place proceeds in order by key, except for DQ entries.\n    const place = totalKg === 0 ? \"DQ\" : key + 1;\n\n    // TODO: Share this code with ByPoints.\n    let points = 0;\n    switch (this.props.formula) {\n      case \"Bodyweight Multiple\":\n        points = bodyweight_multiple(entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"Glossbrenner\":\n        points = glossbrenner(entry.sex, entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"Wilks\":\n        points = wilks(entry.sex, entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"IPF Points\":\n        points = ipfpoints(totalKg, entry.bodyweightKg, entry.sex, category.equipment, category.event).toFixed(2);\n        break;\n      case \"Schwartz/Malone\":\n        points = schwartzmalone(entry.sex, entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"NASA Points\":\n        points = nasapoints(entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      default:\n        break;\n    }\n\n    let pointsStr = \"\";\n    if (totalKg !== 0 && points === 0) pointsStr = \"N/A\";\n    if (totalKg !== 0 && points !== 0) pointsStr = points;\n\n    return (\n      <tr key={key}>\n        <td>{place}</td>\n        <td>{entry.name}</td>\n        <td>{entry.bodyweightKg === 0 ? null : getWeightClassStr(classes, entry.bodyweightKg)}</td>\n        <td>{entry.bodyweightKg === 0 ? null : entry.bodyweightKg}</td>\n        <td>{entry.age === 0 ? null : entry.age}</td>\n        <td>{squatKg === 0 ? \"\" : squatKg}</td>\n        <td>{pointsStr}</td>\n      </tr>\n    );\n  };\n\n  mapSexToLabel = (sex: Sex): string => {\n    switch (sex) {\n      case \"M\":\n        return \"Men's\";\n      case \"F\":\n        return \"Women's\";\n      case \"Mx\":\n        return \"Mx\";\n      default:\n        (sex: empty) // eslint-disable-line\n        return \"\";\n    }\n  };\n\n  renderCategoryResults = (results: CategoryResults, key: number): any => {\n    const { category, orderedEntries } = results;\n    const sex = this.mapSexToLabel(category.sex);\n\n    // Gather rows.\n    let rows = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const row = this.renderEntryRow(orderedEntries[i], category, i);\n      if (row !== null) {\n        rows.push(row);\n      }\n    }\n\n    // If all entries were no-show, don't show this panel.\n    if (rows.length === 0) {\n      return null;\n    }\n\n    let eqpstr: string = category.equipment;\n    if (this.props.combineSleevesAndWraps) {\n      eqpstr = \"Sleeves + Wraps\";\n    }\n\n    return (\n      <Panel key={key}>\n        <Panel.Heading>\n          {sex} {category.weightClassStr} {category.weightClassStr !== \"\" ? \"kilo\" : null} {eqpstr} {category.division}{\" \"}\n          {category.event}\n        </Panel.Heading>\n        <Panel.Body>\n          <Table hover condensed>\n            <thead>\n              <tr>\n                <th>Place</th>\n                <th>Name</th>\n                <th>Class</th>\n                <th>Bwt</th>\n                <th>Age</th>\n                <th>Front Squat</th>\n                <th>Points</th>\n              </tr>\n            </thead>\n            <tbody>{rows}</tbody>\n          </Table>\n        </Panel.Body>\n      </Panel>\n    );\n  };\n\n  render() {\n    const results = getFinalResults(\n      this.props.entries,\n      this.props.weightClassesKgMen,\n      this.props.weightClassesKgWomen,\n      this.props.weightClassesKgMx,\n      this.props.combineSleevesAndWraps\n    );\n\n    let categoryPanels = [];\n    for (let i = 0; i < results.length; i++) {\n      const panel = this.renderCategoryResults(results[i], i);\n      if (panel !== null) {\n        categoryPanels.push(panel);\n      }\n    }\n\n    return <div>{categoryPanels}</div>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  const day = Number(ownProps.day);\n  let entries = state.registration.entries;\n  if (day > 0) {\n    entries = entries.filter(e => e.day === day);\n  }\n\n  return {\n    meetName: state.meet.name,\n    formula: state.meet.formula,\n    combineSleevesAndWraps: state.meet.combineSleevesAndWraps,\n    lengthDays: state.meet.lengthDays,\n    weightClassesKgMen: state.meet.weightClassesKgMen,\n    weightClassesKgWomen: state.meet.weightClassesKgWomen,\n    weightClassesKgMx: state.meet.weightClassesKgMx,\n    entries: entries\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ByDivision);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the logic for calculating the division Place of a lifter, shared between\n// the Lifting page, the Rankings page, and data export code.\n//\n// The algorithm used is particularly bad -- the foremost goal was to make an interface\n// that allowed for maximum code reuse between the Rankings and Lifting pages,\n// which have slightly different needs.\n\nimport { getFinalEventTotalKg } from \"./entry\";\n\nimport { bodyweight_multiple } from \"./coefficients/bodyweight-multiple\";\nimport { glossbrenner } from \"./coefficients/glossbrenner\";\nimport { ipfpoints } from \"./coefficients/ipf\";\nimport { nasapoints } from \"./coefficients/nasa\";\nimport { schwartzmalone } from \"./coefficients/schwartzmalone\";\nimport { wilks } from \"./coefficients/wilks\";\n\nimport type { Sex, Event, Equipment, Entry, Formula } from \"../types/dataTypes\";\n\n// Specifies a points category under which entries can be ranked together.\nexport type PointsCategory = {\n  sex: Sex,\n  event: Event,\n  equipment: Equipment\n};\n\n// Wraps up all the entries in a category with the category's descriptors.\nexport type PointsCategoryResults = {\n  category: PointsCategory,\n  orderedEntries: Array<Entry>\n};\n\n// Generates a unique String out of a Category, for purposes of using as a Map key.\nconst categoryToKey = (category: PointsCategory): string => {\n  return JSON.stringify(category);\n};\nconst keyToCategory = (key: string): PointsCategory => {\n  return JSON.parse(key);\n};\n\n// Returns a copy of the entries array sorted by Formula Place (Rank).\n// All entries are assumed to be part of the same category.\nconst sortByFormulaPlaceInCategory = (\n  entries: Array<Entry>,\n  category: PointsCategory,\n  formula: Formula\n): Array<Entry> => {\n  // Make a map from Entry to initial index.\n  let indexMap = new Map();\n  for (let i = 0; i < entries.length; i++) {\n    indexMap.set(entries[i], i);\n  }\n\n  // Pre-calculate all the points into an array to avoid computing them multiple\n  // times in the sort.\n  let memoizedPoints = new Array(entries.length);\n  for (let i = 0; i < entries.length; i++) {\n    const entry = entries[i];\n    const totalKg = getFinalEventTotalKg(entry, category.event);\n\n    switch (formula) {\n      case \"Bodyweight Multiple\":\n        memoizedPoints[i] = bodyweight_multiple(entry.bodyweightKg, totalKg);\n        break;\n      case \"Glossbrenner\":\n        memoizedPoints[i] = glossbrenner(category.sex, entry.bodyweightKg, totalKg);\n        break;\n      case \"Wilks\":\n        memoizedPoints[i] = wilks(category.sex, entry.bodyweightKg, totalKg);\n        break;\n      case \"IPF Points\":\n        memoizedPoints[i] = ipfpoints(totalKg, entry.bodyweightKg, category.sex, category.equipment, category.event);\n        break;\n      case \"Schwartz/Malone\":\n        memoizedPoints[i] = schwartzmalone(category.sex, entry.bodyweightKg, totalKg);\n        break;\n      case \"NASA Points\":\n        memoizedPoints[i] = nasapoints(entry.bodyweightKg, totalKg);\n        break;\n      default:\n        (formula: empty) // eslint-disable-line\n        memoizedPoints[i] = 0;\n    }\n  }\n\n  // Clone the entries array to avoid modifying the original.\n  let clonedEntries = entries.slice();\n\n  // Sort in the given category, first place having the lowest index.\n  clonedEntries.sort((a, b) => {\n    const aIndex = indexMap.get(a);\n    const bIndex = indexMap.get(b);\n\n    // Appease the type checker even though this can't happen.\n    if (aIndex === undefined || bIndex === undefined) return 0;\n\n    // First sort by points, higher sorting lower.\n    const aPoints = memoizedPoints[aIndex];\n    const bPoints = memoizedPoints[bIndex];\n    if (aPoints !== bPoints) return bPoints - aPoints;\n\n    // If points are equal, sort by Bodyweight, lower sorting lower.\n    if (a.bodyweightKg !== b.bodyweightKg) return a.bodyweightKg - b.bodyweightKg;\n\n    // Otherwise, they're equal.\n    return 0;\n  });\n\n  return clonedEntries;\n};\n\n// Determines the sort order by Event.\nconst getEventSortOrder = (ev: Event): number => {\n  return [\"SBD\", \"BD\", \"SB\", \"SD\", \"S\", \"B\", \"D\"].indexOf(ev);\n};\n\n// Determines the sort order by Equipment.\nconst getEquipmentSortOrder = (eq: Equipment): number => {\n  // Combine classic and equipped lifting.\n  return [\"Bare\", \"Sleeves\", \"Wraps\", \"Single-ply\", \"Multi-ply\"].indexOf(eq);\n};\n\n// Determines the sort order by Sex.\nconst getSexSortOrder = (sex: Sex): number => {\n  switch (sex) {\n    case \"F\":\n      return 0;\n    case \"M\":\n      return 1;\n    case \"Mx\":\n      return 2;\n    default:\n      (sex: empty) // eslint-disable-line\n      return 3;\n  }\n};\n\n// Determines the sort (and therefore presentation) order for the Category Results.\n// The input array is sorted in-place; nothing is returned.\nexport const sortPointsCategoryResults = (results: Array<PointsCategoryResults>) => {\n  results.sort((a, b) => {\n    const catA = a.category;\n    const catB = b.category;\n\n    // First, sort by Sex.\n    const aSex = getSexSortOrder(catA.sex);\n    const bSex = getSexSortOrder(catB.sex);\n    if (aSex !== bSex) return aSex - bSex;\n\n    // Next, sort by Event.\n    const aEvent = getEventSortOrder(catA.event);\n    const bEvent = getEventSortOrder(catB.event);\n    if (aEvent !== bEvent) return aEvent - bEvent;\n\n    // Finally, sort by Equipment.\n    const aEquipment = getEquipmentSortOrder(catA.equipment);\n    const bEquipment = getEquipmentSortOrder(catB.equipment);\n    if (aEquipment !== bEquipment) return aEquipment - bEquipment;\n\n    return 0;\n  });\n};\n\n// Generates objects representing the various ByPoints categories.\n// The returned objects are sorted in intended order of presentation.\nexport const getAllRankings = (\n  entries: Array<Entry>,\n  formula: Formula,\n  combineSleevesAndWraps: boolean\n): Array<PointsCategoryResults> => {\n  // Generate a map from category to the entries within that category.\n  // The map is populated by iterating over each entry and having the entry\n  // append itself to per-category lists.\n  let categoryMap = new Map();\n  for (let i = 0; i < entries.length; i++) {\n    const e = entries[i];\n\n    // Remember consistent properties.\n    const sex = e.sex;\n    let equipment: Equipment = e.equipment;\n\n    // If the results combine Sleeves and Wraps, promote Sleeves to Wraps.\n    if (combineSleevesAndWraps && equipment === \"Sleeves\") {\n      equipment = \"Wraps\";\n    }\n\n    // Iterate over each event, adding to the map.\n    for (let evidx = 0; evidx < e.events.length; evidx++) {\n      const event = e.events[evidx];\n      const category = { sex, event, equipment };\n      const key = categoryToKey(category);\n\n      const catEntries = categoryMap.get(key);\n      catEntries === undefined ? categoryMap.set(key, [e]) : catEntries.push(e);\n    }\n  }\n\n  // Iterate over each category and assign a Place to the entries therein.\n  let results = [];\n  for (let [key, catEntries] of categoryMap) {\n    const category = keyToCategory(key);\n    const orderedEntries = sortByFormulaPlaceInCategory(catEntries, category, formula);\n    results.push({ category, orderedEntries });\n  }\n\n  sortPointsCategoryResults(results);\n  return results;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Displays the results by points.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Panel, Table } from \"react-bootstrap\";\n\nimport { getAllRankings } from \"../../logic/pointsPlace\";\nimport { getWeightClassStr } from \"../../reducers/meetReducer\";\nimport {\n  getBest5SquatKg,\n  getBest5BenchKg,\n  getBest5DeadliftKg,\n  getFinalEventTotalKg,\n  entryHasLifted\n} from \"../../logic/entry\";\n\nimport { bodyweight_multiple } from \"../../logic/coefficients/bodyweight-multiple\";\nimport { glossbrenner } from \"../../logic/coefficients/glossbrenner\";\nimport { ipfpoints } from \"../../logic/coefficients/ipf\";\nimport { nasapoints } from \"../../logic/coefficients/nasa\";\nimport { schwartzmalone } from \"../../logic/coefficients/schwartzmalone\";\nimport { wilks } from \"../../logic/coefficients/wilks\";\n\nimport type { PointsCategory, PointsCategoryResults } from \"../../logic/pointsPlace\";\nimport type { Entry, Formula, Sex } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  meetName: string;\n  formula: Formula;\n  combineSleevesAndWraps: boolean;\n  lengthDays: number;\n  weightClassesKgMen: Array<number>;\n  weightClassesKgWomen: Array<number>;\n  weightClassesKgMx: Array<number>;\n  entries: Array<Entry>;\n}\n\ninterface OwnProps {\n  day: string; // Really a number, 0 meaning \"all\".\n}\n\ntype Props = StateProps & OwnProps;\n\nconst mapSexToClasses = (sex: Sex, props: Props): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return props.weightClassesKgMen;\n    case \"F\":\n      return props.weightClassesKgWomen;\n    case \"Mx\":\n      return props.weightClassesKgMx;\n    default:\n      (sex: empty) // eslint-disable-line\n      return props.weightClassesKgMen;\n  }\n};\n\nclass ByPoints extends React.Component<Props> {\n  renderEntryRow = (entry: Entry, category: PointsCategory, key: number): any => {\n    // Skip no-show lifters.\n    if (!entryHasLifted(entry)) return null;\n\n    const classes = mapSexToClasses(entry.sex, this.props);\n    const totalKg = getFinalEventTotalKg(entry, category.event);\n    const squatKg = getBest5SquatKg(entry);\n    const benchKg = getBest5BenchKg(entry);\n    const deadliftKg = getBest5DeadliftKg(entry);\n\n    // The place proceeds in order by key, except for DQ entries.\n    const rank = totalKg === 0 ? \"DQ\" : key + 1;\n\n    let points = 0;\n    switch (this.props.formula) {\n      case \"Bodyweight Multiple\":\n        points = bodyweight_multiple(entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"Glossbrenner\":\n        points = glossbrenner(entry.sex, entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"Wilks\":\n        points = wilks(entry.sex, entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"IPF Points\":\n        points = ipfpoints(totalKg, entry.bodyweightKg, entry.sex, category.equipment, category.event).toFixed(2);\n        break;\n      case \"Schwartz/Malone\":\n        points = schwartzmalone(entry.sex, entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"NASA Points\":\n        points = nasapoints(entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      default:\n        (this.props.formula: empty) // eslint-disable-line\n        break;\n    }\n\n    let pointsStr = \"\";\n    if (totalKg !== 0 && points === 0) pointsStr = \"N/A\";\n    if (totalKg !== 0 && points !== 0) pointsStr = points;\n\n    return (\n      <tr key={key}>\n        <td>{rank}</td>\n        <td>{entry.name}</td>\n        <td>{entry.sex}</td>\n        <td>{entry.equipment}</td>\n        <td>{entry.bodyweightKg === 0 ? null : getWeightClassStr(classes, entry.bodyweightKg)}</td>\n        <td>{entry.bodyweightKg === 0 ? null : entry.bodyweightKg}</td>\n        <td>{entry.age === 0 ? null : entry.age}</td>\n        <td>{squatKg === 0 ? \"\" : squatKg}</td>\n        <td>{pointsStr}</td>\n      </tr>\n    );\n  };\n\n  mapSexToLabel = (sex: Sex): string => {\n    switch (sex) {\n      case \"M\":\n        return \"Men's\";\n      case \"F\":\n        return \"Women's\";\n      case \"Mx\":\n        return \"Mx\";\n      default:\n        (sex: empty) // eslint-disable-line\n        return \"\";\n    }\n  };\n\n  renderCategoryResults = (results: PointsCategoryResults, key: number): any => {\n    const { category, orderedEntries } = results;\n    const sex = this.mapSexToLabel(category.sex);\n\n    // Gather rows.\n    let rows = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const row = this.renderEntryRow(orderedEntries[i], category, i);\n      if (row !== null) {\n        rows.push(row);\n      }\n    }\n\n    // If all lifters were No-Show, skip displaying this category.\n    if (rows.length === 0) {\n      return null;\n    }\n\n    let eqpstr: string = category.equipment;\n    if (this.props.combineSleevesAndWraps) {\n      eqpstr = \"Sleeves + Wraps\";\n    }\n\n    return (\n      <Panel key={key}>\n        <Panel.Heading>\n          {sex} {eqpstr} {category.event}\n        </Panel.Heading>\n        <Panel.Body>\n          <Table striped hover condensed>\n            <thead>\n              <tr>\n                <th>Rank</th>\n                <th>Name</th>\n                <th>Sex</th>\n                <th>Equipment</th>\n                <th>Class</th>\n                <th>Bwt</th>\n                <th>Age</th>\n                <th>Front Squat</th>\n                <th>Points</th>\n              </tr>\n            </thead>\n            <tbody>{rows}</tbody>\n          </Table>\n        </Panel.Body>\n      </Panel>\n    );\n  };\n\n  render() {\n    const results = getAllRankings(this.props.entries, this.props.formula, this.props.combineSleevesAndWraps);\n\n    let categoryPanels = [];\n    for (let i = 0; i < results.length; i++) {\n      const panel = this.renderCategoryResults(results[i], i);\n      if (panel !== null) {\n        categoryPanels.push(panel);\n      }\n    }\n\n    return <div>{categoryPanels}</div>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  const day = Number(ownProps.day);\n  let entries = state.registration.entries;\n  if (day > 0) {\n    entries = entries.filter(e => e.day === day);\n  }\n\n  return {\n    meetName: state.meet.name,\n    formula: state.meet.formula,\n    combineSleevesAndWraps: state.meet.combineSleevesAndWraps,\n    lengthDays: state.meet.lengthDays,\n    weightClassesKgMen: state.meet.weightClassesKgMen,\n    weightClassesKgWomen: state.meet.weightClassesKgWomen,\n    weightClassesKgMx: state.meet.weightClassesKgMx,\n    entries: entries\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ByPoints);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines a general CSV manipulation class.\n// This is a JS port of the Python \"oplcsv.py\" library used by the OpenPowerlifting\n// main data project.\n\n// Makes a string suitable for inclusion in a simple CSV file,\n// by deleting all commas and double quotes.\nexport const csvString = (x: number | string): string => {\n  if (x === undefined) return \"\";\n  let s = String(x);\n\n  // The OpenPowerlifting format uses commas and disallow double-quotes.\n  s = s.replace(/,/g, \" \");\n  s = s.replace(/\"/g, \" \");\n\n  // The number \"0\" is also never written out explicitly; the empty string is preferred.\n  if (s === \"0\") return \"\";\n\n  // Clean up some formatting.\n  s = s.replace(/ {2}/g, \" \").trim();\n  return s;\n};\n\n// A class for managing simple CSV files. Double-quotes and commas are disallowed.\nexport class Csv {\n  fieldnames: Array<string>; // Column names.\n  rows: Array<Array<string>>; // Individual rows.\n\n  constructor() {\n    this.fieldnames = [];\n    this.rows = [];\n  }\n\n  length(): number {\n    return this.rows.length;\n  }\n\n  index(name: string): number {\n    return this.fieldnames.indexOf(name);\n  }\n\n  appendColumn(name: string): void {\n    this.fieldnames.push(name);\n    for (let i = 0; i < this.rows.length; i++) {\n      this.rows[i].push(\"\");\n    }\n  }\n\n  appendColumns(namelist: Array<string>): void {\n    this.fieldnames = this.fieldnames.concat(namelist);\n    for (let i = 0; i < this.rows.length; i++) {\n      for (let j = 0; j < namelist.length; j++) {\n        this.rows[i].push(\"\");\n      }\n    }\n  }\n\n  insertColumn(index: number, name: string): void {\n    this.fieldnames.splice(index, 0, name);\n    for (let i = 0; i < this.rows.length; i++) {\n      this.rows[i].splice(index, 0, \"\");\n    }\n  }\n\n  removeColumnByIndex(index: number): void {\n    this.fieldnames.splice(index, 1);\n    for (let i = 0; i < this.rows.length; i++) {\n      this.rows[i].splice(index, 1);\n    }\n  }\n\n  removeColumnByName(name: string): void {\n    for (let i = 0; i < this.fieldnames.length; i++) {\n      if (this.fieldnames[i] === name) {\n        this.removeColumnByIndex(i);\n        return;\n      }\n    }\n  }\n\n  removeEmptyColumns(): void {\n    for (let i = 0; i < this.fieldnames.length; i++) {\n      let empty = true;\n      for (let j = 0; j < this.rows.length; j++) {\n        if (this.rows[j][i] !== \"\") {\n          empty = false;\n          break;\n        }\n      }\n      if (empty === true) {\n        this.removeColumnByIndex(i);\n        this.removeEmptyColumns();\n        return;\n      }\n    }\n  }\n\n  toString(): string {\n    const headers = this.fieldnames.join(\",\");\n    let strRows: Array<string> = [];\n    for (let i = 0; i < this.rows.length; i++) {\n      strRows.push(this.rows[i].join(\",\"));\n    }\n    return headers + \"\\n\" + strRows.join(\"\\n\") + \"\\n\";\n  }\n}\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Exports data to a CSV format easily importable by OpenPowerlifting.\n\nimport { csvString, Csv } from \"./csv\";\nimport { getFinalResults } from \"../divisionPlace\";\nimport {\n  getBest3SquatKg,\n  getBest3BenchKg,\n  getBest3DeadliftKg,\n  getFinalEventTotalKg,\n  entryHasLifted,\n  MAX_ATTEMPTS\n} from \"../entry\";\n\nimport type { Category, CategoryResults } from \"../divisionPlace\";\nimport type { Entry, Equipment } from \"../../types/dataTypes\";\nimport type { GlobalState, MeetState } from \"../../types/stateTypes\";\n\nconst makeMeetCsv = (meet: MeetState): Csv => {\n  let csv = new Csv();\n  csv.fieldnames = [\"Federation\", \"Date\", \"MeetCountry\", \"MeetState\", \"MeetTown\", \"MeetName\"];\n\n  let row: Array<string> = [\n    csvString(meet.federation),\n    csvString(meet.date),\n    csvString(meet.country),\n    csvString(meet.state),\n    csvString(meet.city),\n    csvString(meet.name)\n  ];\n  csv.rows = [row];\n\n  // An optional RuleSet column may be provided.\n  if (meet.combineSleevesAndWraps === true) {\n    csv.fieldnames.push(\"RuleSet\");\n    csv.rows[0].push(\"CombineRawAndWraps\");\n  }\n\n  return csv;\n};\n\nconst makeEntriesCsv = (state: GlobalState): Csv => {\n  let csv = new Csv();\n\n  let squatFieldnames = [];\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    squatFieldnames.push(\"Squat\" + (i + 1) + \"Kg\");\n  }\n  squatFieldnames.push(\"Best3SquatKg\");\n\n  let benchFieldnames = [];\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    benchFieldnames.push(\"Bench\" + (i + 1) + \"Kg\");\n  }\n  benchFieldnames.push(\"Best3BenchKg\");\n\n  let deadliftFieldnames = [];\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    deadliftFieldnames.push(\"Deadlift\" + (i + 1) + \"Kg\");\n  }\n  deadliftFieldnames.push(\"Best3DeadliftKg\");\n\n  csv.fieldnames = Array.prototype.concat(\n    [\"Place\", \"Name\", \"Sex\", \"BirthDate\", \"Age\", \"Country\", \"State\"],\n    [\"Equipment\", \"Division\", \"BodyweightKg\", \"WeightClassKg\"],\n    squatFieldnames,\n    benchFieldnames,\n    deadliftFieldnames,\n    [\"TotalKg\", \"Event\"]\n  );\n\n  const results: Array<CategoryResults> = getFinalResults(\n    state.registration.entries,\n    state.meet.weightClassesKgMen,\n    state.meet.weightClassesKgWomen,\n    state.meet.weightClassesKgMx,\n    state.meet.combineSleevesAndWraps\n  );\n\n  for (let i = 0; i < results.length; i++) {\n    const { category, orderedEntries } = results[i];\n\n    for (let j = 0; j < orderedEntries.length; j++) {\n      addEntriesRow(csv, category, orderedEntries[j], j);\n    }\n  }\n\n  return csv;\n};\n\nconst standardizeEquipment = (eq: Equipment): string => {\n  switch (eq) {\n    case \"Bare\":\n      return \"Raw\";\n    case \"Sleeves\":\n      return \"Raw\";\n    case \"Wraps\":\n      return \"Wraps\";\n    case \"Single-ply\":\n      return \"Single-ply\";\n    case \"Multi-ply\":\n      return \"Multi-ply\";\n    default:\n      (eq: empty); // eslint-disable-line\n      return \"Raw\";\n  }\n};\n\nconst addEntriesRow = (csv: Csv, category: Category, entry: Entry, index: number) => {\n  const finalEventTotalKg = getFinalEventTotalKg(entry, category.event);\n\n  // Initialize an empty row with all columns available.\n  let row: Array<string> = Array(csv.fieldnames.length).fill(\"\");\n\n  if (!entryHasLifted(entry)) {\n    row[csv.index(\"Place\")] = \"NS\"; // No-Show.\n  } else {\n    row[csv.index(\"Place\")] = finalEventTotalKg === 0 ? \"DQ\" : csvString(index + 1);\n  }\n\n  row[csv.index(\"Name\")] = csvString(entry.name);\n  row[csv.index(\"Sex\")] = csvString(entry.sex);\n  row[csv.index(\"BirthDate\")] = csvString(entry.birthDate);\n  row[csv.index(\"Age\")] = csvString(entry.age);\n  row[csv.index(\"Country\")] = csvString(entry.country);\n  row[csv.index(\"State\")] = csvString(entry.state);\n  row[csv.index(\"Equipment\")] = csvString(standardizeEquipment(entry.equipment));\n  row[csv.index(\"Division\")] = csvString(category.division);\n  row[csv.index(\"BodyweightKg\")] = csvString(entry.bodyweightKg);\n  row[csv.index(\"WeightClassKg\")] = csvString(category.weightClassStr);\n  row[csv.index(\"TotalKg\")] = csvString(finalEventTotalKg);\n  row[csv.index(\"Event\")] = csvString(category.event);\n\n  // Squat.\n  if (category.event.includes(\"S\")) {\n    row[csv.index(\"Best3SquatKg\")] = csvString(getBest3SquatKg(entry));\n    for (let i = 0; i < MAX_ATTEMPTS; i++) {\n      const field = \"Squat\" + (i + 1) + \"Kg\";\n      row[csv.index(field)] = csvString(entry.squatKg[i] * entry.squatStatus[i]);\n    }\n  }\n\n  // Bench.\n  if (category.event.includes(\"B\")) {\n    row[csv.index(\"Best3BenchKg\")] = csvString(getBest3BenchKg(entry));\n    for (let i = 0; i < MAX_ATTEMPTS; i++) {\n      const field = \"Bench\" + (i + 1) + \"Kg\";\n      row[csv.index(field)] = csvString(entry.benchKg[i] * entry.benchStatus[i]);\n    }\n  }\n\n  // Deadlift.\n  if (category.event.includes(\"D\")) {\n    row[csv.index(\"Best3DeadliftKg\")] = csvString(getBest3DeadliftKg(entry));\n    for (let i = 0; i < MAX_ATTEMPTS; i++) {\n      const field = \"Deadlift\" + (i + 1) + \"Kg\";\n      row[csv.index(field)] = csvString(entry.deadliftKg[i] * entry.deadliftStatus[i]);\n    }\n  }\n\n  csv.rows.push(row);\n};\n\nexport const exportAsOplCsv = (state: GlobalState): string => {\n  const meetCsv: Csv = makeMeetCsv(state.meet);\n\n  let entriesCsv: Csv = makeEntriesCsv(state);\n  entriesCsv.removeEmptyColumns();\n\n  const versionStr = \"OPL Format v1\";\n\n  return versionStr + \"\\n\\n\" + meetCsv.toString() + \"\\n\" + entriesCsv.toString();\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Exports data to a spreadsheet format used by the USAPL.\n\nimport { csvString, Csv } from \"./csv\";\nimport { getFinalResults } from \"../divisionPlace\";\n\nimport type { Category, CategoryResults } from \"../divisionPlace\";\nimport type { Entry, Event } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\n// Translates the event from our format to the NextLifter format.\nconst translateEvent = (ev: Event): string => {\n  switch (ev) {\n    // Variants present in the NextLifter software.\n    case \"SBD\":\n      return \"PL\";\n    case \"BD\":\n      return \"PP\";\n    case \"S\":\n      return \"SQ\";\n    case \"B\":\n      return \"BP\";\n    case \"D\":\n      return \"DL\";\n\n    // These variants aren't selectable in NextLifter, so the USAPL doesn't use them.\n    case \"SB\":\n      return \"SB\";\n    case \"SD\":\n      return \"SD\";\n    default:\n      (ev: empty); // eslint-disable-line\n      return ev;\n  }\n};\n\n// Converts the ISO8601 entry.birthDate to USAPL MM/DD/YYYY format.\nconst makeBirthDate = (entry: Entry): string => {\n  if (entry.birthDate === undefined || entry.birthDate === \"\") {\n    return \"\";\n  }\n  let [year, month, day]: Array<string> = entry.birthDate.split(\"-\");\n  return month + \"/\" + day + \"/\" + year;\n};\n\n// Given an Entry and its index in the CategoryResults.orderedEntries,\n// render all that information as a one-liner CSV string.\nconst addDataRow = (csv: Csv, category: Category, entry: Entry) => {\n  const hasSquat: boolean = category.event.includes(\"S\");\n  const hasBench: boolean = category.event.includes(\"B\");\n  const hasDL: boolean = category.event.includes(\"D\");\n\n  // Initialize an empty row with all columns available.\n  let row: Array<string> = Array(csv.fieldnames.length).fill(\"\");\n\n  row[csv.index(\"Name\")] = csvString(entry.name);\n  // TODO: Team.\n  row[csv.index(\"Div\")] = csvString(category.division);\n  row[csv.index(\"Bwt - kg\")] = csvString(entry.bodyweightKg);\n  row[csv.index(\"IPF Wt Cls\")] = csvString(category.weightClassStr);\n  row[csv.index(\"DOB\")] = csvString(makeBirthDate(entry));\n  row[csv.index(\"Squat 1\")] = csvString(hasSquat ? entry.squatKg[0] * entry.squatStatus[0] : 0);\n  row[csv.index(\"Squat 2\")] = csvString(hasSquat ? entry.squatKg[1] * entry.squatStatus[1] : 0);\n  row[csv.index(\"Squat 3\")] = csvString(hasSquat ? entry.squatKg[2] * entry.squatStatus[2] : 0);\n  row[csv.index(\"Bench 1\")] = csvString(hasBench ? entry.benchKg[0] * entry.benchStatus[0] : 0);\n  row[csv.index(\"Bench 2\")] = csvString(hasBench ? entry.benchKg[1] * entry.benchStatus[1] : 0);\n  row[csv.index(\"Bench 3\")] = csvString(hasBench ? entry.benchKg[2] * entry.benchStatus[2] : 0);\n  row[csv.index(\"Deadlift 1\")] = csvString(hasDL ? entry.deadliftKg[0] * entry.deadliftStatus[0] : 0);\n  row[csv.index(\"Deadlift 2\")] = csvString(hasDL ? entry.deadliftKg[1] * entry.deadliftStatus[1] : 0);\n  row[csv.index(\"Deadlift 3\")] = csvString(hasDL ? entry.deadliftKg[2] * entry.deadliftStatus[2] : 0);\n  row[csv.index(\"Event\")] = csvString(translateEvent(category.event));\n  row[csv.index(\"State\")] = csvString(entry.state);\n  row[csv.index(\"MemberID\")] = csvString(entry.memberId);\n  // TODO: Drug Test.\n\n  csv.rows.push(row);\n};\n\nexport const exportAsUSAPLCsv = (state: GlobalState): string => {\n  let csv = new Csv();\n  csv.fieldnames = [\n    \"Name\",\n    \"Team\",\n    \"Div\", // Division.\n    \"Bwt - kg\", // Bodyweight, kg.\n    \"IPF Wt Cls\", // IPF Weight Class (SHW as \"120+\", same format).\n    \"DOB\", // Date of Birth, in MM/DD/YYYY format.\n    \"Squat 1\", // Units unspecified, but seem to be kg.\n    \"Squat 2\",\n    \"Squat 3\",\n    \"Bench 1\",\n    \"Bench 2\",\n    \"Bench 3\",\n    \"Deadlift 1\",\n    \"Deadlift 2\",\n    \"Deadlift 3\",\n    \"Event\", // In NextLifter format (PL, BO, etc.).\n    \"State\", // USA state of residence of the lifter, as abbreviation.\n    \"MemberID\",\n    \"Drug Test\" // \"Y\" if a test was performed, blank otherwise.\n  ];\n\n  const results: Array<CategoryResults> = getFinalResults(\n    state.registration.entries,\n    state.meet.weightClassesKgMen,\n    state.meet.weightClassesKgWomen,\n    state.meet.weightClassesKgMx,\n    state.meet.combineSleevesAndWraps\n  );\n\n  for (let i = 0; i < results.length; i++) {\n    const { category, orderedEntries } = results[i];\n\n    for (let j = 0; j < orderedEntries.length; j++) {\n      addDataRow(csv, category, orderedEntries[j]);\n    }\n  }\n\n  return csv.toString();\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Results page, contained by the ResultsContainer.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, FormControl, Panel } from \"react-bootstrap\";\nimport saveAs from \"file-saver\";\n\nimport ByDivision from \"./ByDivision\";\nimport ByPoints from \"./ByPoints\";\n\nimport { mergePlatform } from \"../../actions/registrationActions\";\n\nimport { liftingPresentOnPlatform, getWhetherPlatformsHaveLifted } from \"../../logic/entry\";\nimport { exportAsOplCsv } from \"../../logic/export/oplcsv\";\nimport { exportAsUSAPLCsv } from \"../../logic/export/usapl\";\n\nimport type { Entry } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\nimport styles from \"./ResultsView.module.scss\";\nconst marginStyle = { margin: \"0 20px 0 20px\" };\n\ninterface StateProps {\n  global: GlobalState;\n}\n\ninterface DispatchProps {\n  mergePlatform: (day: number, platform: number, platformEntries: Array<Entry>) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\ninterface InternalState {\n  day: number;\n  by: \"Division\" | \"Points\";\n}\n\n// FIXME: Unfortunate use of globals :/ I don't have a better idea.\n// This is to pass information from the merge button click handler to the\n// file loader click handler.\nlet globalMergeDay: number = 0;\nlet globalMergePlatform: number = 0;\n\nclass ResultsView extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handleByChange = this.handleByChange.bind(this);\n    this.handleExportAsOplCsvClick = this.handleExportAsOplCsvClick.bind(this);\n    this.handleExportAsUSAPLCsvClick = this.handleExportAsUSAPLCsvClick.bind(this);\n    this.handleExportPlatformClick = this.handleExportPlatformClick.bind(this);\n    this.handleMergePlatformClick = this.handleMergePlatformClick.bind(this);\n    this.handleLoadFileInput = this.handleLoadFileInput.bind(this);\n\n    this.state = {\n      day: 0, // Meaning \"all\". Flow complained about mixing numbers and strings.\n      by: \"Division\"\n    };\n  }\n\n  makeDayOptions = () => {\n    let options = [\n      <option key={\"all\"} value={0}>\n        All Days Together\n      </option>\n    ];\n    for (let day = 1; day <= this.props.global.meet.lengthDays; day++) {\n      options.push(\n        <option key={day} value={day}>\n          Just Day {day}\n        </option>\n      );\n    }\n    return options;\n  };\n\n  handleDayChange = event => {\n    const day = event.target.value;\n    if (this.state.day !== day) {\n      this.setState({ day: day });\n    }\n  };\n\n  handleByChange = event => {\n    const by = event.target.value;\n    if (this.state.by !== by) {\n      this.setState({ by: by });\n    }\n  };\n\n  handleExportAsOplCsvClick = event => {\n    // TODO: Share this logic with HomeContainer.\n    let meetname = this.props.global.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n\n    const csv: string = exportAsOplCsv(this.props.global);\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" });\n    saveAs(blob, meetname + \".opl.csv\");\n  };\n\n  handleExportAsUSAPLCsvClick = event => {\n    // TODO: Share this logic with handleExportAsOplCsvClick.\n    let meetname = this.props.global.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n\n    const csv: string = exportAsUSAPLCsv(this.props.global);\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" });\n    saveAs(blob, meetname + \".USAPL.csv\");\n  };\n\n  handleExportPlatformClick = (day: number, platform: number, event: Object) => {\n    // TODO: Share this logic with handleExportAsOplCsvClick.\n    let meetname = this.props.global.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n    const exportname = meetname + \"-Day-\" + day + \"-Platform-\" + platform;\n\n    const state = JSON.stringify(this.props.global);\n    const blob = new Blob([state], { type: \"application/json;charset=utf-8\" });\n    saveAs(blob, exportname + \".export.openlifter\");\n  };\n\n  // The file input is hidden, and we want to use a button to activate it.\n  // This event handler makes a proxy call to the *real* event handler.\n  handleMergePlatformClick = (day: number, platform: number, event: Object) => {\n    const loadHelper = document.getElementById(\"loadhelper\");\n    if (loadHelper !== null) {\n      globalMergeDay = day;\n      globalMergePlatform = platform;\n      loadHelper.click();\n    }\n  };\n\n  // Called when a file is selected for merging platform data.\n  handleLoadFileInput = () => {\n    const loadHelper = document.getElementById(\"loadhelper\");\n    if (loadHelper === null || !(loadHelper instanceof HTMLInputElement)) {\n      return;\n    }\n\n    // Get the (day, platform) from global state.\n    const day: number = globalMergeDay;\n    const platform: number = globalMergePlatform;\n\n    // Remember the props in the onload() closure.\n    let props = this.props;\n\n    const selectedFile = loadHelper.files[0];\n    let reader = new FileReader();\n    reader.onload = function(event) {\n      let error: string | null = null;\n      try {\n        let obj: GlobalState = JSON.parse(event.target.result);\n\n        // stateVersion must match.\n        if (obj.versions.stateVersion !== props.global.versions.stateVersion) {\n          error =\n            \"This meet uses data version \" +\n            props.global.versions.stateVersion +\n            \", but the selected file uses data version \" +\n            obj.versions.stateVersion;\n        } else if (obj.meet.name !== props.global.meet.name) {\n          // The meet name must match, for sanity checking.\n          error =\n            \"This meet is named '\" +\n            props.global.meet.name +\n            \"', but the selected file is for the meet '\" +\n            obj.meet.name +\n            \"'.\";\n        } else if (!liftingPresentOnPlatform(obj.registration.entries, day, platform)) {\n          // The meet must actually contain data from the given (day, platform).\n          error = \"The selected file doesn't have any lifting data for Day \" + day + \" Platform \" + platform + \".\";\n        } else {\n          // Sanity checks passed: fire off a mergePlatform action!\n          const platformEntries = obj.registration.entries.filter(e => {\n            return e.day === day && e.platform === platform;\n          });\n          props.mergePlatform(day, platform, platformEntries);\n        }\n      } catch (err) {\n        error = \"Couldn't parse JSON.\";\n      }\n\n      if (error !== null) {\n        window.alert(error);\n      }\n    };\n    reader.readAsText(selectedFile);\n  };\n\n  makePlatformMergeButtons = () => {\n    // Array accessed by platformsHaveLifted[day-1][platform-1].\n    const platformsHaveLifted: Array<Array<boolean>> = getWhetherPlatformsHaveLifted(\n      this.props.global.meet.platformsOnDays,\n      this.props.global.registration.entries\n    );\n\n    let forms = [];\n\n    for (let i = 0; i < platformsHaveLifted.length; i++) {\n      const liftedOnDay = platformsHaveLifted[i];\n\n      let buttons = [];\n      for (let j = 0; j < liftedOnDay.length; j++) {\n        const lifted = liftedOnDay[j];\n        const actionText = lifted === true ? \"Export\" : \"Merge\";\n        const bsStyle = lifted === true ? \"success\" : \"warning\";\n        const marginStyle = j > 0 ? { marginLeft: \"14px\" } : null;\n        buttons.push(\n          <Button\n            key={i + \"-\" + j}\n            bsStyle={bsStyle}\n            style={marginStyle}\n            onClick={e => {\n              lifted === true\n                ? this.handleExportPlatformClick(i + 1, j + 1, e)\n                : this.handleMergePlatformClick(i + 1, j + 1, e);\n            }}\n          >\n            {actionText} Day {i + 1} Platform {j + 1}\n          </Button>\n        );\n      }\n\n      forms.push(\n        <div key={i}>\n          <div>Combine Platforms for Day {i + 1}</div>\n          <div>{buttons}</div>\n          {i < platformsHaveLifted.length - 1 ? <br /> : null}\n        </div>\n      );\n    }\n\n    return forms;\n  };\n\n  render() {\n    const results =\n      this.state.by === \"Division\" ? (\n        <ByDivision key={this.state.day} day={this.state.day} />\n      ) : (\n        <ByPoints key={this.state.day} day={this.state.day} />\n      );\n\n    return (\n      <div style={marginStyle}>\n        <Panel bsStyle=\"primary\">\n          <Panel.Heading>Merge Platforms</Panel.Heading>\n          <Panel.Body>\n            <div style={{ fontWeight: \"bold\" }}>Merging platforms will overwrite data. Please save before merging.</div>\n            <br />\n            {this.makePlatformMergeButtons()}\n          </Panel.Body>\n        </Panel>\n\n        <Panel>\n          <Panel.Heading>Export Official Results</Panel.Heading>\n          <Panel.Body>\n            <Button onClick={this.handleExportAsOplCsvClick}>Export for OpenPowerlifting</Button>\n\n            <Button onClick={this.handleExportAsUSAPLCsvClick} style={{ marginLeft: \"14px\" }}>\n              Export for USAPL\n            </Button>\n          </Panel.Body>\n        </Panel>\n\n        <Panel bsStyle=\"info\">\n          <Panel.Heading>Results For...</Panel.Heading>\n          <Panel.Body className={styles.controlPanel}>\n            <FormControl\n              defaultValue={this.state.day}\n              componentClass=\"select\"\n              onChange={this.handleDayChange}\n              className={styles.dropdown}\n            >\n              {this.makeDayOptions()}\n            </FormControl>\n\n            <FormControl\n              defaultValue={this.state.by}\n              componentClass=\"select\"\n              onChange={this.handleByChange}\n              className={styles.dropdown}\n              style={{ marginLeft: \"14px\" }}\n            >\n              <option value=\"Division\">By Division</option>\n              <option value=\"Points\">By Points</option>\n            </FormControl>\n          </Panel.Body>\n        </Panel>\n\n        {results}\n\n        <input\n          id=\"loadhelper\"\n          type=\"file\"\n          accept=\".openlifter\"\n          style={{ display: \"none\" }}\n          onChange={this.handleLoadFileInput}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    global: state\n  };\n};\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    mergePlatform: (day, platform, platformEntries) => dispatch(mergePlatform(day, platform, platformEntries))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ResultsView);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Results page.\n\nimport React from \"react\";\nimport ResultsView from \"../components/results/ResultsView\";\n\nclass ResultsContainer extends React.Component<{}> {\n  render() {\n    return <ResultsView />;\n  }\n}\n\nexport default ResultsContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Common functions shared by the Randomize feature.\n\n// Generate a gibberish string, between 0-11 characters.\nexport const randomString = (): string => {\n  // Converts each digit to a value in base 36.\n  return Math.random()\n    .toString(36)\n    .substr(2);\n};\n\n// Generate a random integer between max and min.\nexport const randomInt = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n// Generate a random floating-point number with a set number of fractional digits.\nexport const randomFixedPoint = (min: number, max: number, fixedPoints: number) => {\n  const power = Math.pow(10, fixedPoints);\n\n  // Construct an integer from [0, (max - min + 1) * 10^fixedPoints].\n  const k = Math.floor(Math.random() * (max - min + 1) * power);\n\n  // Translate it back to normal space.\n  return k / power + min;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Randomizes the Meet Setup state, for debugging.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\n\nimport { randomString, randomInt, randomFixedPoint } from \"./RandomizeHelpers\";\n\nimport {\n  setDivisions,\n  setFederation,\n  setLengthDays,\n  setMeetName,\n  setPlatformsOnDays,\n  setWeightClasses\n} from \"../../actions/meetSetupActions\";\n\nconst NonsenseFederations = [\n  \"CTHULHU\",\n  \"USPLAWH\",\n  \"FIREFOX\",\n  \"PIZZAHUT\",\n  \"50% RAW\",\n  \"TODDLERS\",\n  \"COFFEE\",\n  \"THEBORG\",\n  \"LETITSNOW\"\n];\n\nconst NonsenseDivisions = [\"Masters\", \"Juniors\", \"Lawyers\", \"Infants\", \"Turtles\", \"Rabbits\"];\n\nclass RandomizeMeetSetupButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.randomizeMeetSetup = this.randomizeMeetSetup.bind(this);\n  }\n\n  randomizeMeetSetup() {\n    // Set a gibberish MeetName.\n    // ==========================================\n    this.props.setMeetName(randomString() + randomString());\n\n    // Generate a nonsense federation.\n    // ==========================================\n    const fed = NonsenseFederations[randomInt(0, NonsenseFederations.length - 1)];\n    this.props.setFederation(fed);\n\n    // Generate nonsense weight classes.\n    // ==========================================\n    const numClassesMen = randomInt(5, 12);\n    const numClassesWomen = randomInt(4, 8);\n\n    let classesMen = [];\n    for (let i = 0; i < numClassesMen; i++) {\n      classesMen.push(randomFixedPoint(40, 145, 1));\n    }\n    classesMen = classesMen.sort((a, b) => Number(a) - Number(b));\n\n    let classesWomen = [];\n    for (let i = 0; i < numClassesWomen; i++) {\n      classesWomen.push(randomFixedPoint(35, 110, 1));\n    }\n    classesWomen = classesWomen.sort((a, b) => Number(a) - Number(b));\n\n    let classesMx = [];\n    for (let i = 0; i < numClassesWomen; i++) {\n      classesMx.push(randomFixedPoint(40, 120, 1));\n    }\n    classesMx = classesMx.sort((a, b) => Number(a) - Number(b));\n\n    this.props.setWeightClasses(\"M\", classesMen);\n    this.props.setWeightClasses(\"F\", classesWomen);\n    this.props.setWeightClasses(\"Mx\", classesMx);\n\n    // Generate nonsense days and platforms.\n    // ==========================================\n    const numDays = randomInt(1, 4);\n    this.props.setLengthDays(numDays);\n\n    for (let i = 0; i < numDays; i++) {\n      const day = i + 1;\n      const numPlatforms = randomInt(1, 2);\n      this.props.setPlatformsOnDays(day, numPlatforms);\n    }\n\n    // Generate nonsense divisions.\n    // ==========================================\n    const numDivisions = randomInt(1, 20);\n    let divisions = [];\n    for (let i = 0; i < numDivisions; i++) {\n      let div = NonsenseDivisions[randomInt(0, NonsenseDivisions.length - 1)];\n      if (Math.random() > 0.5) {\n        const age_lower = randomInt(1, 40);\n        const age_upper = randomInt(age_lower + 1, 99);\n        div = div + \" \" + String(age_lower) + \"-\" + String(age_upper);\n      }\n\n      // Disallow repeat divisions.\n      if (divisions.indexOf(div) === -1) {\n        divisions.push(div);\n      }\n    }\n    this.props.setDivisions(divisions);\n  }\n\n  render() {\n    return <Button onClick={this.randomizeMeetSetup}>Meet Setup</Button>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDivisions: divisions => dispatch(setDivisions(divisions)),\n    setFederation: federation => dispatch(setFederation(federation)),\n    setLengthDays: length => dispatch(setLengthDays(length)),\n    setMeetName: name => dispatch(setMeetName(name)),\n    setPlatformsOnDays: (day, count) => dispatch(setPlatformsOnDays(day, count)),\n    setWeightClasses: (sex, classesKg) => dispatch(setWeightClasses(sex, classesKg))\n  };\n};\n\nRandomizeMeetSetupButton.propTypes = {\n  setDivisions: PropTypes.func.isRequired,\n  setFederation: PropTypes.func.isRequired,\n  setLengthDays: PropTypes.func.isRequired,\n  setMeetName: PropTypes.func.isRequired,\n  setPlatformsOnDays: PropTypes.func.isRequired,\n  setWeightClasses: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RandomizeMeetSetupButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Randomizes the Registration page, for debugging.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\n\nimport { randomInt } from \"./RandomizeHelpers\";\n\nimport { newRegistration, deleteRegistration } from \"../../actions/registrationActions\";\n\nconst NonsenseFirstNames = [\n  \"Aragorn\",\n  \"Arwen\",\n  \"Aule\",\n  \"Balin\",\n  \"Beorn\",\n  \"Beregond\",\n  \"Bert\",\n  \"Bifur\",\n  \"Bilbo\",\n  \"Bofur\",\n  \"Bolg\",\n  \"Bombur\",\n  \"Boromir\",\n  \"Bregalad\",\n  \"Bullroarer\",\n  \"Bungo\",\n  \"Carc\",\n  \"Celeborn\",\n  \"Dain\",\n  \"Denethor\",\n  \"Dori\",\n  \"Dwalin\",\n  \"Elrohir\",\n  \"Elrond\",\n  \"Eomer\",\n  \"Eowyn\",\n  \"Este\",\n  \"Faramir\",\n  \"Fili\",\n  \"Fredegar\",\n  \"Frodo\",\n  \"Galadriel\",\n  \"Galion\",\n  \"Gandalf\",\n  \"Gimli\",\n  \"Gloin\",\n  \"Glorfindel\",\n  \"Golfimbul\",\n  \"Gollum\",\n  \"Gothmog\",\n  \"Grima\",\n  \"Imrahil\",\n  \"Kili\",\n  \"Legolas\",\n  \"Lorien\",\n  \"Mandos\",\n  \"Manwe\",\n  \"Melkor\",\n  \"Meriadoc\",\n  \"Nessa\",\n  \"Nienna\",\n  \"Nori\",\n  \"Oin\",\n  \"Ori\",\n  \"Orome\",\n  \"Peregrin\",\n  \"Pippin\",\n  \"Radagast\",\n  \"Roac\",\n  \"Samwise\",\n  \"Saruman\",\n  \"Sauron\",\n  \"Shelob\",\n  \"Smaug\",\n  \"Theoden\",\n  \"Thorin\",\n  \"Thranduil\",\n  \"Tom\",\n  \"Treebeard\",\n  \"Tulkas\",\n  \"Ulmo\",\n  \"Vaire\",\n  \"Vana\",\n  \"Varda\",\n  \"William\",\n  \"Yavanna\"\n];\n\nconst NonsenseLastNames = [\n  \"Black\",\n  \"Burbage\",\n  \"Carrow\",\n  \"Cattermole\",\n  \"Chang\",\n  \"Clearwater\",\n  \"Crabbe\",\n  \"Creevey\",\n  \"Crouch\",\n  \"Delacour\",\n  \"Diggory\",\n  \"Dumbledore\",\n  \"Dursley\",\n  \"Edgecombe\",\n  \"Filch\",\n  \"Flitwick\",\n  \"Fudge\",\n  \"Goyle\",\n  \"Granger\",\n  \"Grindelwald\",\n  \"Hagrid\",\n  \"Hufflepuff\",\n  \"Kettleburn\",\n  \"Lockhart\",\n  \"Longbottom\",\n  \"Lovegood\",\n  \"Lupin\",\n  \"Malfoy\",\n  \"Marchbanks\",\n  \"McGonagall\",\n  \"McLaggen\",\n  \"Moody\",\n  \"Nott\",\n  \"Ogden\",\n  \"Ollivander\",\n  \"Parkinson\",\n  \"Pettigrew\",\n  \"Peverell\",\n  \"Pince\",\n  \"Podmore\",\n  \"Pomfrey\",\n  \"Potter\",\n  \"Quirrell\",\n  \"Riddle\",\n  \"Rookwood\",\n  \"Rowle\",\n  \"Runcorn\",\n  \"Scrimgeour\",\n  \"Shacklebolt\",\n  \"Shunpike\",\n  \"Sinistra\",\n  \"Slughorn\",\n  \"Slytherin\",\n  \"Snape\",\n  \"Spinnet\",\n  \"Sprout\",\n  \"Thicknesse\",\n  \"Tonks\",\n  \"Trelawney\",\n  \"Twycross\",\n  \"Umbridge\",\n  \"Vance\",\n  \"Voldemort\",\n  \"Weasley\",\n  \"Wood\",\n  \"Yaxley\",\n  \"Zabini\"\n];\n\nclass RandomizeRegistrationButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.deleteExistingRegistrations = this.deleteExistingRegistrations.bind(this);\n    this.generateEntries = this.generateEntries.bind(this);\n    this.randomizeRegistration = this.randomizeRegistration.bind(this);\n  }\n\n  deleteExistingRegistrations() {\n    const entryIds = this.props.registration.entries.map(e => e.id);\n    for (let i = 0; i < entryIds.length; i++) {\n      this.props.deleteRegistration(entryIds[i]);\n    }\n  }\n\n  // Generate entries in a flight together, in case we want to give them\n  // similar properties.\n  generateEntries(day, platform, flight) {\n    const numLifters = randomInt(6, 18);\n\n    for (let i = 0; i < numLifters; i++) {\n      // Set a nonsense Name.\n      // ==========================================\n      const firstName = NonsenseFirstNames[randomInt(0, NonsenseFirstNames.length - 1)];\n      const lastName = NonsenseLastNames[randomInt(0, NonsenseLastNames.length - 1)];\n      const name = firstName + \" \" + lastName;\n\n      // Set a random Sex.\n      // ==========================================\n      const sex = [\"M\", \"F\", \"Mx\"][randomInt(0, 2)];\n\n      // Generate random events, making most lifters SBD.\n      // ==========================================\n      let events = [];\n      if (Math.random() < 0.5) {\n        events.push(\"SBD\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"BD\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"S\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"B\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"D\");\n      }\n      if (events.length === 0) {\n        events.push(\"SBD\");\n      }\n\n      // Generate random equipment, making most lifters SBD,\n      // being careful that it matches their events.\n      // ==========================================\n      let hasSquat = false;\n      for (let i = 0; i < events.length; i++) {\n        if (events[i].includes(\"S\")) {\n          hasSquat = true;\n          break;\n        }\n      }\n\n      const equipmentSelect = Math.random();\n      let equipment = \"Sleeves\";\n      if (equipmentSelect < 0.7) {\n        // Nothing, sleeves default case.\n      } else if (equipmentSelect < 0.9) {\n        if (hasSquat) {\n          equipment = \"Wraps\";\n        }\n      } else if (equipmentSelect < 0.95) {\n        equipment = \"Single-ply\";\n      } else {\n        equipment = \"Multi-ply\";\n      }\n\n      // File into random divisions.\n      // ==========================================\n      let divisions = [];\n      if (this.props.meet.divisions.length > 0) {\n        const divisionsUpperBound = Math.max(1, this.props.meet.divisions.length - 1);\n        const numDivisions = randomInt(1, divisionsUpperBound);\n\n        // List of remaining available divisions.\n        let divchooser = this.props.meet.divisions.slice();\n\n        for (let i = 0; i < numDivisions; i++) {\n          const choice = randomInt(0, divchooser.length - 1);\n          divisions.push(divchooser[choice]);\n\n          // Delete the choice from the list of available divisions.\n          divchooser.splice(choice, 1);\n        }\n      }\n\n      this.props.newRegistration({\n        day: day,\n        platform: platform,\n        flight: flight,\n        name: name,\n        sex: sex,\n        events: events,\n        equipment: equipment,\n        divisions: divisions\n      });\n    }\n  }\n\n  randomizeRegistration() {\n    const FLIGHTCHARS = \"ABCDEFGHIJKLMNOP\";\n\n    this.deleteExistingRegistrations();\n    for (let day = 1; day <= this.props.meet.lengthDays; day++) {\n      const numPlatforms = this.props.meet.platformsOnDays[day - 1];\n      for (let platform = 1; platform <= numPlatforms; platform++) {\n        const numFlights = randomInt(1, 3);\n        for (let flight = 0; flight < numFlights; flight++) {\n          this.generateEntries(day, platform, FLIGHTCHARS[flight]);\n        }\n      }\n    }\n  }\n\n  render() {\n    return <Button onClick={this.randomizeRegistration}>Registration</Button>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    newRegistration: obj => dispatch(newRegistration(obj)),\n    deleteRegistration: entryId => dispatch(deleteRegistration(entryId))\n  };\n};\n\nRandomizeRegistrationButton.propTypes = {\n  meet: PropTypes.shape({\n    lengthDays: PropTypes.number.isRequired,\n    platformsOnDays: PropTypes.array.isRequired,\n    divisions: PropTypes.array.isRequired\n  }),\n  registration: PropTypes.shape({\n    entries: PropTypes.array.isRequired\n  }),\n  newRegistration: PropTypes.func.isRequired,\n  deleteRegistration: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RandomizeRegistrationButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Randomizes the Registration page, for debugging.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\n\nimport { randomInt, randomFixedPoint } from \"./RandomizeHelpers\";\n\nimport { updateRegistration } from \"../../actions/registrationActions\";\nimport { enterAttempt } from \"../../actions/liftingActions\";\n\nclass RandomizeWeighinsButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.randomizeWeighins = this.randomizeWeighins.bind(this);\n  }\n\n  randomAttempt() {\n    const multiple = 2.5;\n    return Math.floor(randomFixedPoint(25, 360, 1) / multiple) * multiple;\n  }\n\n  randomizeWeighins() {\n    const entries = this.props.registration.entries;\n\n    for (let i = 0; i < entries.length; i++) {\n      const entry = entries[i];\n\n      // Get a random bodyweight.\n      // ==========================================\n      const bodyweightKg = randomFixedPoint(20, 150, 1);\n      this.props.updateRegistration(entry.id, {\n        bodyweightKg: bodyweightKg\n      });\n\n      // Get a random age.\n      const age = randomInt(5, 79);\n      this.props.updateRegistration(entry.id, {\n        age: age\n      });\n\n      // Figure out which events we're generating information for.\n      // ==========================================\n      let hasSquat = false;\n      let hasBench = false;\n      let hasDeadlift = false;\n      for (let j = 0; j < entry.events.length; j++) {\n        const e = entry.events[j];\n        if (e.includes(\"S\")) {\n          hasSquat = true;\n        }\n        if (e.includes(\"B\")) {\n          hasBench = true;\n        }\n        if (e.includes(\"D\")) {\n          hasDeadlift = true;\n        }\n      }\n\n      // Set attempts.\n      // ==========================================\n      if (hasSquat) {\n        this.props.enterAttempt(entry.id, \"S\", 1, this.randomAttempt());\n      }\n      if (hasBench) {\n        this.props.enterAttempt(entry.id, \"B\", 1, this.randomAttempt());\n      }\n      if (hasDeadlift) {\n        this.props.enterAttempt(entry.id, \"D\", 1, this.randomAttempt());\n      }\n\n      // Set rack info.\n      // ==========================================\n      if (hasSquat) {\n        const height = String(randomInt(2, 18));\n        const pos = Math.random() < 0.9 ? \"out\" : \"in\";\n        this.props.updateRegistration(entry.id, {\n          squatRackInfo: height + pos\n        });\n      }\n\n      if (hasBench) {\n        const height = String(randomInt(0, 12));\n        const safety = String(randomInt(0, 4));\n        this.props.updateRegistration(entry.id, {\n          benchRackInfo: height + \"/\" + safety\n        });\n      }\n    }\n  }\n\n  render() {\n    return <Button onClick={this.randomizeWeighins}>Weigh-ins</Button>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateRegistration: (entryId, obj) => dispatch(updateRegistration(entryId, obj)),\n    enterAttempt: (entryId, lift, attemptOneIndexed, weightKg) =>\n      dispatch(enterAttempt(entryId, lift, attemptOneIndexed, weightKg))\n  };\n};\n\nRandomizeWeighinsButton.propTypes = {\n  meet: PropTypes.shape({}),\n  registration: PropTypes.shape({\n    entries: PropTypes.array.isRequired\n  }),\n  updateRegistration: PropTypes.func.isRequired,\n  enterAttempt: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RandomizeWeighinsButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Tools for manipulating state information to aid debugging.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, ButtonGroup, Panel } from \"react-bootstrap\";\n\nimport RandomizeMeetSetupButton from \"./RandomizeMeetSetup\";\nimport RandomizeRegistrationButton from \"./RandomizeRegistration\";\nimport RandomizeWeighinsButton from \"./RandomizeWeighins\";\n\nclass StateTools extends React.Component {\n  // The simplest possible way to implement a Reset button.\n  reInitializeRedux = () => {\n    localStorage.clear();\n    window.location.reload();\n  };\n\n  render() {\n    return (\n      <div>\n        <Panel bsStyle=\"danger\">\n          <Panel.Heading>Generate Random Valid Data</Panel.Heading>\n          <Panel.Body>\n            <Button style={{ marginRight: \"15px\" }} bsStyle=\"danger\" onClick={this.reInitializeRedux}>\n              Reset\n            </Button>\n            <ButtonGroup>\n              <RandomizeMeetSetupButton />\n              <RandomizeRegistrationButton />\n              <RandomizeWeighinsButton />\n            </ButtonGroup>\n          </Panel.Body>\n        </Panel>\n\n        <Panel bsStyle=\"info\">\n          <Panel.Heading>Redux State</Panel.Heading>\n          <Panel.Body>\n            <pre>{JSON.stringify(this.props, null, 2)}</pre>\n          </Panel.Body>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(StateTools);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// A page dedicated to debugging tools.\n\nimport React from \"react\";\nimport StateTools from \"../components/debug/StateTools\";\n\nconst DebugContainer = () => {\n  return (\n    <div style={{ marginRight: \"20px\", marginLeft: \"20px\" }}>\n      <StateTools />\n    </div>\n  );\n};\n\nexport default DebugContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the Navigation component for navigating between pages using react-router.\n\nimport React from \"react\";\nimport { Navbar, Nav, NavItem } from \"react-bootstrap\";\n\n// The LinkContainer is used to wrap Components that change the URL,\n// hooking them up with the Router.\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nconst Navigation = () => {\n  return (\n    <Navbar>\n      <Navbar.Brand>\n        <img alt=\"OpenLifter\" src=\"openlifter-white.svg\" />\n      </Navbar.Brand>\n\n      {/* Navbar uses Toggle and Collapse to automatically create a hamburger menu\n          in case of overflow on small screens.*/}\n      <Navbar.Toggle />\n      <Navbar.Collapse>\n        <Nav>\n          <LinkContainer exact to=\"/\">\n            <NavItem eventKey={1}>Home</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/meet-setup\">\n            <NavItem eventKey={2}>Meet Setup</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/registration\">\n            <NavItem eventKey={3}>Registration</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/weigh-ins\">\n            <NavItem eventKey={4}>Weigh-ins</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/flight-order\">\n            <NavItem eventKey={5}>Flight Order</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/lifting\">\n            <NavItem eventKey={6}>Lifting</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/results\">\n            <NavItem eventKey={7}>Results</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/debug\">\n            <NavItem eventKey={8}>Debug</NavItem>\n          </LinkContainer>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default Navigation;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport configureStore from \"./store\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { addLocaleData } from \"react-intl\";\nimport es from \"react-intl/locale-data/es\";\nimport eo from \"react-intl/locale-data/eo\";\nimport OpenLifterIntlProvider from \"./components/translations/OpenLifterIntlProvider\";\n\nimport HomeContainer from \"./containers/HomeContainer\";\nimport MeetSetupContainer from \"./containers/MeetSetupContainer\";\nimport RegistrationContainer from \"./containers/RegistrationContainer\";\nimport WeighinsContainer from \"./containers/WeighinsContainer\";\nimport LiftingContainer from \"./containers/LiftingContainer\";\nimport FlightOrderContainer from \"./containers/FlightOrderContainer\";\nimport ResultsContainer from \"./containers/ResultsContainer\";\nimport DebugContainer from \"./containers/DebugContainer\";\nimport Navigation from \"./components/Navigation\";\n\naddLocaleData([...es, ...eo]);\n\nclass App extends React.Component {\n  render() {\n    let { store, persistor } = configureStore();\n\n    return (\n      // Provider is a React component from the react-redux library.\n      // Its purpose is to \"provide\" the given store to its child components.\n      // Because the Provider wraps the whole App here, the store is global state.\n      //\n      // Switch iterates over its children (Routes) and renders the first one that matches the current path name\n      //\n      // Route takes a path and a component, and renders the given component if the current path matches the specified path.\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <OpenLifterIntlProvider>\n            <Router basename={\"/nightmare-muscle\"}>\n              <div>\n                <Navigation />\n                <Switch>\n                  <Route exact path=\"/\" component={HomeContainer} />\n                  <Route path=\"/meet-setup\" component={MeetSetupContainer} />\n                  <Route path=\"/registration\" component={RegistrationContainer} />\n                  <Route path=\"/weigh-ins\" component={WeighinsContainer} />\n                  <Route path=\"/flight-order\" component={FlightOrderContainer} />\n                  <Route path=\"/lifting\" component={LiftingContainer} />\n                  <Route path=\"/results\" component={ResultsContainer} />\n                  <Route path=\"/debug\" component={DebugContainer} />\n                </Switch>\n              </div>\n            </Router>\n          </OpenLifterIntlProvider>\n        </PersistGate>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nimport \"./index.css\";\nimport \"./bootstrap-custom/bootstrap-custom.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement !== null) {\n  ReactDOM.render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BarLoad_container__2ae8O\",\"rackInfo\":\"BarLoad_rackInfo__2RVUT\",\"bar\":\"BarLoad_bar__TP6yB\",\"kg50\":\"BarLoad_kg50__i7LXH\",\"kg25\":\"BarLoad_kg25__nlLuS\",\"kg20\":\"BarLoad_kg20__3xVPK\",\"kg15\":\"BarLoad_kg15__nFGDt\",\"kg10\":\"BarLoad_kg10__2mAso\",\"kg5\":\"BarLoad_kg5__2H1CX\",\"kg2p5\":\"BarLoad_kg2p5__hc46t\",\"kg1p25\":\"BarLoad_kg1p25__2YvAd\",\"kg1\":\"BarLoad_kg1__3JT5m\",\"kg0p75\":\"BarLoad_kg0p75__3ebq8\",\"kg0p5\":\"BarLoad_kg0p5__3ehD9\",\"kg0p25\":\"BarLoad_kg0p25__1nUX-\",\"collar\":\"BarLoad_collar__3IXT7\",\"error\":\"BarLoad_error__1t6Re\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"liftingtable\":\"LiftingTable_liftingtable__2-Rse\",\"textCell\":\"LiftingTable_textCell__gOmZ-\",\"divisionCell\":\"LiftingTable_divisionCell__1bTTP\",\"smallCell\":\"LiftingTable_smallCell__vwNWg\",\"spacerCell\":\"LiftingTable_spacerCell__3EnYx\",\"attemptInputCell\":\"LiftingTable_attemptInputCell__1YoPG\",\"current\":\"LiftingTable_current__1v05Z\",\"goodlift\":\"LiftingTable_goodlift__1v8vY\",\"nolift\":\"LiftingTable_nolift__GDNkx\",\"attemptInput\":\"LiftingTable_attemptInput__tuKcd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"LiftingFooter_footer__2Mb6I\",\"leftControls\":\"LiftingFooter_leftControls__kesKc\",\"rightControls\":\"LiftingFooter_rightControls__mXLjl\",\"fullscreen\":\"LiftingFooter_fullscreen__1HPVI\",\"goodLift\":\"LiftingFooter_goodLift__T-O7p\",\"noLift\":\"LiftingFooter_noLift__3-y0k\",\"selector\":\"LiftingFooter_selector__1Ndtq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LeftPanel_container__3puvp\",\"activeCard\":\"LeftPanel_activeCard__xIn4U\",\"nextCard\":\"LeftPanel_nextCard__1EN6h\",\"loadingBar\":\"LeftPanel_loadingBar__1UySC\",\"attemptText\":\"LeftPanel_attemptText__5bTr4\",\"barArea\":\"LeftPanel_barArea__1qr1-\",\"nextText\":\"LeftPanel_nextText__3pjTq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftDivider\":\"OneFlightOrder_leftDivider__8pDMh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"liftingView\":\"LiftingView_liftingView__W3VXA\",\"middleParentContainer\":\"LiftingView_middleParentContainer__1ysAw\",\"leftPanelContainer\":\"LiftingView_leftPanelContainer__2GOco\",\"rightPanelContainer\":\"LiftingView_rightPanelContainer__YTOzi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topBar\":\"TopBar_topBar__2HsiY\",\"lifterName\":\"TopBar_lifterName__1Hu9m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlPanel\":\"ResultsView_controlPanel__J3R0v\",\"dropdown\":\"ResultsView_dropdown__2UB4b\"};"],"sourceRoot":""}